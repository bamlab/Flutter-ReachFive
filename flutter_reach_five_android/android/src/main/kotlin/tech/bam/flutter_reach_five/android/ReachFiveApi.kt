// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package tech.bam.flutter_reach_five.android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ProviderCreatorTypeInterface(val raw: Int) {
  GOOGLE(0),
  FACEBOOK(1),
  WEBVIEW(2);

  companion object {
    fun ofRaw(raw: Int): ProviderCreatorTypeInterface? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ProfileAddressTypeInterface(val raw: Int) {
  BILLING(0),
  DELIVERY(1);

  companion object {
    fun ofRaw(raw: Int): ProfileAddressTypeInterface? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ErrorCodesInterface (
  val emailAlreadyInUseCode: String,
  val invalidEmailOrPasswordCode: String,
  val invalidVerificationCode: String,
  val invalidGrant: String,
  val userCancelledOrClosedTheWebFlow: String,
  val socialAccountEmailAlreadyInUse: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ErrorCodesInterface {
      val emailAlreadyInUseCode = list[0] as String
      val invalidEmailOrPasswordCode = list[1] as String
      val invalidVerificationCode = list[2] as String
      val invalidGrant = list[3] as String
      val userCancelledOrClosedTheWebFlow = list[4] as String
      val socialAccountEmailAlreadyInUse = list[5] as String
      return ErrorCodesInterface(emailAlreadyInUseCode, invalidEmailOrPasswordCode, invalidVerificationCode, invalidGrant, userCancelledOrClosedTheWebFlow, socialAccountEmailAlreadyInUse)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      emailAlreadyInUseCode,
      invalidEmailOrPasswordCode,
      invalidVerificationCode,
      invalidGrant,
      userCancelledOrClosedTheWebFlow,
      socialAccountEmailAlreadyInUse,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SdkConfigInterface (
  val domain: String,
  val clientId: String,
  val androidScheme: String,
  val iosScheme: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SdkConfigInterface {
      val domain = list[0] as String
      val clientId = list[1] as String
      val androidScheme = list[2] as String
      val iosScheme = list[3] as String
      return SdkConfigInterface(domain, clientId, androidScheme, iosScheme)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      domain,
      clientId,
      androidScheme,
      iosScheme,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProviderCreatorInterface (
  val type: ProviderCreatorTypeInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ProviderCreatorInterface {
      val type = ProviderCreatorTypeInterface.ofRaw(list[0] as Int)!!
      return ProviderCreatorInterface(type)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ReachFiveKeyInterface (
  val sdkConfig: SdkConfigInterface,
  val providerCreators: List<ProviderCreatorInterface?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ReachFiveKeyInterface {
      val sdkConfig = SdkConfigInterface.fromList(list[0] as List<Any?>)
      val providerCreators = list[1] as List<ProviderCreatorInterface?>
      return ReachFiveKeyInterface(sdkConfig, providerCreators)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      sdkConfig.toList(),
      providerCreators,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ReachFiveConfigInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val providers: List<String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ReachFiveConfigInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val providers = list[1] as List<String?>
      return ReachFiveConfigInterface(reachFiveKey, providers)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      providers,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProfileAddressInterface (
  val title: String? = null,
  val isDefault: Boolean? = null,
  val addressType: ProfileAddressTypeInterface? = null,
  val streetAddress: String? = null,
  val locality: String? = null,
  val region: String? = null,
  val postalCode: String? = null,
  val country: String? = null,
  val raw: String? = null,
  val deliveryNote: String? = null,
  val recipient: String? = null,
  val company: String? = null,
  val phoneNumber: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ProfileAddressInterface {
      val title = list[0] as String?
      val isDefault = list[1] as Boolean?
      val addressType: ProfileAddressTypeInterface? = (list[2] as Int?)?.let {
        ProfileAddressTypeInterface.ofRaw(it)
      }
      val streetAddress = list[3] as String?
      val locality = list[4] as String?
      val region = list[5] as String?
      val postalCode = list[6] as String?
      val country = list[7] as String?
      val raw = list[8] as String?
      val deliveryNote = list[9] as String?
      val recipient = list[10] as String?
      val company = list[11] as String?
      val phoneNumber = list[12] as String?
      return ProfileAddressInterface(title, isDefault, addressType, streetAddress, locality, region, postalCode, country, raw, deliveryNote, recipient, company, phoneNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      title,
      isDefault,
      addressType?.raw,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
      raw,
      deliveryNote,
      recipient,
      company,
      phoneNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ConsentInterface (
  val granted: Boolean,
  val consentType: String? = null,
  val date: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ConsentInterface {
      val granted = list[0] as Boolean
      val consentType = list[1] as String?
      val date = list[2] as String
      return ConsentInterface(granted, consentType, date)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      granted,
      consentType,
      date,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProfileSignupRequestInterface (
  val password: String,
  val email: String? = null,
  val phoneNumber: String? = null,
  val givenName: String? = null,
  val middleName: String? = null,
  val familyName: String? = null,
  val name: String? = null,
  val nickname: String? = null,
  val birthdate: String? = null,
  val profileURL: String? = null,
  val picture: String? = null,
  val username: String? = null,
  val gender: String? = null,
  val company: String? = null,
  val addresses: List<ProfileAddressInterface?>? = null,
  val locale: String? = null,
  val bio: String? = null,
  val customFields: Map<String?, Any?>? = null,
  val consents: Map<String?, ConsentInterface?>? = null,
  val liteOnly: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ProfileSignupRequestInterface {
      val password = list[0] as String
      val email = list[1] as String?
      val phoneNumber = list[2] as String?
      val givenName = list[3] as String?
      val middleName = list[4] as String?
      val familyName = list[5] as String?
      val name = list[6] as String?
      val nickname = list[7] as String?
      val birthdate = list[8] as String?
      val profileURL = list[9] as String?
      val picture = list[10] as String?
      val username = list[11] as String?
      val gender = list[12] as String?
      val company = list[13] as String?
      val addresses = list[14] as List<ProfileAddressInterface?>?
      val locale = list[15] as String?
      val bio = list[16] as String?
      val customFields = list[17] as Map<String?, Any?>?
      val consents = list[18] as Map<String?, ConsentInterface?>?
      val liteOnly = list[19] as Boolean?
      return ProfileSignupRequestInterface(password, email, phoneNumber, givenName, middleName, familyName, name, nickname, birthdate, profileURL, picture, username, gender, company, addresses, locale, bio, customFields, consents, liteOnly)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      password,
      email,
      phoneNumber,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      username,
      gender,
      company,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      liteOnly,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SignupRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val profile: ProfileSignupRequestInterface,
  val redirectUrl: String? = null,
  val scope: List<String?>? = null,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): SignupRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val profile = ProfileSignupRequestInterface.fromList(list[1] as List<Any?>)
      val redirectUrl = list[2] as String?
      val scope = list[3] as List<String?>?
      val errorCodes = ErrorCodesInterface.fromList(list[4] as List<Any?>)
      return SignupRequestInterface(reachFiveKey, profile, redirectUrl, scope, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      profile.toList(),
      redirectUrl,
      scope,
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AddressInterface (
  val formatted: String? = null,
  val streetAddress: String? = null,
  val locality: String? = null,
  val region: String? = null,
  val postalCode: String? = null,
  val country: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AddressInterface {
      val formatted = list[0] as String?
      val streetAddress = list[1] as String?
      val locality = list[2] as String?
      val region = list[3] as String?
      val postalCode = list[4] as String?
      val country = list[5] as String?
      return AddressInterface(formatted, streetAddress, locality, region, postalCode, country)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      formatted,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OpenIdUserInterface (
  val id: String? = null,
  val name: String? = null,
  val preferredUsername: String? = null,
  val givenName: String? = null,
  val familyName: String? = null,
  val middleName: String? = null,
  val nickname: String? = null,
  val picture: String? = null,
  val website: String? = null,
  val email: String? = null,
  val emailVerified: Boolean? = null,
  val gender: String? = null,
  val zoneinfo: String? = null,
  val locale: String? = null,
  val phoneNumber: String? = null,
  val phoneNumberVerified: Boolean? = null,
  val address: AddressInterface? = null,
  val birthdate: String? = null,
  val externalId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): OpenIdUserInterface {
      val id = list[0] as String?
      val name = list[1] as String?
      val preferredUsername = list[2] as String?
      val givenName = list[3] as String?
      val familyName = list[4] as String?
      val middleName = list[5] as String?
      val nickname = list[6] as String?
      val picture = list[7] as String?
      val website = list[8] as String?
      val email = list[9] as String?
      val emailVerified = list[10] as Boolean?
      val gender = list[11] as String?
      val zoneinfo = list[12] as String?
      val locale = list[13] as String?
      val phoneNumber = list[14] as String?
      val phoneNumberVerified = list[15] as Boolean?
      val address: AddressInterface? = (list[16] as List<Any?>?)?.let {
        AddressInterface.fromList(it)
      }
      val birthdate = list[17] as String?
      val externalId = list[18] as String?
      return OpenIdUserInterface(id, name, preferredUsername, givenName, familyName, middleName, nickname, picture, website, email, emailVerified, gender, zoneinfo, locale, phoneNumber, phoneNumberVerified, address, birthdate, externalId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      preferredUsername,
      givenName,
      familyName,
      middleName,
      nickname,
      picture,
      website,
      email,
      emailVerified,
      gender,
      zoneinfo,
      locale,
      phoneNumber,
      phoneNumberVerified,
      address?.toList(),
      birthdate,
      externalId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AuthTokenInterface (
  val idToken: String? = null,
  val accessToken: String,
  val refreshToken: String? = null,
  val tokenType: String? = null,
  val expiresIn: Long? = null,
  val user: OpenIdUserInterface? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): AuthTokenInterface {
      val idToken = list[0] as String?
      val accessToken = list[1] as String
      val refreshToken = list[2] as String?
      val tokenType = list[3] as String?
      val expiresIn = list[4].let { if (it is Int) it.toLong() else it as Long? }
      val user: OpenIdUserInterface? = (list[5] as List<Any?>?)?.let {
        OpenIdUserInterface.fromList(it)
      }
      return AuthTokenInterface(idToken, accessToken, refreshToken, tokenType, expiresIn, user)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      idToken,
      accessToken,
      refreshToken,
      tokenType,
      expiresIn,
      user?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LoginWithPasswordRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val email: String? = null,
  val phoneNumber: String? = null,
  val password: String,
  val scope: List<String?>? = null,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LoginWithPasswordRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val email = list[1] as String?
      val phoneNumber = list[2] as String?
      val password = list[3] as String
      val scope = list[4] as List<String?>?
      val errorCodes = ErrorCodesInterface.fromList(list[5] as List<Any?>)
      return LoginWithPasswordRequestInterface(reachFiveKey, email, phoneNumber, password, scope, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      email,
      phoneNumber,
      password,
      scope,
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LoginWithProviderRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val provider: String,
  val origin: String,
  val scope: List<String?>? = null,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LoginWithProviderRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val provider = list[1] as String
      val origin = list[2] as String
      val scope = list[3] as List<String?>?
      val errorCodes = ErrorCodesInterface.fromList(list[4] as List<Any?>)
      return LoginWithProviderRequestInterface(reachFiveKey, provider, origin, scope, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      provider,
      origin,
      scope,
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RefreshAccessTokenRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val authToken: AuthTokenInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RefreshAccessTokenRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val authToken = AuthTokenInterface.fromList(list[1] as List<Any?>)
      return RefreshAccessTokenRequestInterface(reachFiveKey, authToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      authToken.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LoginSummaryInterface (
  val firstLogin: Double? = null,
  val lastLogin: Double? = null,
  val total: Long? = null,
  val origins: List<String?>? = null,
  val devices: List<String?>? = null,
  val lastProvider: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LoginSummaryInterface {
      val firstLogin = list[0] as Double?
      val lastLogin = list[1] as Double?
      val total = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val origins = list[3] as List<String?>?
      val devices = list[4] as List<String?>?
      val lastProvider = list[5] as String?
      return LoginSummaryInterface(firstLogin, lastLogin, total, origins, devices, lastProvider)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      firstLogin,
      lastLogin,
      total,
      origins,
      devices,
      lastProvider,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class EmailsInterface (
  val verified: List<String?>? = null,
  val unverified: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): EmailsInterface {
      val verified = list[0] as List<String?>?
      val unverified = list[1] as List<String?>?
      return EmailsInterface(verified, unverified)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      verified,
      unverified,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ProfileInterface (
  val uid: String? = null,
  val givenName: String? = null,
  val middleName: String? = null,
  val familyName: String? = null,
  val name: String? = null,
  val nickname: String? = null,
  val birthdate: String? = null,
  val profileURL: String? = null,
  val picture: String? = null,
  val externalId: String? = null,
  val authTypes: List<String?>? = null,
  val loginSummary: LoginSummaryInterface? = null,
  val username: String? = null,
  val gender: String? = null,
  val email: String? = null,
  val emailVerified: Boolean? = null,
  val emails: EmailsInterface? = null,
  val phoneNumber: String? = null,
  val phoneNumberVerified: Boolean? = null,
  val addresses: List<ProfileAddressInterface?>? = null,
  val locale: String? = null,
  val bio: String? = null,
  val customFields: Map<String?, Any?>? = null,
  val consents: Map<String?, ConsentInterface?>? = null,
  val createdAt: String? = null,
  val updatedAt: String? = null,
  val liteOnly: Boolean? = null,
  val company: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ProfileInterface {
      val uid = list[0] as String?
      val givenName = list[1] as String?
      val middleName = list[2] as String?
      val familyName = list[3] as String?
      val name = list[4] as String?
      val nickname = list[5] as String?
      val birthdate = list[6] as String?
      val profileURL = list[7] as String?
      val picture = list[8] as String?
      val externalId = list[9] as String?
      val authTypes = list[10] as List<String?>?
      val loginSummary: LoginSummaryInterface? = (list[11] as List<Any?>?)?.let {
        LoginSummaryInterface.fromList(it)
      }
      val username = list[12] as String?
      val gender = list[13] as String?
      val email = list[14] as String?
      val emailVerified = list[15] as Boolean?
      val emails: EmailsInterface? = (list[16] as List<Any?>?)?.let {
        EmailsInterface.fromList(it)
      }
      val phoneNumber = list[17] as String?
      val phoneNumberVerified = list[18] as Boolean?
      val addresses = list[19] as List<ProfileAddressInterface?>?
      val locale = list[20] as String?
      val bio = list[21] as String?
      val customFields = list[22] as Map<String?, Any?>?
      val consents = list[23] as Map<String?, ConsentInterface?>?
      val createdAt = list[24] as String?
      val updatedAt = list[25] as String?
      val liteOnly = list[26] as Boolean?
      val company = list[27] as String?
      return ProfileInterface(uid, givenName, middleName, familyName, name, nickname, birthdate, profileURL, picture, externalId, authTypes, loginSummary, username, gender, email, emailVerified, emails, phoneNumber, phoneNumberVerified, addresses, locale, bio, customFields, consents, createdAt, updatedAt, liteOnly, company)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      uid,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      externalId,
      authTypes,
      loginSummary?.toList(),
      username,
      gender,
      email,
      emailVerified,
      emails?.toList(),
      phoneNumber,
      phoneNumberVerified,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      createdAt,
      updatedAt,
      liteOnly,
      company,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GetProfileRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val authToken: AuthTokenInterface,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GetProfileRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val authToken = AuthTokenInterface.fromList(list[1] as List<Any?>)
      val errorCodes = ErrorCodesInterface.fromList(list[2] as List<Any?>)
      return GetProfileRequestInterface(reachFiveKey, authToken, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      authToken.toList(),
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdateProfileRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val authToken: AuthTokenInterface,
  val profile: ProfileInterface,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UpdateProfileRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val authToken = AuthTokenInterface.fromList(list[1] as List<Any?>)
      val profile = ProfileInterface.fromList(list[2] as List<Any?>)
      val errorCodes = ErrorCodesInterface.fromList(list[3] as List<Any?>)
      return UpdateProfileRequestInterface(reachFiveKey, authToken, profile, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      authToken.toList(),
      profile.toList(),
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RequestPasswordResetRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val email: String? = null,
  val phoneNumber: String? = null,
  val redirectUrl: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): RequestPasswordResetRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val email = list[1] as String?
      val phoneNumber = list[2] as String?
      val redirectUrl = list[3] as String?
      return RequestPasswordResetRequestInterface(reachFiveKey, email, phoneNumber, redirectUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      email,
      phoneNumber,
      redirectUrl,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdatePasswordWithAccessTokenRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val authToken: AuthTokenInterface,
  val oldPassword: String,
  val password: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UpdatePasswordWithAccessTokenRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val authToken = AuthTokenInterface.fromList(list[1] as List<Any?>)
      val oldPassword = list[2] as String
      val password = list[3] as String
      return UpdatePasswordWithAccessTokenRequestInterface(reachFiveKey, authToken, oldPassword, password)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      authToken.toList(),
      oldPassword,
      password,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdatePasswordWithFreshAccessTokenRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val freshAuthToken: AuthTokenInterface,
  val password: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UpdatePasswordWithFreshAccessTokenRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val freshAuthToken = AuthTokenInterface.fromList(list[1] as List<Any?>)
      val password = list[2] as String
      return UpdatePasswordWithFreshAccessTokenRequestInterface(reachFiveKey, freshAuthToken, password)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      freshAuthToken.toList(),
      password,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdatePasswordWithEmailRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val email: String,
  val verificationCode: String,
  val password: String,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UpdatePasswordWithEmailRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val email = list[1] as String
      val verificationCode = list[2] as String
      val password = list[3] as String
      val errorCodes = ErrorCodesInterface.fromList(list[4] as List<Any?>)
      return UpdatePasswordWithEmailRequestInterface(reachFiveKey, email, verificationCode, password, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      email,
      verificationCode,
      password,
      errorCodes.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UpdatePasswordWithPhoneNumberRequestInterface (
  val reachFiveKey: ReachFiveKeyInterface,
  val phoneNumber: String,
  val verificationCode: String,
  val password: String,
  val errorCodes: ErrorCodesInterface

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UpdatePasswordWithPhoneNumberRequestInterface {
      val reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as List<Any?>)
      val phoneNumber = list[1] as String
      val verificationCode = list[2] as String
      val password = list[3] as String
      val errorCodes = ErrorCodesInterface.fromList(list[4] as List<Any?>)
      return UpdatePasswordWithPhoneNumberRequestInterface(reachFiveKey, phoneNumber, verificationCode, password, errorCodes)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reachFiveKey.toList(),
      phoneNumber,
      verificationCode,
      password,
      errorCodes.toList(),
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object ReachFiveHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AddressInterface.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AuthTokenInterface.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ConsentInterface.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          EmailsInterface.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ErrorCodesInterface.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GetProfileRequestInterface.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LoginSummaryInterface.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LoginWithPasswordRequestInterface.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LoginWithProviderRequestInterface.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OpenIdUserInterface.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProfileAddressInterface.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProfileInterface.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProfileSignupRequestInterface.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ProviderCreatorInterface.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ReachFiveConfigInterface.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ReachFiveKeyInterface.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RefreshAccessTokenRequestInterface.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RequestPasswordResetRequestInterface.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SdkConfigInterface.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SignupRequestInterface.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdatePasswordWithAccessTokenRequestInterface.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdatePasswordWithEmailRequestInterface.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdatePasswordWithFreshAccessTokenRequestInterface.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdatePasswordWithPhoneNumberRequestInterface.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UpdateProfileRequestInterface.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AddressInterface -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is AuthTokenInterface -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is ConsentInterface -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is EmailsInterface -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is ErrorCodesInterface -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is GetProfileRequestInterface -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is LoginSummaryInterface -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is LoginWithPasswordRequestInterface -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is LoginWithProviderRequestInterface -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is OpenIdUserInterface -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is ProfileAddressInterface -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is ProfileInterface -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is ProfileSignupRequestInterface -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is ProviderCreatorInterface -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is ReachFiveConfigInterface -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is ReachFiveKeyInterface -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is RefreshAccessTokenRequestInterface -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is RequestPasswordResetRequestInterface -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is SdkConfigInterface -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is SignupRequestInterface -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is UpdatePasswordWithAccessTokenRequestInterface -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is UpdatePasswordWithEmailRequestInterface -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is UpdatePasswordWithFreshAccessTokenRequestInterface -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is UpdatePasswordWithPhoneNumberRequestInterface -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is UpdateProfileRequestInterface -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ReachFiveHostApi {
  fun initialize(reachFiveKey: ReachFiveKeyInterface, callback: (Result<ReachFiveConfigInterface>) -> Unit)
  fun signup(request: SignupRequestInterface, callback: (Result<AuthTokenInterface>) -> Unit)
  fun loginWithPassword(request: LoginWithPasswordRequestInterface, callback: (Result<AuthTokenInterface>) -> Unit)
  fun loginWithProvider(request: LoginWithProviderRequestInterface, callback: (Result<AuthTokenInterface>) -> Unit)
  fun logout(reachFiveKey: ReachFiveKeyInterface, callback: (Result<Unit>) -> Unit)
  fun getProfile(request: GetProfileRequestInterface, callback: (Result<ProfileInterface>) -> Unit)
  fun updateProfile(request: UpdateProfileRequestInterface, callback: (Result<ProfileInterface>) -> Unit)
  fun refreshAccessToken(request: RefreshAccessTokenRequestInterface, callback: (Result<AuthTokenInterface>) -> Unit)
  fun requestPasswordReset(request: RequestPasswordResetRequestInterface, callback: (Result<Unit>) -> Unit)
  fun updatePasswordWithAccessToken(request: UpdatePasswordWithAccessTokenRequestInterface, callback: (Result<Unit>) -> Unit)
  fun updatePasswordWithFreshAccessToken(request: UpdatePasswordWithFreshAccessTokenRequestInterface, callback: (Result<Unit>) -> Unit)
  fun updatePasswordWithEmail(request: UpdatePasswordWithEmailRequestInterface, callback: (Result<Unit>) -> Unit)
  fun updatePasswordWithPhoneNumber(request: UpdatePasswordWithPhoneNumberRequestInterface, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by ReachFiveHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      ReachFiveHostApiCodec
    }
    /** Sets up an instance of `ReachFiveHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ReachFiveHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reachFiveKeyArg = args[0] as ReachFiveKeyInterface
            api.initialize(reachFiveKeyArg) { result: Result<ReachFiveConfigInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.signup", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as SignupRequestInterface
            api.signup(requestArg) { result: Result<AuthTokenInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.loginWithPassword", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as LoginWithPasswordRequestInterface
            api.loginWithPassword(requestArg) { result: Result<AuthTokenInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.loginWithProvider", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as LoginWithProviderRequestInterface
            api.loginWithProvider(requestArg) { result: Result<AuthTokenInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.logout", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val reachFiveKeyArg = args[0] as ReachFiveKeyInterface
            api.logout(reachFiveKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.getProfile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as GetProfileRequestInterface
            api.getProfile(requestArg) { result: Result<ProfileInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.updateProfile", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as UpdateProfileRequestInterface
            api.updateProfile(requestArg) { result: Result<ProfileInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as RefreshAccessTokenRequestInterface
            api.refreshAccessToken(requestArg) { result: Result<AuthTokenInterface> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.requestPasswordReset", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as RequestPasswordResetRequestInterface
            api.requestPasswordReset(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithAccessToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as UpdatePasswordWithAccessTokenRequestInterface
            api.updatePasswordWithAccessToken(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithFreshAccessToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as UpdatePasswordWithFreshAccessTokenRequestInterface
            api.updatePasswordWithFreshAccessToken(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithEmail", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as UpdatePasswordWithEmailRequestInterface
            api.updatePasswordWithEmail(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithPhoneNumber", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as UpdatePasswordWithPhoneNumberRequestInterface
            api.updatePasswordWithPhoneNumber(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
