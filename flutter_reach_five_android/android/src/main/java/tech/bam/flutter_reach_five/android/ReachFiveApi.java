// Autogenerated from Pigeon (v17.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package tech.bam.flutter_reach_five.android;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class ReachFiveApi {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  public enum ProviderCreatorTypeInterface {
    GOOGLE(0),
    FACEBOOK(1),
    WEBVIEW(2);

    final int index;

    private ProviderCreatorTypeInterface(final int index) {
      this.index = index;
    }
  }

  public enum ProfileAddressTypeInterface {
    BILLING(0),
    DELIVERY(1);

    final int index;

    private ProfileAddressTypeInterface(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ErrorCodesInterface {
    private @NonNull String emailAlreadyInUseCode;

    public @NonNull String getEmailAlreadyInUseCode() {
      return emailAlreadyInUseCode;
    }

    public void setEmailAlreadyInUseCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"emailAlreadyInUseCode\" is null.");
      }
      this.emailAlreadyInUseCode = setterArg;
    }

    private @NonNull String invalidEmailOrPasswordCode;

    public @NonNull String getInvalidEmailOrPasswordCode() {
      return invalidEmailOrPasswordCode;
    }

    public void setInvalidEmailOrPasswordCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"invalidEmailOrPasswordCode\" is null.");
      }
      this.invalidEmailOrPasswordCode = setterArg;
    }

    private @NonNull String invalidVerificationCode;

    public @NonNull String getInvalidVerificationCode() {
      return invalidVerificationCode;
    }

    public void setInvalidVerificationCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"invalidVerificationCode\" is null.");
      }
      this.invalidVerificationCode = setterArg;
    }

    private @NonNull String updateSamePassword;

    public @NonNull String getUpdateSamePassword() {
      return updateSamePassword;
    }

    public void setUpdateSamePassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"updateSamePassword\" is null.");
      }
      this.updateSamePassword = setterArg;
    }

    private @NonNull String invalidGrant;

    public @NonNull String getInvalidGrant() {
      return invalidGrant;
    }

    public void setInvalidGrant(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"invalidGrant\" is null.");
      }
      this.invalidGrant = setterArg;
    }

    private @NonNull String userCancelledOrClosedTheWebFlow;

    public @NonNull String getUserCancelledOrClosedTheWebFlow() {
      return userCancelledOrClosedTheWebFlow;
    }

    public void setUserCancelledOrClosedTheWebFlow(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userCancelledOrClosedTheWebFlow\" is null.");
      }
      this.userCancelledOrClosedTheWebFlow = setterArg;
    }

    private @NonNull String socialAccountEmailAlreadyInUse;

    public @NonNull String getSocialAccountEmailAlreadyInUse() {
      return socialAccountEmailAlreadyInUse;
    }

    public void setSocialAccountEmailAlreadyInUse(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"socialAccountEmailAlreadyInUse\" is null.");
      }
      this.socialAccountEmailAlreadyInUse = setterArg;
    }

    private @NonNull String unauthorizedRefreshToken;

    public @NonNull String getUnauthorizedRefreshToken() {
      return unauthorizedRefreshToken;
    }

    public void setUnauthorizedRefreshToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"unauthorizedRefreshToken\" is null.");
      }
      this.unauthorizedRefreshToken = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ErrorCodesInterface() {}

    public static final class Builder {

      private @Nullable String emailAlreadyInUseCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmailAlreadyInUseCode(@NonNull String setterArg) {
        this.emailAlreadyInUseCode = setterArg;
        return this;
      }

      private @Nullable String invalidEmailOrPasswordCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setInvalidEmailOrPasswordCode(@NonNull String setterArg) {
        this.invalidEmailOrPasswordCode = setterArg;
        return this;
      }

      private @Nullable String invalidVerificationCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setInvalidVerificationCode(@NonNull String setterArg) {
        this.invalidVerificationCode = setterArg;
        return this;
      }

      private @Nullable String updateSamePassword;

      @CanIgnoreReturnValue
      public @NonNull Builder setUpdateSamePassword(@NonNull String setterArg) {
        this.updateSamePassword = setterArg;
        return this;
      }

      private @Nullable String invalidGrant;

      @CanIgnoreReturnValue
      public @NonNull Builder setInvalidGrant(@NonNull String setterArg) {
        this.invalidGrant = setterArg;
        return this;
      }

      private @Nullable String userCancelledOrClosedTheWebFlow;

      @CanIgnoreReturnValue
      public @NonNull Builder setUserCancelledOrClosedTheWebFlow(@NonNull String setterArg) {
        this.userCancelledOrClosedTheWebFlow = setterArg;
        return this;
      }

      private @Nullable String socialAccountEmailAlreadyInUse;

      @CanIgnoreReturnValue
      public @NonNull Builder setSocialAccountEmailAlreadyInUse(@NonNull String setterArg) {
        this.socialAccountEmailAlreadyInUse = setterArg;
        return this;
      }

      private @Nullable String unauthorizedRefreshToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setUnauthorizedRefreshToken(@NonNull String setterArg) {
        this.unauthorizedRefreshToken = setterArg;
        return this;
      }

      public @NonNull ErrorCodesInterface build() {
        ErrorCodesInterface pigeonReturn = new ErrorCodesInterface();
        pigeonReturn.setEmailAlreadyInUseCode(emailAlreadyInUseCode);
        pigeonReturn.setInvalidEmailOrPasswordCode(invalidEmailOrPasswordCode);
        pigeonReturn.setInvalidVerificationCode(invalidVerificationCode);
        pigeonReturn.setUpdateSamePassword(updateSamePassword);
        pigeonReturn.setInvalidGrant(invalidGrant);
        pigeonReturn.setUserCancelledOrClosedTheWebFlow(userCancelledOrClosedTheWebFlow);
        pigeonReturn.setSocialAccountEmailAlreadyInUse(socialAccountEmailAlreadyInUse);
        pigeonReturn.setUnauthorizedRefreshToken(unauthorizedRefreshToken);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(emailAlreadyInUseCode);
      toListResult.add(invalidEmailOrPasswordCode);
      toListResult.add(invalidVerificationCode);
      toListResult.add(updateSamePassword);
      toListResult.add(invalidGrant);
      toListResult.add(userCancelledOrClosedTheWebFlow);
      toListResult.add(socialAccountEmailAlreadyInUse);
      toListResult.add(unauthorizedRefreshToken);
      return toListResult;
    }

    static @NonNull ErrorCodesInterface fromList(@NonNull ArrayList<Object> list) {
      ErrorCodesInterface pigeonResult = new ErrorCodesInterface();
      Object emailAlreadyInUseCode = list.get(0);
      pigeonResult.setEmailAlreadyInUseCode((String) emailAlreadyInUseCode);
      Object invalidEmailOrPasswordCode = list.get(1);
      pigeonResult.setInvalidEmailOrPasswordCode((String) invalidEmailOrPasswordCode);
      Object invalidVerificationCode = list.get(2);
      pigeonResult.setInvalidVerificationCode((String) invalidVerificationCode);
      Object updateSamePassword = list.get(3);
      pigeonResult.setUpdateSamePassword((String) updateSamePassword);
      Object invalidGrant = list.get(4);
      pigeonResult.setInvalidGrant((String) invalidGrant);
      Object userCancelledOrClosedTheWebFlow = list.get(5);
      pigeonResult.setUserCancelledOrClosedTheWebFlow((String) userCancelledOrClosedTheWebFlow);
      Object socialAccountEmailAlreadyInUse = list.get(6);
      pigeonResult.setSocialAccountEmailAlreadyInUse((String) socialAccountEmailAlreadyInUse);
      Object unauthorizedRefreshToken = list.get(7);
      pigeonResult.setUnauthorizedRefreshToken((String) unauthorizedRefreshToken);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SdkConfigInterface {
    private @NonNull String domain;

    public @NonNull String getDomain() {
      return domain;
    }

    public void setDomain(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"domain\" is null.");
      }
      this.domain = setterArg;
    }

    private @NonNull String clientId;

    public @NonNull String getClientId() {
      return clientId;
    }

    public void setClientId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clientId\" is null.");
      }
      this.clientId = setterArg;
    }

    private @NonNull String androidScheme;

    public @NonNull String getAndroidScheme() {
      return androidScheme;
    }

    public void setAndroidScheme(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"androidScheme\" is null.");
      }
      this.androidScheme = setterArg;
    }

    private @NonNull String iosScheme;

    public @NonNull String getIosScheme() {
      return iosScheme;
    }

    public void setIosScheme(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"iosScheme\" is null.");
      }
      this.iosScheme = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SdkConfigInterface() {}

    public static final class Builder {

      private @Nullable String domain;

      @CanIgnoreReturnValue
      public @NonNull Builder setDomain(@NonNull String setterArg) {
        this.domain = setterArg;
        return this;
      }

      private @Nullable String clientId;

      @CanIgnoreReturnValue
      public @NonNull Builder setClientId(@NonNull String setterArg) {
        this.clientId = setterArg;
        return this;
      }

      private @Nullable String androidScheme;

      @CanIgnoreReturnValue
      public @NonNull Builder setAndroidScheme(@NonNull String setterArg) {
        this.androidScheme = setterArg;
        return this;
      }

      private @Nullable String iosScheme;

      @CanIgnoreReturnValue
      public @NonNull Builder setIosScheme(@NonNull String setterArg) {
        this.iosScheme = setterArg;
        return this;
      }

      public @NonNull SdkConfigInterface build() {
        SdkConfigInterface pigeonReturn = new SdkConfigInterface();
        pigeonReturn.setDomain(domain);
        pigeonReturn.setClientId(clientId);
        pigeonReturn.setAndroidScheme(androidScheme);
        pigeonReturn.setIosScheme(iosScheme);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(domain);
      toListResult.add(clientId);
      toListResult.add(androidScheme);
      toListResult.add(iosScheme);
      return toListResult;
    }

    static @NonNull SdkConfigInterface fromList(@NonNull ArrayList<Object> list) {
      SdkConfigInterface pigeonResult = new SdkConfigInterface();
      Object domain = list.get(0);
      pigeonResult.setDomain((String) domain);
      Object clientId = list.get(1);
      pigeonResult.setClientId((String) clientId);
      Object androidScheme = list.get(2);
      pigeonResult.setAndroidScheme((String) androidScheme);
      Object iosScheme = list.get(3);
      pigeonResult.setIosScheme((String) iosScheme);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProviderCreatorInterface {
    private @NonNull ProviderCreatorTypeInterface type;

    public @NonNull ProviderCreatorTypeInterface getType() {
      return type;
    }

    public void setType(@NonNull ProviderCreatorTypeInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ProviderCreatorInterface() {}

    public static final class Builder {

      private @Nullable ProviderCreatorTypeInterface type;

      @CanIgnoreReturnValue
      public @NonNull Builder setType(@NonNull ProviderCreatorTypeInterface setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull ProviderCreatorInterface build() {
        ProviderCreatorInterface pigeonReturn = new ProviderCreatorInterface();
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(type == null ? null : type.index);
      return toListResult;
    }

    static @NonNull ProviderCreatorInterface fromList(@NonNull ArrayList<Object> list) {
      ProviderCreatorInterface pigeonResult = new ProviderCreatorInterface();
      Object type = list.get(0);
      pigeonResult.setType(ProviderCreatorTypeInterface.values()[(int) type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReachFiveKeyInterface {
    private @NonNull SdkConfigInterface sdkConfig;

    public @NonNull SdkConfigInterface getSdkConfig() {
      return sdkConfig;
    }

    public void setSdkConfig(@NonNull SdkConfigInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sdkConfig\" is null.");
      }
      this.sdkConfig = setterArg;
    }

    private @NonNull List<ProviderCreatorInterface> providerCreators;

    public @NonNull List<ProviderCreatorInterface> getProviderCreators() {
      return providerCreators;
    }

    public void setProviderCreators(@NonNull List<ProviderCreatorInterface> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"providerCreators\" is null.");
      }
      this.providerCreators = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ReachFiveKeyInterface() {}

    public static final class Builder {

      private @Nullable SdkConfigInterface sdkConfig;

      @CanIgnoreReturnValue
      public @NonNull Builder setSdkConfig(@NonNull SdkConfigInterface setterArg) {
        this.sdkConfig = setterArg;
        return this;
      }

      private @Nullable List<ProviderCreatorInterface> providerCreators;

      @CanIgnoreReturnValue
      public @NonNull Builder setProviderCreators(@NonNull List<ProviderCreatorInterface> setterArg) {
        this.providerCreators = setterArg;
        return this;
      }

      public @NonNull ReachFiveKeyInterface build() {
        ReachFiveKeyInterface pigeonReturn = new ReachFiveKeyInterface();
        pigeonReturn.setSdkConfig(sdkConfig);
        pigeonReturn.setProviderCreators(providerCreators);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((sdkConfig == null) ? null : sdkConfig.toList());
      toListResult.add(providerCreators);
      return toListResult;
    }

    static @NonNull ReachFiveKeyInterface fromList(@NonNull ArrayList<Object> list) {
      ReachFiveKeyInterface pigeonResult = new ReachFiveKeyInterface();
      Object sdkConfig = list.get(0);
      pigeonResult.setSdkConfig((sdkConfig == null) ? null : SdkConfigInterface.fromList((ArrayList<Object>) sdkConfig));
      Object providerCreators = list.get(1);
      pigeonResult.setProviderCreators((List<ProviderCreatorInterface>) providerCreators);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReachFiveConfigInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull List<String> providers;

    public @NonNull List<String> getProviders() {
      return providers;
    }

    public void setProviders(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"providers\" is null.");
      }
      this.providers = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ReachFiveConfigInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable List<String> providers;

      @CanIgnoreReturnValue
      public @NonNull Builder setProviders(@NonNull List<String> setterArg) {
        this.providers = setterArg;
        return this;
      }

      public @NonNull ReachFiveConfigInterface build() {
        ReachFiveConfigInterface pigeonReturn = new ReachFiveConfigInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setProviders(providers);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(providers);
      return toListResult;
    }

    static @NonNull ReachFiveConfigInterface fromList(@NonNull ArrayList<Object> list) {
      ReachFiveConfigInterface pigeonResult = new ReachFiveConfigInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object providers = list.get(1);
      pigeonResult.setProviders((List<String>) providers);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProfileAddressInterface {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Boolean isDefault;

    public @Nullable Boolean getIsDefault() {
      return isDefault;
    }

    public void setIsDefault(@Nullable Boolean setterArg) {
      this.isDefault = setterArg;
    }

    private @Nullable ProfileAddressTypeInterface addressType;

    public @Nullable ProfileAddressTypeInterface getAddressType() {
      return addressType;
    }

    public void setAddressType(@Nullable ProfileAddressTypeInterface setterArg) {
      this.addressType = setterArg;
    }

    private @Nullable String streetAddress;

    public @Nullable String getStreetAddress() {
      return streetAddress;
    }

    public void setStreetAddress(@Nullable String setterArg) {
      this.streetAddress = setterArg;
    }

    private @Nullable String locality;

    public @Nullable String getLocality() {
      return locality;
    }

    public void setLocality(@Nullable String setterArg) {
      this.locality = setterArg;
    }

    private @Nullable String region;

    public @Nullable String getRegion() {
      return region;
    }

    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable String postalCode;

    public @Nullable String getPostalCode() {
      return postalCode;
    }

    public void setPostalCode(@Nullable String setterArg) {
      this.postalCode = setterArg;
    }

    private @Nullable String country;

    public @Nullable String getCountry() {
      return country;
    }

    public void setCountry(@Nullable String setterArg) {
      this.country = setterArg;
    }

    private @Nullable String raw;

    public @Nullable String getRaw() {
      return raw;
    }

    public void setRaw(@Nullable String setterArg) {
      this.raw = setterArg;
    }

    private @Nullable String deliveryNote;

    public @Nullable String getDeliveryNote() {
      return deliveryNote;
    }

    public void setDeliveryNote(@Nullable String setterArg) {
      this.deliveryNote = setterArg;
    }

    private @Nullable String recipient;

    public @Nullable String getRecipient() {
      return recipient;
    }

    public void setRecipient(@Nullable String setterArg) {
      this.recipient = setterArg;
    }

    private @Nullable String company;

    public @Nullable String getCompany() {
      return company;
    }

    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    public static final class Builder {

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable Boolean isDefault;

      @CanIgnoreReturnValue
      public @NonNull Builder setIsDefault(@Nullable Boolean setterArg) {
        this.isDefault = setterArg;
        return this;
      }

      private @Nullable ProfileAddressTypeInterface addressType;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddressType(@Nullable ProfileAddressTypeInterface setterArg) {
        this.addressType = setterArg;
        return this;
      }

      private @Nullable String streetAddress;

      @CanIgnoreReturnValue
      public @NonNull Builder setStreetAddress(@Nullable String setterArg) {
        this.streetAddress = setterArg;
        return this;
      }

      private @Nullable String locality;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocality(@Nullable String setterArg) {
        this.locality = setterArg;
        return this;
      }

      private @Nullable String region;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }

      private @Nullable String postalCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setPostalCode(@Nullable String setterArg) {
        this.postalCode = setterArg;
        return this;
      }

      private @Nullable String country;

      @CanIgnoreReturnValue
      public @NonNull Builder setCountry(@Nullable String setterArg) {
        this.country = setterArg;
        return this;
      }

      private @Nullable String raw;

      @CanIgnoreReturnValue
      public @NonNull Builder setRaw(@Nullable String setterArg) {
        this.raw = setterArg;
        return this;
      }

      private @Nullable String deliveryNote;

      @CanIgnoreReturnValue
      public @NonNull Builder setDeliveryNote(@Nullable String setterArg) {
        this.deliveryNote = setterArg;
        return this;
      }

      private @Nullable String recipient;

      @CanIgnoreReturnValue
      public @NonNull Builder setRecipient(@Nullable String setterArg) {
        this.recipient = setterArg;
        return this;
      }

      private @Nullable String company;

      @CanIgnoreReturnValue
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      public @NonNull ProfileAddressInterface build() {
        ProfileAddressInterface pigeonReturn = new ProfileAddressInterface();
        pigeonReturn.setTitle(title);
        pigeonReturn.setIsDefault(isDefault);
        pigeonReturn.setAddressType(addressType);
        pigeonReturn.setStreetAddress(streetAddress);
        pigeonReturn.setLocality(locality);
        pigeonReturn.setRegion(region);
        pigeonReturn.setPostalCode(postalCode);
        pigeonReturn.setCountry(country);
        pigeonReturn.setRaw(raw);
        pigeonReturn.setDeliveryNote(deliveryNote);
        pigeonReturn.setRecipient(recipient);
        pigeonReturn.setCompany(company);
        pigeonReturn.setPhoneNumber(phoneNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(title);
      toListResult.add(isDefault);
      toListResult.add(addressType == null ? null : addressType.index);
      toListResult.add(streetAddress);
      toListResult.add(locality);
      toListResult.add(region);
      toListResult.add(postalCode);
      toListResult.add(country);
      toListResult.add(raw);
      toListResult.add(deliveryNote);
      toListResult.add(recipient);
      toListResult.add(company);
      toListResult.add(phoneNumber);
      return toListResult;
    }

    static @NonNull ProfileAddressInterface fromList(@NonNull ArrayList<Object> list) {
      ProfileAddressInterface pigeonResult = new ProfileAddressInterface();
      Object title = list.get(0);
      pigeonResult.setTitle((String) title);
      Object isDefault = list.get(1);
      pigeonResult.setIsDefault((Boolean) isDefault);
      Object addressType = list.get(2);
      pigeonResult.setAddressType(addressType == null ? null : ProfileAddressTypeInterface.values()[(int) addressType]);
      Object streetAddress = list.get(3);
      pigeonResult.setStreetAddress((String) streetAddress);
      Object locality = list.get(4);
      pigeonResult.setLocality((String) locality);
      Object region = list.get(5);
      pigeonResult.setRegion((String) region);
      Object postalCode = list.get(6);
      pigeonResult.setPostalCode((String) postalCode);
      Object country = list.get(7);
      pigeonResult.setCountry((String) country);
      Object raw = list.get(8);
      pigeonResult.setRaw((String) raw);
      Object deliveryNote = list.get(9);
      pigeonResult.setDeliveryNote((String) deliveryNote);
      Object recipient = list.get(10);
      pigeonResult.setRecipient((String) recipient);
      Object company = list.get(11);
      pigeonResult.setCompany((String) company);
      Object phoneNumber = list.get(12);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ConsentInterface {
    private @NonNull Boolean granted;

    public @NonNull Boolean getGranted() {
      return granted;
    }

    public void setGranted(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"granted\" is null.");
      }
      this.granted = setterArg;
    }

    private @Nullable String consentType;

    public @Nullable String getConsentType() {
      return consentType;
    }

    public void setConsentType(@Nullable String setterArg) {
      this.consentType = setterArg;
    }

    private @NonNull String date;

    public @NonNull String getDate() {
      return date;
    }

    public void setDate(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"date\" is null.");
      }
      this.date = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ConsentInterface() {}

    public static final class Builder {

      private @Nullable Boolean granted;

      @CanIgnoreReturnValue
      public @NonNull Builder setGranted(@NonNull Boolean setterArg) {
        this.granted = setterArg;
        return this;
      }

      private @Nullable String consentType;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsentType(@Nullable String setterArg) {
        this.consentType = setterArg;
        return this;
      }

      private @Nullable String date;

      @CanIgnoreReturnValue
      public @NonNull Builder setDate(@NonNull String setterArg) {
        this.date = setterArg;
        return this;
      }

      public @NonNull ConsentInterface build() {
        ConsentInterface pigeonReturn = new ConsentInterface();
        pigeonReturn.setGranted(granted);
        pigeonReturn.setConsentType(consentType);
        pigeonReturn.setDate(date);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(granted);
      toListResult.add(consentType);
      toListResult.add(date);
      return toListResult;
    }

    static @NonNull ConsentInterface fromList(@NonNull ArrayList<Object> list) {
      ConsentInterface pigeonResult = new ConsentInterface();
      Object granted = list.get(0);
      pigeonResult.setGranted((Boolean) granted);
      Object consentType = list.get(1);
      pigeonResult.setConsentType((String) consentType);
      Object date = list.get(2);
      pigeonResult.setDate((String) date);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProfileSignupRequestInterface {
    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable String givenName;

    public @Nullable String getGivenName() {
      return givenName;
    }

    public void setGivenName(@Nullable String setterArg) {
      this.givenName = setterArg;
    }

    private @Nullable String middleName;

    public @Nullable String getMiddleName() {
      return middleName;
    }

    public void setMiddleName(@Nullable String setterArg) {
      this.middleName = setterArg;
    }

    private @Nullable String familyName;

    public @Nullable String getFamilyName() {
      return familyName;
    }

    public void setFamilyName(@Nullable String setterArg) {
      this.familyName = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String nickname;

    public @Nullable String getNickname() {
      return nickname;
    }

    public void setNickname(@Nullable String setterArg) {
      this.nickname = setterArg;
    }

    private @Nullable String birthdate;

    public @Nullable String getBirthdate() {
      return birthdate;
    }

    public void setBirthdate(@Nullable String setterArg) {
      this.birthdate = setterArg;
    }

    private @Nullable String profileURL;

    public @Nullable String getProfileURL() {
      return profileURL;
    }

    public void setProfileURL(@Nullable String setterArg) {
      this.profileURL = setterArg;
    }

    private @Nullable String picture;

    public @Nullable String getPicture() {
      return picture;
    }

    public void setPicture(@Nullable String setterArg) {
      this.picture = setterArg;
    }

    private @Nullable String username;

    public @Nullable String getUsername() {
      return username;
    }

    public void setUsername(@Nullable String setterArg) {
      this.username = setterArg;
    }

    private @Nullable String gender;

    public @Nullable String getGender() {
      return gender;
    }

    public void setGender(@Nullable String setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String company;

    public @Nullable String getCompany() {
      return company;
    }

    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable List<ProfileAddressInterface> addresses;

    public @Nullable List<ProfileAddressInterface> getAddresses() {
      return addresses;
    }

    public void setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
      this.addresses = setterArg;
    }

    private @Nullable String locale;

    public @Nullable String getLocale() {
      return locale;
    }

    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    private @Nullable String bio;

    public @Nullable String getBio() {
      return bio;
    }

    public void setBio(@Nullable String setterArg) {
      this.bio = setterArg;
    }

    private @Nullable Map<String, Object> customFields;

    public @Nullable Map<String, Object> getCustomFields() {
      return customFields;
    }

    public void setCustomFields(@Nullable Map<String, Object> setterArg) {
      this.customFields = setterArg;
    }

    private @Nullable Map<String, ConsentInterface> consents;

    public @Nullable Map<String, ConsentInterface> getConsents() {
      return consents;
    }

    public void setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
      this.consents = setterArg;
    }

    private @Nullable Boolean liteOnly;

    public @Nullable Boolean getLiteOnly() {
      return liteOnly;
    }

    public void setLiteOnly(@Nullable Boolean setterArg) {
      this.liteOnly = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ProfileSignupRequestInterface() {}

    public static final class Builder {

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable String givenName;

      @CanIgnoreReturnValue
      public @NonNull Builder setGivenName(@Nullable String setterArg) {
        this.givenName = setterArg;
        return this;
      }

      private @Nullable String middleName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMiddleName(@Nullable String setterArg) {
        this.middleName = setterArg;
        return this;
      }

      private @Nullable String familyName;

      @CanIgnoreReturnValue
      public @NonNull Builder setFamilyName(@Nullable String setterArg) {
        this.familyName = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String nickname;

      @CanIgnoreReturnValue
      public @NonNull Builder setNickname(@Nullable String setterArg) {
        this.nickname = setterArg;
        return this;
      }

      private @Nullable String birthdate;

      @CanIgnoreReturnValue
      public @NonNull Builder setBirthdate(@Nullable String setterArg) {
        this.birthdate = setterArg;
        return this;
      }

      private @Nullable String profileURL;

      @CanIgnoreReturnValue
      public @NonNull Builder setProfileURL(@Nullable String setterArg) {
        this.profileURL = setterArg;
        return this;
      }

      private @Nullable String picture;

      @CanIgnoreReturnValue
      public @NonNull Builder setPicture(@Nullable String setterArg) {
        this.picture = setterArg;
        return this;
      }

      private @Nullable String username;

      @CanIgnoreReturnValue
      public @NonNull Builder setUsername(@Nullable String setterArg) {
        this.username = setterArg;
        return this;
      }

      private @Nullable String gender;

      @CanIgnoreReturnValue
      public @NonNull Builder setGender(@Nullable String setterArg) {
        this.gender = setterArg;
        return this;
      }

      private @Nullable String company;

      @CanIgnoreReturnValue
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }

      private @Nullable List<ProfileAddressInterface> addresses;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
        this.addresses = setterArg;
        return this;
      }

      private @Nullable String locale;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }

      private @Nullable String bio;

      @CanIgnoreReturnValue
      public @NonNull Builder setBio(@Nullable String setterArg) {
        this.bio = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> customFields;

      @CanIgnoreReturnValue
      public @NonNull Builder setCustomFields(@Nullable Map<String, Object> setterArg) {
        this.customFields = setterArg;
        return this;
      }

      private @Nullable Map<String, ConsentInterface> consents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
        this.consents = setterArg;
        return this;
      }

      private @Nullable Boolean liteOnly;

      @CanIgnoreReturnValue
      public @NonNull Builder setLiteOnly(@Nullable Boolean setterArg) {
        this.liteOnly = setterArg;
        return this;
      }

      public @NonNull ProfileSignupRequestInterface build() {
        ProfileSignupRequestInterface pigeonReturn = new ProfileSignupRequestInterface();
        pigeonReturn.setPassword(password);
        pigeonReturn.setEmail(email);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setGivenName(givenName);
        pigeonReturn.setMiddleName(middleName);
        pigeonReturn.setFamilyName(familyName);
        pigeonReturn.setName(name);
        pigeonReturn.setNickname(nickname);
        pigeonReturn.setBirthdate(birthdate);
        pigeonReturn.setProfileURL(profileURL);
        pigeonReturn.setPicture(picture);
        pigeonReturn.setUsername(username);
        pigeonReturn.setGender(gender);
        pigeonReturn.setCompany(company);
        pigeonReturn.setAddresses(addresses);
        pigeonReturn.setLocale(locale);
        pigeonReturn.setBio(bio);
        pigeonReturn.setCustomFields(customFields);
        pigeonReturn.setConsents(consents);
        pigeonReturn.setLiteOnly(liteOnly);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(20);
      toListResult.add(password);
      toListResult.add(email);
      toListResult.add(phoneNumber);
      toListResult.add(givenName);
      toListResult.add(middleName);
      toListResult.add(familyName);
      toListResult.add(name);
      toListResult.add(nickname);
      toListResult.add(birthdate);
      toListResult.add(profileURL);
      toListResult.add(picture);
      toListResult.add(username);
      toListResult.add(gender);
      toListResult.add(company);
      toListResult.add(addresses);
      toListResult.add(locale);
      toListResult.add(bio);
      toListResult.add(customFields);
      toListResult.add(consents);
      toListResult.add(liteOnly);
      return toListResult;
    }

    static @NonNull ProfileSignupRequestInterface fromList(@NonNull ArrayList<Object> list) {
      ProfileSignupRequestInterface pigeonResult = new ProfileSignupRequestInterface();
      Object password = list.get(0);
      pigeonResult.setPassword((String) password);
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      Object phoneNumber = list.get(2);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object givenName = list.get(3);
      pigeonResult.setGivenName((String) givenName);
      Object middleName = list.get(4);
      pigeonResult.setMiddleName((String) middleName);
      Object familyName = list.get(5);
      pigeonResult.setFamilyName((String) familyName);
      Object name = list.get(6);
      pigeonResult.setName((String) name);
      Object nickname = list.get(7);
      pigeonResult.setNickname((String) nickname);
      Object birthdate = list.get(8);
      pigeonResult.setBirthdate((String) birthdate);
      Object profileURL = list.get(9);
      pigeonResult.setProfileURL((String) profileURL);
      Object picture = list.get(10);
      pigeonResult.setPicture((String) picture);
      Object username = list.get(11);
      pigeonResult.setUsername((String) username);
      Object gender = list.get(12);
      pigeonResult.setGender((String) gender);
      Object company = list.get(13);
      pigeonResult.setCompany((String) company);
      Object addresses = list.get(14);
      pigeonResult.setAddresses((List<ProfileAddressInterface>) addresses);
      Object locale = list.get(15);
      pigeonResult.setLocale((String) locale);
      Object bio = list.get(16);
      pigeonResult.setBio((String) bio);
      Object customFields = list.get(17);
      pigeonResult.setCustomFields((Map<String, Object>) customFields);
      Object consents = list.get(18);
      pigeonResult.setConsents((Map<String, ConsentInterface>) consents);
      Object liteOnly = list.get(19);
      pigeonResult.setLiteOnly((Boolean) liteOnly);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class SignupRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull ProfileSignupRequestInterface profile;

    public @NonNull ProfileSignupRequestInterface getProfile() {
      return profile;
    }

    public void setProfile(@NonNull ProfileSignupRequestInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"profile\" is null.");
      }
      this.profile = setterArg;
    }

    private @Nullable String redirectUrl;

    public @Nullable String getRedirectUrl() {
      return redirectUrl;
    }

    public void setRedirectUrl(@Nullable String setterArg) {
      this.redirectUrl = setterArg;
    }

    private @Nullable List<String> scope;

    public @Nullable List<String> getScope() {
      return scope;
    }

    public void setScope(@Nullable List<String> setterArg) {
      this.scope = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    SignupRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable ProfileSignupRequestInterface profile;

      @CanIgnoreReturnValue
      public @NonNull Builder setProfile(@NonNull ProfileSignupRequestInterface setterArg) {
        this.profile = setterArg;
        return this;
      }

      private @Nullable String redirectUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setRedirectUrl(@Nullable String setterArg) {
        this.redirectUrl = setterArg;
        return this;
      }

      private @Nullable List<String> scope;

      @CanIgnoreReturnValue
      public @NonNull Builder setScope(@Nullable List<String> setterArg) {
        this.scope = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull SignupRequestInterface build() {
        SignupRequestInterface pigeonReturn = new SignupRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setProfile(profile);
        pigeonReturn.setRedirectUrl(redirectUrl);
        pigeonReturn.setScope(scope);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((profile == null) ? null : profile.toList());
      toListResult.add(redirectUrl);
      toListResult.add(scope);
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull SignupRequestInterface fromList(@NonNull ArrayList<Object> list) {
      SignupRequestInterface pigeonResult = new SignupRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object profile = list.get(1);
      pigeonResult.setProfile((profile == null) ? null : ProfileSignupRequestInterface.fromList((ArrayList<Object>) profile));
      Object redirectUrl = list.get(2);
      pigeonResult.setRedirectUrl((String) redirectUrl);
      Object scope = list.get(3);
      pigeonResult.setScope((List<String>) scope);
      Object errorCodes = list.get(4);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AddressInterface {
    private @Nullable String formatted;

    public @Nullable String getFormatted() {
      return formatted;
    }

    public void setFormatted(@Nullable String setterArg) {
      this.formatted = setterArg;
    }

    private @Nullable String streetAddress;

    public @Nullable String getStreetAddress() {
      return streetAddress;
    }

    public void setStreetAddress(@Nullable String setterArg) {
      this.streetAddress = setterArg;
    }

    private @Nullable String locality;

    public @Nullable String getLocality() {
      return locality;
    }

    public void setLocality(@Nullable String setterArg) {
      this.locality = setterArg;
    }

    private @Nullable String region;

    public @Nullable String getRegion() {
      return region;
    }

    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable String postalCode;

    public @Nullable String getPostalCode() {
      return postalCode;
    }

    public void setPostalCode(@Nullable String setterArg) {
      this.postalCode = setterArg;
    }

    private @Nullable String country;

    public @Nullable String getCountry() {
      return country;
    }

    public void setCountry(@Nullable String setterArg) {
      this.country = setterArg;
    }

    public static final class Builder {

      private @Nullable String formatted;

      @CanIgnoreReturnValue
      public @NonNull Builder setFormatted(@Nullable String setterArg) {
        this.formatted = setterArg;
        return this;
      }

      private @Nullable String streetAddress;

      @CanIgnoreReturnValue
      public @NonNull Builder setStreetAddress(@Nullable String setterArg) {
        this.streetAddress = setterArg;
        return this;
      }

      private @Nullable String locality;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocality(@Nullable String setterArg) {
        this.locality = setterArg;
        return this;
      }

      private @Nullable String region;

      @CanIgnoreReturnValue
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }

      private @Nullable String postalCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setPostalCode(@Nullable String setterArg) {
        this.postalCode = setterArg;
        return this;
      }

      private @Nullable String country;

      @CanIgnoreReturnValue
      public @NonNull Builder setCountry(@Nullable String setterArg) {
        this.country = setterArg;
        return this;
      }

      public @NonNull AddressInterface build() {
        AddressInterface pigeonReturn = new AddressInterface();
        pigeonReturn.setFormatted(formatted);
        pigeonReturn.setStreetAddress(streetAddress);
        pigeonReturn.setLocality(locality);
        pigeonReturn.setRegion(region);
        pigeonReturn.setPostalCode(postalCode);
        pigeonReturn.setCountry(country);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(formatted);
      toListResult.add(streetAddress);
      toListResult.add(locality);
      toListResult.add(region);
      toListResult.add(postalCode);
      toListResult.add(country);
      return toListResult;
    }

    static @NonNull AddressInterface fromList(@NonNull ArrayList<Object> list) {
      AddressInterface pigeonResult = new AddressInterface();
      Object formatted = list.get(0);
      pigeonResult.setFormatted((String) formatted);
      Object streetAddress = list.get(1);
      pigeonResult.setStreetAddress((String) streetAddress);
      Object locality = list.get(2);
      pigeonResult.setLocality((String) locality);
      Object region = list.get(3);
      pigeonResult.setRegion((String) region);
      Object postalCode = list.get(4);
      pigeonResult.setPostalCode((String) postalCode);
      Object country = list.get(5);
      pigeonResult.setCountry((String) country);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class OpenIdUserInterface {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String preferredUsername;

    public @Nullable String getPreferredUsername() {
      return preferredUsername;
    }

    public void setPreferredUsername(@Nullable String setterArg) {
      this.preferredUsername = setterArg;
    }

    private @Nullable String givenName;

    public @Nullable String getGivenName() {
      return givenName;
    }

    public void setGivenName(@Nullable String setterArg) {
      this.givenName = setterArg;
    }

    private @Nullable String familyName;

    public @Nullable String getFamilyName() {
      return familyName;
    }

    public void setFamilyName(@Nullable String setterArg) {
      this.familyName = setterArg;
    }

    private @Nullable String middleName;

    public @Nullable String getMiddleName() {
      return middleName;
    }

    public void setMiddleName(@Nullable String setterArg) {
      this.middleName = setterArg;
    }

    private @Nullable String nickname;

    public @Nullable String getNickname() {
      return nickname;
    }

    public void setNickname(@Nullable String setterArg) {
      this.nickname = setterArg;
    }

    private @Nullable String picture;

    public @Nullable String getPicture() {
      return picture;
    }

    public void setPicture(@Nullable String setterArg) {
      this.picture = setterArg;
    }

    private @Nullable String website;

    public @Nullable String getWebsite() {
      return website;
    }

    public void setWebsite(@Nullable String setterArg) {
      this.website = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable Boolean emailVerified;

    public @Nullable Boolean getEmailVerified() {
      return emailVerified;
    }

    public void setEmailVerified(@Nullable Boolean setterArg) {
      this.emailVerified = setterArg;
    }

    private @Nullable String gender;

    public @Nullable String getGender() {
      return gender;
    }

    public void setGender(@Nullable String setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String zoneinfo;

    public @Nullable String getZoneinfo() {
      return zoneinfo;
    }

    public void setZoneinfo(@Nullable String setterArg) {
      this.zoneinfo = setterArg;
    }

    private @Nullable String locale;

    public @Nullable String getLocale() {
      return locale;
    }

    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable Boolean phoneNumberVerified;

    public @Nullable Boolean getPhoneNumberVerified() {
      return phoneNumberVerified;
    }

    public void setPhoneNumberVerified(@Nullable Boolean setterArg) {
      this.phoneNumberVerified = setterArg;
    }

    private @Nullable AddressInterface address;

    public @Nullable AddressInterface getAddress() {
      return address;
    }

    public void setAddress(@Nullable AddressInterface setterArg) {
      this.address = setterArg;
    }

    private @Nullable String birthdate;

    public @Nullable String getBirthdate() {
      return birthdate;
    }

    public void setBirthdate(@Nullable String setterArg) {
      this.birthdate = setterArg;
    }

    private @Nullable String externalId;

    public @Nullable String getExternalId() {
      return externalId;
    }

    public void setExternalId(@Nullable String setterArg) {
      this.externalId = setterArg;
    }

    public static final class Builder {

      private @Nullable String id;

      @CanIgnoreReturnValue
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String preferredUsername;

      @CanIgnoreReturnValue
      public @NonNull Builder setPreferredUsername(@Nullable String setterArg) {
        this.preferredUsername = setterArg;
        return this;
      }

      private @Nullable String givenName;

      @CanIgnoreReturnValue
      public @NonNull Builder setGivenName(@Nullable String setterArg) {
        this.givenName = setterArg;
        return this;
      }

      private @Nullable String familyName;

      @CanIgnoreReturnValue
      public @NonNull Builder setFamilyName(@Nullable String setterArg) {
        this.familyName = setterArg;
        return this;
      }

      private @Nullable String middleName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMiddleName(@Nullable String setterArg) {
        this.middleName = setterArg;
        return this;
      }

      private @Nullable String nickname;

      @CanIgnoreReturnValue
      public @NonNull Builder setNickname(@Nullable String setterArg) {
        this.nickname = setterArg;
        return this;
      }

      private @Nullable String picture;

      @CanIgnoreReturnValue
      public @NonNull Builder setPicture(@Nullable String setterArg) {
        this.picture = setterArg;
        return this;
      }

      private @Nullable String website;

      @CanIgnoreReturnValue
      public @NonNull Builder setWebsite(@Nullable String setterArg) {
        this.website = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable Boolean emailVerified;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmailVerified(@Nullable Boolean setterArg) {
        this.emailVerified = setterArg;
        return this;
      }

      private @Nullable String gender;

      @CanIgnoreReturnValue
      public @NonNull Builder setGender(@Nullable String setterArg) {
        this.gender = setterArg;
        return this;
      }

      private @Nullable String zoneinfo;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoneinfo(@Nullable String setterArg) {
        this.zoneinfo = setterArg;
        return this;
      }

      private @Nullable String locale;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable Boolean phoneNumberVerified;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumberVerified(@Nullable Boolean setterArg) {
        this.phoneNumberVerified = setterArg;
        return this;
      }

      private @Nullable AddressInterface address;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddress(@Nullable AddressInterface setterArg) {
        this.address = setterArg;
        return this;
      }

      private @Nullable String birthdate;

      @CanIgnoreReturnValue
      public @NonNull Builder setBirthdate(@Nullable String setterArg) {
        this.birthdate = setterArg;
        return this;
      }

      private @Nullable String externalId;

      @CanIgnoreReturnValue
      public @NonNull Builder setExternalId(@Nullable String setterArg) {
        this.externalId = setterArg;
        return this;
      }

      public @NonNull OpenIdUserInterface build() {
        OpenIdUserInterface pigeonReturn = new OpenIdUserInterface();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setPreferredUsername(preferredUsername);
        pigeonReturn.setGivenName(givenName);
        pigeonReturn.setFamilyName(familyName);
        pigeonReturn.setMiddleName(middleName);
        pigeonReturn.setNickname(nickname);
        pigeonReturn.setPicture(picture);
        pigeonReturn.setWebsite(website);
        pigeonReturn.setEmail(email);
        pigeonReturn.setEmailVerified(emailVerified);
        pigeonReturn.setGender(gender);
        pigeonReturn.setZoneinfo(zoneinfo);
        pigeonReturn.setLocale(locale);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setPhoneNumberVerified(phoneNumberVerified);
        pigeonReturn.setAddress(address);
        pigeonReturn.setBirthdate(birthdate);
        pigeonReturn.setExternalId(externalId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(19);
      toListResult.add(id);
      toListResult.add(name);
      toListResult.add(preferredUsername);
      toListResult.add(givenName);
      toListResult.add(familyName);
      toListResult.add(middleName);
      toListResult.add(nickname);
      toListResult.add(picture);
      toListResult.add(website);
      toListResult.add(email);
      toListResult.add(emailVerified);
      toListResult.add(gender);
      toListResult.add(zoneinfo);
      toListResult.add(locale);
      toListResult.add(phoneNumber);
      toListResult.add(phoneNumberVerified);
      toListResult.add((address == null) ? null : address.toList());
      toListResult.add(birthdate);
      toListResult.add(externalId);
      return toListResult;
    }

    static @NonNull OpenIdUserInterface fromList(@NonNull ArrayList<Object> list) {
      OpenIdUserInterface pigeonResult = new OpenIdUserInterface();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object preferredUsername = list.get(2);
      pigeonResult.setPreferredUsername((String) preferredUsername);
      Object givenName = list.get(3);
      pigeonResult.setGivenName((String) givenName);
      Object familyName = list.get(4);
      pigeonResult.setFamilyName((String) familyName);
      Object middleName = list.get(5);
      pigeonResult.setMiddleName((String) middleName);
      Object nickname = list.get(6);
      pigeonResult.setNickname((String) nickname);
      Object picture = list.get(7);
      pigeonResult.setPicture((String) picture);
      Object website = list.get(8);
      pigeonResult.setWebsite((String) website);
      Object email = list.get(9);
      pigeonResult.setEmail((String) email);
      Object emailVerified = list.get(10);
      pigeonResult.setEmailVerified((Boolean) emailVerified);
      Object gender = list.get(11);
      pigeonResult.setGender((String) gender);
      Object zoneinfo = list.get(12);
      pigeonResult.setZoneinfo((String) zoneinfo);
      Object locale = list.get(13);
      pigeonResult.setLocale((String) locale);
      Object phoneNumber = list.get(14);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object phoneNumberVerified = list.get(15);
      pigeonResult.setPhoneNumberVerified((Boolean) phoneNumberVerified);
      Object address = list.get(16);
      pigeonResult.setAddress((address == null) ? null : AddressInterface.fromList((ArrayList<Object>) address));
      Object birthdate = list.get(17);
      pigeonResult.setBirthdate((String) birthdate);
      Object externalId = list.get(18);
      pigeonResult.setExternalId((String) externalId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AuthTokenInterface {
    private @Nullable String idToken;

    public @Nullable String getIdToken() {
      return idToken;
    }

    public void setIdToken(@Nullable String setterArg) {
      this.idToken = setterArg;
    }

    private @NonNull String accessToken;

    public @NonNull String getAccessToken() {
      return accessToken;
    }

    public void setAccessToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessToken\" is null.");
      }
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;

    public @Nullable String getRefreshToken() {
      return refreshToken;
    }

    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable String tokenType;

    public @Nullable String getTokenType() {
      return tokenType;
    }

    public void setTokenType(@Nullable String setterArg) {
      this.tokenType = setterArg;
    }

    private @Nullable Long expiresIn;

    public @Nullable Long getExpiresIn() {
      return expiresIn;
    }

    public void setExpiresIn(@Nullable Long setterArg) {
      this.expiresIn = setterArg;
    }

    private @Nullable OpenIdUserInterface user;

    public @Nullable OpenIdUserInterface getUser() {
      return user;
    }

    public void setUser(@Nullable OpenIdUserInterface setterArg) {
      this.user = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AuthTokenInterface() {}

    public static final class Builder {

      private @Nullable String idToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setIdToken(@Nullable String setterArg) {
        this.idToken = setterArg;
        return this;
      }

      private @Nullable String accessToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAccessToken(@NonNull String setterArg) {
        this.accessToken = setterArg;
        return this;
      }

      private @Nullable String refreshToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }

      private @Nullable String tokenType;

      @CanIgnoreReturnValue
      public @NonNull Builder setTokenType(@Nullable String setterArg) {
        this.tokenType = setterArg;
        return this;
      }

      private @Nullable Long expiresIn;

      @CanIgnoreReturnValue
      public @NonNull Builder setExpiresIn(@Nullable Long setterArg) {
        this.expiresIn = setterArg;
        return this;
      }

      private @Nullable OpenIdUserInterface user;

      @CanIgnoreReturnValue
      public @NonNull Builder setUser(@Nullable OpenIdUserInterface setterArg) {
        this.user = setterArg;
        return this;
      }

      public @NonNull AuthTokenInterface build() {
        AuthTokenInterface pigeonReturn = new AuthTokenInterface();
        pigeonReturn.setIdToken(idToken);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setTokenType(tokenType);
        pigeonReturn.setExpiresIn(expiresIn);
        pigeonReturn.setUser(user);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(idToken);
      toListResult.add(accessToken);
      toListResult.add(refreshToken);
      toListResult.add(tokenType);
      toListResult.add(expiresIn);
      toListResult.add((user == null) ? null : user.toList());
      return toListResult;
    }

    static @NonNull AuthTokenInterface fromList(@NonNull ArrayList<Object> list) {
      AuthTokenInterface pigeonResult = new AuthTokenInterface();
      Object idToken = list.get(0);
      pigeonResult.setIdToken((String) idToken);
      Object accessToken = list.get(1);
      pigeonResult.setAccessToken((String) accessToken);
      Object refreshToken = list.get(2);
      pigeonResult.setRefreshToken((String) refreshToken);
      Object tokenType = list.get(3);
      pigeonResult.setTokenType((String) tokenType);
      Object expiresIn = list.get(4);
      pigeonResult.setExpiresIn((expiresIn == null) ? null : ((expiresIn instanceof Integer) ? (Integer) expiresIn : (Long) expiresIn));
      Object user = list.get(5);
      pigeonResult.setUser((user == null) ? null : OpenIdUserInterface.fromList((ArrayList<Object>) user));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LoginWithPasswordRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    private @Nullable List<String> scope;

    public @Nullable List<String> getScope() {
      return scope;
    }

    public void setScope(@Nullable List<String> setterArg) {
      this.scope = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    LoginWithPasswordRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable List<String> scope;

      @CanIgnoreReturnValue
      public @NonNull Builder setScope(@Nullable List<String> setterArg) {
        this.scope = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull LoginWithPasswordRequestInterface build() {
        LoginWithPasswordRequestInterface pigeonReturn = new LoginWithPasswordRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setEmail(email);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setPassword(password);
        pigeonReturn.setScope(scope);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(email);
      toListResult.add(phoneNumber);
      toListResult.add(password);
      toListResult.add(scope);
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull LoginWithPasswordRequestInterface fromList(@NonNull ArrayList<Object> list) {
      LoginWithPasswordRequestInterface pigeonResult = new LoginWithPasswordRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      Object phoneNumber = list.get(2);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object password = list.get(3);
      pigeonResult.setPassword((String) password);
      Object scope = list.get(4);
      pigeonResult.setScope((List<String>) scope);
      Object errorCodes = list.get(5);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LoginWithProviderRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull String provider;

    public @NonNull String getProvider() {
      return provider;
    }

    public void setProvider(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"provider\" is null.");
      }
      this.provider = setterArg;
    }

    private @NonNull String origin;

    public @NonNull String getOrigin() {
      return origin;
    }

    public void setOrigin(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"origin\" is null.");
      }
      this.origin = setterArg;
    }

    private @Nullable List<String> scope;

    public @Nullable List<String> getScope() {
      return scope;
    }

    public void setScope(@Nullable List<String> setterArg) {
      this.scope = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    LoginWithProviderRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable String provider;

      @CanIgnoreReturnValue
      public @NonNull Builder setProvider(@NonNull String setterArg) {
        this.provider = setterArg;
        return this;
      }

      private @Nullable String origin;

      @CanIgnoreReturnValue
      public @NonNull Builder setOrigin(@NonNull String setterArg) {
        this.origin = setterArg;
        return this;
      }

      private @Nullable List<String> scope;

      @CanIgnoreReturnValue
      public @NonNull Builder setScope(@Nullable List<String> setterArg) {
        this.scope = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull LoginWithProviderRequestInterface build() {
        LoginWithProviderRequestInterface pigeonReturn = new LoginWithProviderRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setProvider(provider);
        pigeonReturn.setOrigin(origin);
        pigeonReturn.setScope(scope);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(provider);
      toListResult.add(origin);
      toListResult.add(scope);
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull LoginWithProviderRequestInterface fromList(@NonNull ArrayList<Object> list) {
      LoginWithProviderRequestInterface pigeonResult = new LoginWithProviderRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object provider = list.get(1);
      pigeonResult.setProvider((String) provider);
      Object origin = list.get(2);
      pigeonResult.setOrigin((String) origin);
      Object scope = list.get(3);
      pigeonResult.setScope((List<String>) scope);
      Object errorCodes = list.get(4);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RefreshAccessTokenRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull AuthTokenInterface authToken;

    public @NonNull AuthTokenInterface getAuthToken() {
      return authToken;
    }

    public void setAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RefreshAccessTokenRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable AuthTokenInterface authToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.authToken = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull RefreshAccessTokenRequestInterface build() {
        RefreshAccessTokenRequestInterface pigeonReturn = new RefreshAccessTokenRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((authToken == null) ? null : authToken.toList());
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull RefreshAccessTokenRequestInterface fromList(@NonNull ArrayList<Object> list) {
      RefreshAccessTokenRequestInterface pigeonResult = new RefreshAccessTokenRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object authToken = list.get(1);
      pigeonResult.setAuthToken((authToken == null) ? null : AuthTokenInterface.fromList((ArrayList<Object>) authToken));
      Object errorCodes = list.get(2);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LoginSummaryInterface {
    private @Nullable Double firstLogin;

    public @Nullable Double getFirstLogin() {
      return firstLogin;
    }

    public void setFirstLogin(@Nullable Double setterArg) {
      this.firstLogin = setterArg;
    }

    private @Nullable Double lastLogin;

    public @Nullable Double getLastLogin() {
      return lastLogin;
    }

    public void setLastLogin(@Nullable Double setterArg) {
      this.lastLogin = setterArg;
    }

    private @Nullable Long total;

    public @Nullable Long getTotal() {
      return total;
    }

    public void setTotal(@Nullable Long setterArg) {
      this.total = setterArg;
    }

    private @Nullable List<String> origins;

    public @Nullable List<String> getOrigins() {
      return origins;
    }

    public void setOrigins(@Nullable List<String> setterArg) {
      this.origins = setterArg;
    }

    private @Nullable List<String> devices;

    public @Nullable List<String> getDevices() {
      return devices;
    }

    public void setDevices(@Nullable List<String> setterArg) {
      this.devices = setterArg;
    }

    private @Nullable String lastProvider;

    public @Nullable String getLastProvider() {
      return lastProvider;
    }

    public void setLastProvider(@Nullable String setterArg) {
      this.lastProvider = setterArg;
    }

    public static final class Builder {

      private @Nullable Double firstLogin;

      @CanIgnoreReturnValue
      public @NonNull Builder setFirstLogin(@Nullable Double setterArg) {
        this.firstLogin = setterArg;
        return this;
      }

      private @Nullable Double lastLogin;

      @CanIgnoreReturnValue
      public @NonNull Builder setLastLogin(@Nullable Double setterArg) {
        this.lastLogin = setterArg;
        return this;
      }

      private @Nullable Long total;

      @CanIgnoreReturnValue
      public @NonNull Builder setTotal(@Nullable Long setterArg) {
        this.total = setterArg;
        return this;
      }

      private @Nullable List<String> origins;

      @CanIgnoreReturnValue
      public @NonNull Builder setOrigins(@Nullable List<String> setterArg) {
        this.origins = setterArg;
        return this;
      }

      private @Nullable List<String> devices;

      @CanIgnoreReturnValue
      public @NonNull Builder setDevices(@Nullable List<String> setterArg) {
        this.devices = setterArg;
        return this;
      }

      private @Nullable String lastProvider;

      @CanIgnoreReturnValue
      public @NonNull Builder setLastProvider(@Nullable String setterArg) {
        this.lastProvider = setterArg;
        return this;
      }

      public @NonNull LoginSummaryInterface build() {
        LoginSummaryInterface pigeonReturn = new LoginSummaryInterface();
        pigeonReturn.setFirstLogin(firstLogin);
        pigeonReturn.setLastLogin(lastLogin);
        pigeonReturn.setTotal(total);
        pigeonReturn.setOrigins(origins);
        pigeonReturn.setDevices(devices);
        pigeonReturn.setLastProvider(lastProvider);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(firstLogin);
      toListResult.add(lastLogin);
      toListResult.add(total);
      toListResult.add(origins);
      toListResult.add(devices);
      toListResult.add(lastProvider);
      return toListResult;
    }

    static @NonNull LoginSummaryInterface fromList(@NonNull ArrayList<Object> list) {
      LoginSummaryInterface pigeonResult = new LoginSummaryInterface();
      Object firstLogin = list.get(0);
      pigeonResult.setFirstLogin((Double) firstLogin);
      Object lastLogin = list.get(1);
      pigeonResult.setLastLogin((Double) lastLogin);
      Object total = list.get(2);
      pigeonResult.setTotal((total == null) ? null : ((total instanceof Integer) ? (Integer) total : (Long) total));
      Object origins = list.get(3);
      pigeonResult.setOrigins((List<String>) origins);
      Object devices = list.get(4);
      pigeonResult.setDevices((List<String>) devices);
      Object lastProvider = list.get(5);
      pigeonResult.setLastProvider((String) lastProvider);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EmailsInterface {
    private @Nullable List<String> verified;

    public @Nullable List<String> getVerified() {
      return verified;
    }

    public void setVerified(@Nullable List<String> setterArg) {
      this.verified = setterArg;
    }

    private @Nullable List<String> unverified;

    public @Nullable List<String> getUnverified() {
      return unverified;
    }

    public void setUnverified(@Nullable List<String> setterArg) {
      this.unverified = setterArg;
    }

    public static final class Builder {

      private @Nullable List<String> verified;

      @CanIgnoreReturnValue
      public @NonNull Builder setVerified(@Nullable List<String> setterArg) {
        this.verified = setterArg;
        return this;
      }

      private @Nullable List<String> unverified;

      @CanIgnoreReturnValue
      public @NonNull Builder setUnverified(@Nullable List<String> setterArg) {
        this.unverified = setterArg;
        return this;
      }

      public @NonNull EmailsInterface build() {
        EmailsInterface pigeonReturn = new EmailsInterface();
        pigeonReturn.setVerified(verified);
        pigeonReturn.setUnverified(unverified);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(verified);
      toListResult.add(unverified);
      return toListResult;
    }

    static @NonNull EmailsInterface fromList(@NonNull ArrayList<Object> list) {
      EmailsInterface pigeonResult = new EmailsInterface();
      Object verified = list.get(0);
      pigeonResult.setVerified((List<String>) verified);
      Object unverified = list.get(1);
      pigeonResult.setUnverified((List<String>) unverified);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProfileInterface {
    private @Nullable String uid;

    public @Nullable String getUid() {
      return uid;
    }

    public void setUid(@Nullable String setterArg) {
      this.uid = setterArg;
    }

    private @Nullable String givenName;

    public @Nullable String getGivenName() {
      return givenName;
    }

    public void setGivenName(@Nullable String setterArg) {
      this.givenName = setterArg;
    }

    private @Nullable String middleName;

    public @Nullable String getMiddleName() {
      return middleName;
    }

    public void setMiddleName(@Nullable String setterArg) {
      this.middleName = setterArg;
    }

    private @Nullable String familyName;

    public @Nullable String getFamilyName() {
      return familyName;
    }

    public void setFamilyName(@Nullable String setterArg) {
      this.familyName = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String nickname;

    public @Nullable String getNickname() {
      return nickname;
    }

    public void setNickname(@Nullable String setterArg) {
      this.nickname = setterArg;
    }

    private @Nullable String birthdate;

    public @Nullable String getBirthdate() {
      return birthdate;
    }

    public void setBirthdate(@Nullable String setterArg) {
      this.birthdate = setterArg;
    }

    private @Nullable String profileURL;

    public @Nullable String getProfileURL() {
      return profileURL;
    }

    public void setProfileURL(@Nullable String setterArg) {
      this.profileURL = setterArg;
    }

    private @Nullable String picture;

    public @Nullable String getPicture() {
      return picture;
    }

    public void setPicture(@Nullable String setterArg) {
      this.picture = setterArg;
    }

    private @Nullable String externalId;

    public @Nullable String getExternalId() {
      return externalId;
    }

    public void setExternalId(@Nullable String setterArg) {
      this.externalId = setterArg;
    }

    private @Nullable List<String> authTypes;

    public @Nullable List<String> getAuthTypes() {
      return authTypes;
    }

    public void setAuthTypes(@Nullable List<String> setterArg) {
      this.authTypes = setterArg;
    }

    private @Nullable LoginSummaryInterface loginSummary;

    public @Nullable LoginSummaryInterface getLoginSummary() {
      return loginSummary;
    }

    public void setLoginSummary(@Nullable LoginSummaryInterface setterArg) {
      this.loginSummary = setterArg;
    }

    private @Nullable String username;

    public @Nullable String getUsername() {
      return username;
    }

    public void setUsername(@Nullable String setterArg) {
      this.username = setterArg;
    }

    private @Nullable String gender;

    public @Nullable String getGender() {
      return gender;
    }

    public void setGender(@Nullable String setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable Boolean emailVerified;

    public @Nullable Boolean getEmailVerified() {
      return emailVerified;
    }

    public void setEmailVerified(@Nullable Boolean setterArg) {
      this.emailVerified = setterArg;
    }

    private @Nullable EmailsInterface emails;

    public @Nullable EmailsInterface getEmails() {
      return emails;
    }

    public void setEmails(@Nullable EmailsInterface setterArg) {
      this.emails = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable Boolean phoneNumberVerified;

    public @Nullable Boolean getPhoneNumberVerified() {
      return phoneNumberVerified;
    }

    public void setPhoneNumberVerified(@Nullable Boolean setterArg) {
      this.phoneNumberVerified = setterArg;
    }

    private @Nullable List<ProfileAddressInterface> addresses;

    public @Nullable List<ProfileAddressInterface> getAddresses() {
      return addresses;
    }

    public void setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
      this.addresses = setterArg;
    }

    private @Nullable String locale;

    public @Nullable String getLocale() {
      return locale;
    }

    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    private @Nullable String bio;

    public @Nullable String getBio() {
      return bio;
    }

    public void setBio(@Nullable String setterArg) {
      this.bio = setterArg;
    }

    private @Nullable Map<String, Object> customFields;

    public @Nullable Map<String, Object> getCustomFields() {
      return customFields;
    }

    public void setCustomFields(@Nullable Map<String, Object> setterArg) {
      this.customFields = setterArg;
    }

    private @Nullable Map<String, ConsentInterface> consents;

    public @Nullable Map<String, ConsentInterface> getConsents() {
      return consents;
    }

    public void setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
      this.consents = setterArg;
    }

    private @Nullable String createdAt;

    public @Nullable String getCreatedAt() {
      return createdAt;
    }

    public void setCreatedAt(@Nullable String setterArg) {
      this.createdAt = setterArg;
    }

    private @Nullable String updatedAt;

    public @Nullable String getUpdatedAt() {
      return updatedAt;
    }

    public void setUpdatedAt(@Nullable String setterArg) {
      this.updatedAt = setterArg;
    }

    private @Nullable Boolean liteOnly;

    public @Nullable Boolean getLiteOnly() {
      return liteOnly;
    }

    public void setLiteOnly(@Nullable Boolean setterArg) {
      this.liteOnly = setterArg;
    }

    private @Nullable String company;

    public @Nullable String getCompany() {
      return company;
    }

    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    public static final class Builder {

      private @Nullable String uid;

      @CanIgnoreReturnValue
      public @NonNull Builder setUid(@Nullable String setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String givenName;

      @CanIgnoreReturnValue
      public @NonNull Builder setGivenName(@Nullable String setterArg) {
        this.givenName = setterArg;
        return this;
      }

      private @Nullable String middleName;

      @CanIgnoreReturnValue
      public @NonNull Builder setMiddleName(@Nullable String setterArg) {
        this.middleName = setterArg;
        return this;
      }

      private @Nullable String familyName;

      @CanIgnoreReturnValue
      public @NonNull Builder setFamilyName(@Nullable String setterArg) {
        this.familyName = setterArg;
        return this;
      }

      private @Nullable String name;

      @CanIgnoreReturnValue
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String nickname;

      @CanIgnoreReturnValue
      public @NonNull Builder setNickname(@Nullable String setterArg) {
        this.nickname = setterArg;
        return this;
      }

      private @Nullable String birthdate;

      @CanIgnoreReturnValue
      public @NonNull Builder setBirthdate(@Nullable String setterArg) {
        this.birthdate = setterArg;
        return this;
      }

      private @Nullable String profileURL;

      @CanIgnoreReturnValue
      public @NonNull Builder setProfileURL(@Nullable String setterArg) {
        this.profileURL = setterArg;
        return this;
      }

      private @Nullable String picture;

      @CanIgnoreReturnValue
      public @NonNull Builder setPicture(@Nullable String setterArg) {
        this.picture = setterArg;
        return this;
      }

      private @Nullable String externalId;

      @CanIgnoreReturnValue
      public @NonNull Builder setExternalId(@Nullable String setterArg) {
        this.externalId = setterArg;
        return this;
      }

      private @Nullable List<String> authTypes;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthTypes(@Nullable List<String> setterArg) {
        this.authTypes = setterArg;
        return this;
      }

      private @Nullable LoginSummaryInterface loginSummary;

      @CanIgnoreReturnValue
      public @NonNull Builder setLoginSummary(@Nullable LoginSummaryInterface setterArg) {
        this.loginSummary = setterArg;
        return this;
      }

      private @Nullable String username;

      @CanIgnoreReturnValue
      public @NonNull Builder setUsername(@Nullable String setterArg) {
        this.username = setterArg;
        return this;
      }

      private @Nullable String gender;

      @CanIgnoreReturnValue
      public @NonNull Builder setGender(@Nullable String setterArg) {
        this.gender = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable Boolean emailVerified;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmailVerified(@Nullable Boolean setterArg) {
        this.emailVerified = setterArg;
        return this;
      }

      private @Nullable EmailsInterface emails;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmails(@Nullable EmailsInterface setterArg) {
        this.emails = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable Boolean phoneNumberVerified;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumberVerified(@Nullable Boolean setterArg) {
        this.phoneNumberVerified = setterArg;
        return this;
      }

      private @Nullable List<ProfileAddressInterface> addresses;

      @CanIgnoreReturnValue
      public @NonNull Builder setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
        this.addresses = setterArg;
        return this;
      }

      private @Nullable String locale;

      @CanIgnoreReturnValue
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }

      private @Nullable String bio;

      @CanIgnoreReturnValue
      public @NonNull Builder setBio(@Nullable String setterArg) {
        this.bio = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> customFields;

      @CanIgnoreReturnValue
      public @NonNull Builder setCustomFields(@Nullable Map<String, Object> setterArg) {
        this.customFields = setterArg;
        return this;
      }

      private @Nullable Map<String, ConsentInterface> consents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
        this.consents = setterArg;
        return this;
      }

      private @Nullable String createdAt;

      @CanIgnoreReturnValue
      public @NonNull Builder setCreatedAt(@Nullable String setterArg) {
        this.createdAt = setterArg;
        return this;
      }

      private @Nullable String updatedAt;

      @CanIgnoreReturnValue
      public @NonNull Builder setUpdatedAt(@Nullable String setterArg) {
        this.updatedAt = setterArg;
        return this;
      }

      private @Nullable Boolean liteOnly;

      @CanIgnoreReturnValue
      public @NonNull Builder setLiteOnly(@Nullable Boolean setterArg) {
        this.liteOnly = setterArg;
        return this;
      }

      private @Nullable String company;

      @CanIgnoreReturnValue
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }

      public @NonNull ProfileInterface build() {
        ProfileInterface pigeonReturn = new ProfileInterface();
        pigeonReturn.setUid(uid);
        pigeonReturn.setGivenName(givenName);
        pigeonReturn.setMiddleName(middleName);
        pigeonReturn.setFamilyName(familyName);
        pigeonReturn.setName(name);
        pigeonReturn.setNickname(nickname);
        pigeonReturn.setBirthdate(birthdate);
        pigeonReturn.setProfileURL(profileURL);
        pigeonReturn.setPicture(picture);
        pigeonReturn.setExternalId(externalId);
        pigeonReturn.setAuthTypes(authTypes);
        pigeonReturn.setLoginSummary(loginSummary);
        pigeonReturn.setUsername(username);
        pigeonReturn.setGender(gender);
        pigeonReturn.setEmail(email);
        pigeonReturn.setEmailVerified(emailVerified);
        pigeonReturn.setEmails(emails);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setPhoneNumberVerified(phoneNumberVerified);
        pigeonReturn.setAddresses(addresses);
        pigeonReturn.setLocale(locale);
        pigeonReturn.setBio(bio);
        pigeonReturn.setCustomFields(customFields);
        pigeonReturn.setConsents(consents);
        pigeonReturn.setCreatedAt(createdAt);
        pigeonReturn.setUpdatedAt(updatedAt);
        pigeonReturn.setLiteOnly(liteOnly);
        pigeonReturn.setCompany(company);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(28);
      toListResult.add(uid);
      toListResult.add(givenName);
      toListResult.add(middleName);
      toListResult.add(familyName);
      toListResult.add(name);
      toListResult.add(nickname);
      toListResult.add(birthdate);
      toListResult.add(profileURL);
      toListResult.add(picture);
      toListResult.add(externalId);
      toListResult.add(authTypes);
      toListResult.add((loginSummary == null) ? null : loginSummary.toList());
      toListResult.add(username);
      toListResult.add(gender);
      toListResult.add(email);
      toListResult.add(emailVerified);
      toListResult.add((emails == null) ? null : emails.toList());
      toListResult.add(phoneNumber);
      toListResult.add(phoneNumberVerified);
      toListResult.add(addresses);
      toListResult.add(locale);
      toListResult.add(bio);
      toListResult.add(customFields);
      toListResult.add(consents);
      toListResult.add(createdAt);
      toListResult.add(updatedAt);
      toListResult.add(liteOnly);
      toListResult.add(company);
      return toListResult;
    }

    static @NonNull ProfileInterface fromList(@NonNull ArrayList<Object> list) {
      ProfileInterface pigeonResult = new ProfileInterface();
      Object uid = list.get(0);
      pigeonResult.setUid((String) uid);
      Object givenName = list.get(1);
      pigeonResult.setGivenName((String) givenName);
      Object middleName = list.get(2);
      pigeonResult.setMiddleName((String) middleName);
      Object familyName = list.get(3);
      pigeonResult.setFamilyName((String) familyName);
      Object name = list.get(4);
      pigeonResult.setName((String) name);
      Object nickname = list.get(5);
      pigeonResult.setNickname((String) nickname);
      Object birthdate = list.get(6);
      pigeonResult.setBirthdate((String) birthdate);
      Object profileURL = list.get(7);
      pigeonResult.setProfileURL((String) profileURL);
      Object picture = list.get(8);
      pigeonResult.setPicture((String) picture);
      Object externalId = list.get(9);
      pigeonResult.setExternalId((String) externalId);
      Object authTypes = list.get(10);
      pigeonResult.setAuthTypes((List<String>) authTypes);
      Object loginSummary = list.get(11);
      pigeonResult.setLoginSummary((loginSummary == null) ? null : LoginSummaryInterface.fromList((ArrayList<Object>) loginSummary));
      Object username = list.get(12);
      pigeonResult.setUsername((String) username);
      Object gender = list.get(13);
      pigeonResult.setGender((String) gender);
      Object email = list.get(14);
      pigeonResult.setEmail((String) email);
      Object emailVerified = list.get(15);
      pigeonResult.setEmailVerified((Boolean) emailVerified);
      Object emails = list.get(16);
      pigeonResult.setEmails((emails == null) ? null : EmailsInterface.fromList((ArrayList<Object>) emails));
      Object phoneNumber = list.get(17);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object phoneNumberVerified = list.get(18);
      pigeonResult.setPhoneNumberVerified((Boolean) phoneNumberVerified);
      Object addresses = list.get(19);
      pigeonResult.setAddresses((List<ProfileAddressInterface>) addresses);
      Object locale = list.get(20);
      pigeonResult.setLocale((String) locale);
      Object bio = list.get(21);
      pigeonResult.setBio((String) bio);
      Object customFields = list.get(22);
      pigeonResult.setCustomFields((Map<String, Object>) customFields);
      Object consents = list.get(23);
      pigeonResult.setConsents((Map<String, ConsentInterface>) consents);
      Object createdAt = list.get(24);
      pigeonResult.setCreatedAt((String) createdAt);
      Object updatedAt = list.get(25);
      pigeonResult.setUpdatedAt((String) updatedAt);
      Object liteOnly = list.get(26);
      pigeonResult.setLiteOnly((Boolean) liteOnly);
      Object company = list.get(27);
      pigeonResult.setCompany((String) company);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class GetProfileRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull AuthTokenInterface authToken;

    public @NonNull AuthTokenInterface getAuthToken() {
      return authToken;
    }

    public void setAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    GetProfileRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable AuthTokenInterface authToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.authToken = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull GetProfileRequestInterface build() {
        GetProfileRequestInterface pigeonReturn = new GetProfileRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((authToken == null) ? null : authToken.toList());
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull GetProfileRequestInterface fromList(@NonNull ArrayList<Object> list) {
      GetProfileRequestInterface pigeonResult = new GetProfileRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object authToken = list.get(1);
      pigeonResult.setAuthToken((authToken == null) ? null : AuthTokenInterface.fromList((ArrayList<Object>) authToken));
      Object errorCodes = list.get(2);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdateProfileRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull AuthTokenInterface authToken;

    public @NonNull AuthTokenInterface getAuthToken() {
      return authToken;
    }

    public void setAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull ProfileInterface profile;

    public @NonNull ProfileInterface getProfile() {
      return profile;
    }

    public void setProfile(@NonNull ProfileInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"profile\" is null.");
      }
      this.profile = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdateProfileRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable AuthTokenInterface authToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.authToken = setterArg;
        return this;
      }

      private @Nullable ProfileInterface profile;

      @CanIgnoreReturnValue
      public @NonNull Builder setProfile(@NonNull ProfileInterface setterArg) {
        this.profile = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull UpdateProfileRequestInterface build() {
        UpdateProfileRequestInterface pigeonReturn = new UpdateProfileRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setProfile(profile);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((authToken == null) ? null : authToken.toList());
      toListResult.add((profile == null) ? null : profile.toList());
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull UpdateProfileRequestInterface fromList(@NonNull ArrayList<Object> list) {
      UpdateProfileRequestInterface pigeonResult = new UpdateProfileRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object authToken = list.get(1);
      pigeonResult.setAuthToken((authToken == null) ? null : AuthTokenInterface.fromList((ArrayList<Object>) authToken));
      Object profile = list.get(2);
      pigeonResult.setProfile((profile == null) ? null : ProfileInterface.fromList((ArrayList<Object>) profile));
      Object errorCodes = list.get(3);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RequestPasswordResetRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable String redirectUrl;

    public @Nullable String getRedirectUrl() {
      return redirectUrl;
    }

    public void setRedirectUrl(@Nullable String setterArg) {
      this.redirectUrl = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RequestPasswordResetRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable String redirectUrl;

      @CanIgnoreReturnValue
      public @NonNull Builder setRedirectUrl(@Nullable String setterArg) {
        this.redirectUrl = setterArg;
        return this;
      }

      public @NonNull RequestPasswordResetRequestInterface build() {
        RequestPasswordResetRequestInterface pigeonReturn = new RequestPasswordResetRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setEmail(email);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setRedirectUrl(redirectUrl);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(email);
      toListResult.add(phoneNumber);
      toListResult.add(redirectUrl);
      return toListResult;
    }

    static @NonNull RequestPasswordResetRequestInterface fromList(@NonNull ArrayList<Object> list) {
      RequestPasswordResetRequestInterface pigeonResult = new RequestPasswordResetRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      Object phoneNumber = list.get(2);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object redirectUrl = list.get(3);
      pigeonResult.setRedirectUrl((String) redirectUrl);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdatePasswordWithAccessTokenRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull AuthTokenInterface authToken;

    public @NonNull AuthTokenInterface getAuthToken() {
      return authToken;
    }

    public void setAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    private @NonNull String oldPassword;

    public @NonNull String getOldPassword() {
      return oldPassword;
    }

    public void setOldPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"oldPassword\" is null.");
      }
      this.oldPassword = setterArg;
    }

    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdatePasswordWithAccessTokenRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable AuthTokenInterface authToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.authToken = setterArg;
        return this;
      }

      private @Nullable String oldPassword;

      @CanIgnoreReturnValue
      public @NonNull Builder setOldPassword(@NonNull String setterArg) {
        this.oldPassword = setterArg;
        return this;
      }

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      public @NonNull UpdatePasswordWithAccessTokenRequestInterface build() {
        UpdatePasswordWithAccessTokenRequestInterface pigeonReturn = new UpdatePasswordWithAccessTokenRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setAuthToken(authToken);
        pigeonReturn.setOldPassword(oldPassword);
        pigeonReturn.setPassword(password);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((authToken == null) ? null : authToken.toList());
      toListResult.add(oldPassword);
      toListResult.add(password);
      return toListResult;
    }

    static @NonNull UpdatePasswordWithAccessTokenRequestInterface fromList(@NonNull ArrayList<Object> list) {
      UpdatePasswordWithAccessTokenRequestInterface pigeonResult = new UpdatePasswordWithAccessTokenRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object authToken = list.get(1);
      pigeonResult.setAuthToken((authToken == null) ? null : AuthTokenInterface.fromList((ArrayList<Object>) authToken));
      Object oldPassword = list.get(2);
      pigeonResult.setOldPassword((String) oldPassword);
      Object password = list.get(3);
      pigeonResult.setPassword((String) password);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdatePasswordWithFreshAccessTokenRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull AuthTokenInterface freshAuthToken;

    public @NonNull AuthTokenInterface getFreshAuthToken() {
      return freshAuthToken;
    }

    public void setFreshAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"freshAuthToken\" is null.");
      }
      this.freshAuthToken = setterArg;
    }

    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdatePasswordWithFreshAccessTokenRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable AuthTokenInterface freshAuthToken;

      @CanIgnoreReturnValue
      public @NonNull Builder setFreshAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.freshAuthToken = setterArg;
        return this;
      }

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      public @NonNull UpdatePasswordWithFreshAccessTokenRequestInterface build() {
        UpdatePasswordWithFreshAccessTokenRequestInterface pigeonReturn = new UpdatePasswordWithFreshAccessTokenRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setFreshAuthToken(freshAuthToken);
        pigeonReturn.setPassword(password);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add((freshAuthToken == null) ? null : freshAuthToken.toList());
      toListResult.add(password);
      return toListResult;
    }

    static @NonNull UpdatePasswordWithFreshAccessTokenRequestInterface fromList(@NonNull ArrayList<Object> list) {
      UpdatePasswordWithFreshAccessTokenRequestInterface pigeonResult = new UpdatePasswordWithFreshAccessTokenRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object freshAuthToken = list.get(1);
      pigeonResult.setFreshAuthToken((freshAuthToken == null) ? null : AuthTokenInterface.fromList((ArrayList<Object>) freshAuthToken));
      Object password = list.get(2);
      pigeonResult.setPassword((String) password);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdatePasswordWithEmailRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull String email;

    public @NonNull String getEmail() {
      return email;
    }

    public void setEmail(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"email\" is null.");
      }
      this.email = setterArg;
    }

    private @NonNull String verificationCode;

    public @NonNull String getVerificationCode() {
      return verificationCode;
    }

    public void setVerificationCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationCode\" is null.");
      }
      this.verificationCode = setterArg;
    }

    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdatePasswordWithEmailRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable String email;

      @CanIgnoreReturnValue
      public @NonNull Builder setEmail(@NonNull String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String verificationCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setVerificationCode(@NonNull String setterArg) {
        this.verificationCode = setterArg;
        return this;
      }

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull UpdatePasswordWithEmailRequestInterface build() {
        UpdatePasswordWithEmailRequestInterface pigeonReturn = new UpdatePasswordWithEmailRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setEmail(email);
        pigeonReturn.setVerificationCode(verificationCode);
        pigeonReturn.setPassword(password);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(email);
      toListResult.add(verificationCode);
      toListResult.add(password);
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull UpdatePasswordWithEmailRequestInterface fromList(@NonNull ArrayList<Object> list) {
      UpdatePasswordWithEmailRequestInterface pigeonResult = new UpdatePasswordWithEmailRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object email = list.get(1);
      pigeonResult.setEmail((String) email);
      Object verificationCode = list.get(2);
      pigeonResult.setVerificationCode((String) verificationCode);
      Object password = list.get(3);
      pigeonResult.setPassword((String) password);
      Object errorCodes = list.get(4);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UpdatePasswordWithPhoneNumberRequestInterface {
    private @NonNull ReachFiveKeyInterface reachFiveKey;

    public @NonNull ReachFiveKeyInterface getReachFiveKey() {
      return reachFiveKey;
    }

    public void setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reachFiveKey\" is null.");
      }
      this.reachFiveKey = setterArg;
    }

    private @NonNull String phoneNumber;

    public @NonNull String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"phoneNumber\" is null.");
      }
      this.phoneNumber = setterArg;
    }

    private @NonNull String verificationCode;

    public @NonNull String getVerificationCode() {
      return verificationCode;
    }

    public void setVerificationCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationCode\" is null.");
      }
      this.verificationCode = setterArg;
    }

    private @NonNull String password;

    public @NonNull String getPassword() {
      return password;
    }

    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    private @NonNull ErrorCodesInterface errorCodes;

    public @NonNull ErrorCodesInterface getErrorCodes() {
      return errorCodes;
    }

    public void setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorCodes\" is null.");
      }
      this.errorCodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UpdatePasswordWithPhoneNumberRequestInterface() {}

    public static final class Builder {

      private @Nullable ReachFiveKeyInterface reachFiveKey;

      @CanIgnoreReturnValue
      public @NonNull Builder setReachFiveKey(@NonNull ReachFiveKeyInterface setterArg) {
        this.reachFiveKey = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      @CanIgnoreReturnValue
      public @NonNull Builder setPhoneNumber(@NonNull String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      private @Nullable String verificationCode;

      @CanIgnoreReturnValue
      public @NonNull Builder setVerificationCode(@NonNull String setterArg) {
        this.verificationCode = setterArg;
        return this;
      }

      private @Nullable String password;

      @CanIgnoreReturnValue
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable ErrorCodesInterface errorCodes;

      @CanIgnoreReturnValue
      public @NonNull Builder setErrorCodes(@NonNull ErrorCodesInterface setterArg) {
        this.errorCodes = setterArg;
        return this;
      }

      public @NonNull UpdatePasswordWithPhoneNumberRequestInterface build() {
        UpdatePasswordWithPhoneNumberRequestInterface pigeonReturn = new UpdatePasswordWithPhoneNumberRequestInterface();
        pigeonReturn.setReachFiveKey(reachFiveKey);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setVerificationCode(verificationCode);
        pigeonReturn.setPassword(password);
        pigeonReturn.setErrorCodes(errorCodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add((reachFiveKey == null) ? null : reachFiveKey.toList());
      toListResult.add(phoneNumber);
      toListResult.add(verificationCode);
      toListResult.add(password);
      toListResult.add((errorCodes == null) ? null : errorCodes.toList());
      return toListResult;
    }

    static @NonNull UpdatePasswordWithPhoneNumberRequestInterface fromList(@NonNull ArrayList<Object> list) {
      UpdatePasswordWithPhoneNumberRequestInterface pigeonResult = new UpdatePasswordWithPhoneNumberRequestInterface();
      Object reachFiveKey = list.get(0);
      pigeonResult.setReachFiveKey((reachFiveKey == null) ? null : ReachFiveKeyInterface.fromList((ArrayList<Object>) reachFiveKey));
      Object phoneNumber = list.get(1);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      Object verificationCode = list.get(2);
      pigeonResult.setVerificationCode((String) verificationCode);
      Object password = list.get(3);
      pigeonResult.setPassword((String) password);
      Object errorCodes = list.get(4);
      pigeonResult.setErrorCodes((errorCodes == null) ? null : ErrorCodesInterface.fromList((ArrayList<Object>) errorCodes));
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class ReachFiveHostApiCodec extends StandardMessageCodec {
    public static final ReachFiveHostApiCodec INSTANCE = new ReachFiveHostApiCodec();

    private ReachFiveHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AddressInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AuthTokenInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ConsentInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return EmailsInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ErrorCodesInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return GetProfileRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return LoginSummaryInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return LoginWithPasswordRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return LoginWithProviderRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return OpenIdUserInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return ProfileAddressInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return ProfileInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return ProfileSignupRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return ProviderCreatorInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return ReachFiveConfigInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return ReachFiveKeyInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return RefreshAccessTokenRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return RequestPasswordResetRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return SdkConfigInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 147:
          return SignupRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 148:
          return UpdatePasswordWithAccessTokenRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 149:
          return UpdatePasswordWithEmailRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 150:
          return UpdatePasswordWithFreshAccessTokenRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 151:
          return UpdatePasswordWithPhoneNumberRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 152:
          return UpdateProfileRequestInterface.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AddressInterface) {
        stream.write(128);
        writeValue(stream, ((AddressInterface) value).toList());
      } else if (value instanceof AuthTokenInterface) {
        stream.write(129);
        writeValue(stream, ((AuthTokenInterface) value).toList());
      } else if (value instanceof ConsentInterface) {
        stream.write(130);
        writeValue(stream, ((ConsentInterface) value).toList());
      } else if (value instanceof EmailsInterface) {
        stream.write(131);
        writeValue(stream, ((EmailsInterface) value).toList());
      } else if (value instanceof ErrorCodesInterface) {
        stream.write(132);
        writeValue(stream, ((ErrorCodesInterface) value).toList());
      } else if (value instanceof GetProfileRequestInterface) {
        stream.write(133);
        writeValue(stream, ((GetProfileRequestInterface) value).toList());
      } else if (value instanceof LoginSummaryInterface) {
        stream.write(134);
        writeValue(stream, ((LoginSummaryInterface) value).toList());
      } else if (value instanceof LoginWithPasswordRequestInterface) {
        stream.write(135);
        writeValue(stream, ((LoginWithPasswordRequestInterface) value).toList());
      } else if (value instanceof LoginWithProviderRequestInterface) {
        stream.write(136);
        writeValue(stream, ((LoginWithProviderRequestInterface) value).toList());
      } else if (value instanceof OpenIdUserInterface) {
        stream.write(137);
        writeValue(stream, ((OpenIdUserInterface) value).toList());
      } else if (value instanceof ProfileAddressInterface) {
        stream.write(138);
        writeValue(stream, ((ProfileAddressInterface) value).toList());
      } else if (value instanceof ProfileInterface) {
        stream.write(139);
        writeValue(stream, ((ProfileInterface) value).toList());
      } else if (value instanceof ProfileSignupRequestInterface) {
        stream.write(140);
        writeValue(stream, ((ProfileSignupRequestInterface) value).toList());
      } else if (value instanceof ProviderCreatorInterface) {
        stream.write(141);
        writeValue(stream, ((ProviderCreatorInterface) value).toList());
      } else if (value instanceof ReachFiveConfigInterface) {
        stream.write(142);
        writeValue(stream, ((ReachFiveConfigInterface) value).toList());
      } else if (value instanceof ReachFiveKeyInterface) {
        stream.write(143);
        writeValue(stream, ((ReachFiveKeyInterface) value).toList());
      } else if (value instanceof RefreshAccessTokenRequestInterface) {
        stream.write(144);
        writeValue(stream, ((RefreshAccessTokenRequestInterface) value).toList());
      } else if (value instanceof RequestPasswordResetRequestInterface) {
        stream.write(145);
        writeValue(stream, ((RequestPasswordResetRequestInterface) value).toList());
      } else if (value instanceof SdkConfigInterface) {
        stream.write(146);
        writeValue(stream, ((SdkConfigInterface) value).toList());
      } else if (value instanceof SignupRequestInterface) {
        stream.write(147);
        writeValue(stream, ((SignupRequestInterface) value).toList());
      } else if (value instanceof UpdatePasswordWithAccessTokenRequestInterface) {
        stream.write(148);
        writeValue(stream, ((UpdatePasswordWithAccessTokenRequestInterface) value).toList());
      } else if (value instanceof UpdatePasswordWithEmailRequestInterface) {
        stream.write(149);
        writeValue(stream, ((UpdatePasswordWithEmailRequestInterface) value).toList());
      } else if (value instanceof UpdatePasswordWithFreshAccessTokenRequestInterface) {
        stream.write(150);
        writeValue(stream, ((UpdatePasswordWithFreshAccessTokenRequestInterface) value).toList());
      } else if (value instanceof UpdatePasswordWithPhoneNumberRequestInterface) {
        stream.write(151);
        writeValue(stream, ((UpdatePasswordWithPhoneNumberRequestInterface) value).toList());
      } else if (value instanceof UpdateProfileRequestInterface) {
        stream.write(152);
        writeValue(stream, ((UpdateProfileRequestInterface) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ReachFiveHostApi {

    void initialize(@NonNull ReachFiveKeyInterface reachFiveKey, @NonNull Result<ReachFiveConfigInterface> result);

    void signup(@NonNull SignupRequestInterface request, @NonNull Result<AuthTokenInterface> result);

    void loginWithPassword(@NonNull LoginWithPasswordRequestInterface request, @NonNull Result<AuthTokenInterface> result);

    void loginWithProvider(@NonNull LoginWithProviderRequestInterface request, @NonNull Result<AuthTokenInterface> result);

    void logout(@NonNull ReachFiveKeyInterface reachFiveKey, @NonNull VoidResult result);

    void getProfile(@NonNull GetProfileRequestInterface request, @NonNull Result<ProfileInterface> result);

    void updateProfile(@NonNull UpdateProfileRequestInterface request, @NonNull Result<ProfileInterface> result);

    void refreshAccessToken(@NonNull RefreshAccessTokenRequestInterface request, @NonNull Result<AuthTokenInterface> result);

    void requestPasswordReset(@NonNull RequestPasswordResetRequestInterface request, @NonNull VoidResult result);

    void updatePasswordWithAccessToken(@NonNull UpdatePasswordWithAccessTokenRequestInterface request, @NonNull VoidResult result);

    void updatePasswordWithFreshAccessToken(@NonNull UpdatePasswordWithFreshAccessTokenRequestInterface request, @NonNull VoidResult result);

    void updatePasswordWithEmail(@NonNull UpdatePasswordWithEmailRequestInterface request, @NonNull VoidResult result);

    void updatePasswordWithPhoneNumber(@NonNull UpdatePasswordWithPhoneNumberRequestInterface request, @NonNull VoidResult result);

    /** The codec used by ReachFiveHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ReachFiveHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `ReachFiveHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable ReachFiveHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReachFiveKeyInterface reachFiveKeyArg = (ReachFiveKeyInterface) args.get(0);
                Result<ReachFiveConfigInterface> resultCallback =
                    new Result<ReachFiveConfigInterface>() {
                      public void success(ReachFiveConfigInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initialize(reachFiveKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.signup", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                SignupRequestInterface requestArg = (SignupRequestInterface) args.get(0);
                Result<AuthTokenInterface> resultCallback =
                    new Result<AuthTokenInterface>() {
                      public void success(AuthTokenInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.signup(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.loginWithPassword", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LoginWithPasswordRequestInterface requestArg = (LoginWithPasswordRequestInterface) args.get(0);
                Result<AuthTokenInterface> resultCallback =
                    new Result<AuthTokenInterface>() {
                      public void success(AuthTokenInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.loginWithPassword(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.loginWithProvider", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LoginWithProviderRequestInterface requestArg = (LoginWithProviderRequestInterface) args.get(0);
                Result<AuthTokenInterface> resultCallback =
                    new Result<AuthTokenInterface>() {
                      public void success(AuthTokenInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.loginWithProvider(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.logout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReachFiveKeyInterface reachFiveKeyArg = (ReachFiveKeyInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.logout(reachFiveKeyArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.getProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                GetProfileRequestInterface requestArg = (GetProfileRequestInterface) args.get(0);
                Result<ProfileInterface> resultCallback =
                    new Result<ProfileInterface>() {
                      public void success(ProfileInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getProfile(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updateProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UpdateProfileRequestInterface requestArg = (UpdateProfileRequestInterface) args.get(0);
                Result<ProfileInterface> resultCallback =
                    new Result<ProfileInterface>() {
                      public void success(ProfileInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updateProfile(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.refreshAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RefreshAccessTokenRequestInterface requestArg = (RefreshAccessTokenRequestInterface) args.get(0);
                Result<AuthTokenInterface> resultCallback =
                    new Result<AuthTokenInterface>() {
                      public void success(AuthTokenInterface result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.refreshAccessToken(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.requestPasswordReset", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RequestPasswordResetRequestInterface requestArg = (RequestPasswordResetRequestInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestPasswordReset(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UpdatePasswordWithAccessTokenRequestInterface requestArg = (UpdatePasswordWithAccessTokenRequestInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePasswordWithAccessToken(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithFreshAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UpdatePasswordWithFreshAccessTokenRequestInterface requestArg = (UpdatePasswordWithFreshAccessTokenRequestInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePasswordWithFreshAccessToken(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithEmail", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UpdatePasswordWithEmailRequestInterface requestArg = (UpdatePasswordWithEmailRequestInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePasswordWithEmail(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithPhoneNumber", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UpdatePasswordWithPhoneNumberRequestInterface requestArg = (UpdatePasswordWithPhoneNumberRequestInterface) args.get(0);
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.updatePasswordWithPhoneNumber(requestArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
