// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package tech.bam.flutter_reach_five.android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ReachFiveApi {

  public enum ProfileAddressTypeInterface {
    BILLING(0),
    DELIVERY(1);

    private int index;
    private ProfileAddressTypeInterface(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReachFiveConfigInterface {
    private @NonNull String domain;
    public @NonNull String getDomain() { return domain; }
    public void setDomain(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"domain\" is null.");
      }
      this.domain = setterArg;
    }

    private @NonNull String clientId;
    public @NonNull String getClientId() { return clientId; }
    public void setClientId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clientId\" is null.");
      }
      this.clientId = setterArg;
    }

    private @NonNull String scheme;
    public @NonNull String getScheme() { return scheme; }
    public void setScheme(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"scheme\" is null.");
      }
      this.scheme = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ReachFiveConfigInterface() {}
    public static final class Builder {
      private @Nullable String domain;
      public @NonNull Builder setDomain(@NonNull String setterArg) {
        this.domain = setterArg;
        return this;
      }
      private @Nullable String clientId;
      public @NonNull Builder setClientId(@NonNull String setterArg) {
        this.clientId = setterArg;
        return this;
      }
      private @Nullable String scheme;
      public @NonNull Builder setScheme(@NonNull String setterArg) {
        this.scheme = setterArg;
        return this;
      }
      public @NonNull ReachFiveConfigInterface build() {
        ReachFiveConfigInterface pigeonReturn = new ReachFiveConfigInterface();
        pigeonReturn.setDomain(domain);
        pigeonReturn.setClientId(clientId);
        pigeonReturn.setScheme(scheme);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("domain", domain);
      toMapResult.put("clientId", clientId);
      toMapResult.put("scheme", scheme);
      return toMapResult;
    }
    static @NonNull ReachFiveConfigInterface fromMap(@NonNull Map<String, Object> map) {
      ReachFiveConfigInterface pigeonResult = new ReachFiveConfigInterface();
      Object domain = map.get("domain");
      pigeonResult.setDomain((String)domain);
      Object clientId = map.get("clientId");
      pigeonResult.setClientId((String)clientId);
      Object scheme = map.get("scheme");
      pigeonResult.setScheme((String)scheme);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ProfileAddressInterface {
    private @Nullable String title;
    public @Nullable String getTitle() { return title; }
    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable Boolean isDefault;
    public @Nullable Boolean getIsDefault() { return isDefault; }
    public void setIsDefault(@Nullable Boolean setterArg) {
      this.isDefault = setterArg;
    }

    private @Nullable ProfileAddressTypeInterface addressType;
    public @Nullable ProfileAddressTypeInterface getAddressType() { return addressType; }
    public void setAddressType(@Nullable ProfileAddressTypeInterface setterArg) {
      this.addressType = setterArg;
    }

    private @Nullable String streetAddress;
    public @Nullable String getStreetAddress() { return streetAddress; }
    public void setStreetAddress(@Nullable String setterArg) {
      this.streetAddress = setterArg;
    }

    private @Nullable String locality;
    public @Nullable String getLocality() { return locality; }
    public void setLocality(@Nullable String setterArg) {
      this.locality = setterArg;
    }

    private @Nullable String region;
    public @Nullable String getRegion() { return region; }
    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable String postalCode;
    public @Nullable String getPostalCode() { return postalCode; }
    public void setPostalCode(@Nullable String setterArg) {
      this.postalCode = setterArg;
    }

    private @Nullable String country;
    public @Nullable String getCountry() { return country; }
    public void setCountry(@Nullable String setterArg) {
      this.country = setterArg;
    }

    private @Nullable String raw;
    public @Nullable String getRaw() { return raw; }
    public void setRaw(@Nullable String setterArg) {
      this.raw = setterArg;
    }

    private @Nullable String deliveryNote;
    public @Nullable String getDeliveryNote() { return deliveryNote; }
    public void setDeliveryNote(@Nullable String setterArg) {
      this.deliveryNote = setterArg;
    }

    private @Nullable String recipient;
    public @Nullable String getRecipient() { return recipient; }
    public void setRecipient(@Nullable String setterArg) {
      this.recipient = setterArg;
    }

    private @Nullable String company;
    public @Nullable String getCompany() { return company; }
    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable String phoneNumber;
    public @Nullable String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    public static final class Builder {
      private @Nullable String title;
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }
      private @Nullable Boolean isDefault;
      public @NonNull Builder setIsDefault(@Nullable Boolean setterArg) {
        this.isDefault = setterArg;
        return this;
      }
      private @Nullable ProfileAddressTypeInterface addressType;
      public @NonNull Builder setAddressType(@Nullable ProfileAddressTypeInterface setterArg) {
        this.addressType = setterArg;
        return this;
      }
      private @Nullable String streetAddress;
      public @NonNull Builder setStreetAddress(@Nullable String setterArg) {
        this.streetAddress = setterArg;
        return this;
      }
      private @Nullable String locality;
      public @NonNull Builder setLocality(@Nullable String setterArg) {
        this.locality = setterArg;
        return this;
      }
      private @Nullable String region;
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable String postalCode;
      public @NonNull Builder setPostalCode(@Nullable String setterArg) {
        this.postalCode = setterArg;
        return this;
      }
      private @Nullable String country;
      public @NonNull Builder setCountry(@Nullable String setterArg) {
        this.country = setterArg;
        return this;
      }
      private @Nullable String raw;
      public @NonNull Builder setRaw(@Nullable String setterArg) {
        this.raw = setterArg;
        return this;
      }
      private @Nullable String deliveryNote;
      public @NonNull Builder setDeliveryNote(@Nullable String setterArg) {
        this.deliveryNote = setterArg;
        return this;
      }
      private @Nullable String recipient;
      public @NonNull Builder setRecipient(@Nullable String setterArg) {
        this.recipient = setterArg;
        return this;
      }
      private @Nullable String company;
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }
      private @Nullable String phoneNumber;
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }
      public @NonNull ProfileAddressInterface build() {
        ProfileAddressInterface pigeonReturn = new ProfileAddressInterface();
        pigeonReturn.setTitle(title);
        pigeonReturn.setIsDefault(isDefault);
        pigeonReturn.setAddressType(addressType);
        pigeonReturn.setStreetAddress(streetAddress);
        pigeonReturn.setLocality(locality);
        pigeonReturn.setRegion(region);
        pigeonReturn.setPostalCode(postalCode);
        pigeonReturn.setCountry(country);
        pigeonReturn.setRaw(raw);
        pigeonReturn.setDeliveryNote(deliveryNote);
        pigeonReturn.setRecipient(recipient);
        pigeonReturn.setCompany(company);
        pigeonReturn.setPhoneNumber(phoneNumber);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("title", title);
      toMapResult.put("isDefault", isDefault);
      toMapResult.put("addressType", addressType == null ? null : addressType.index);
      toMapResult.put("streetAddress", streetAddress);
      toMapResult.put("locality", locality);
      toMapResult.put("region", region);
      toMapResult.put("postalCode", postalCode);
      toMapResult.put("country", country);
      toMapResult.put("raw", raw);
      toMapResult.put("deliveryNote", deliveryNote);
      toMapResult.put("recipient", recipient);
      toMapResult.put("company", company);
      toMapResult.put("phoneNumber", phoneNumber);
      return toMapResult;
    }
    static @NonNull ProfileAddressInterface fromMap(@NonNull Map<String, Object> map) {
      ProfileAddressInterface pigeonResult = new ProfileAddressInterface();
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      Object isDefault = map.get("isDefault");
      pigeonResult.setIsDefault((Boolean)isDefault);
      Object addressType = map.get("addressType");
      pigeonResult.setAddressType(addressType == null ? null : ProfileAddressTypeInterface.values()[(int)addressType]);
      Object streetAddress = map.get("streetAddress");
      pigeonResult.setStreetAddress((String)streetAddress);
      Object locality = map.get("locality");
      pigeonResult.setLocality((String)locality);
      Object region = map.get("region");
      pigeonResult.setRegion((String)region);
      Object postalCode = map.get("postalCode");
      pigeonResult.setPostalCode((String)postalCode);
      Object country = map.get("country");
      pigeonResult.setCountry((String)country);
      Object raw = map.get("raw");
      pigeonResult.setRaw((String)raw);
      Object deliveryNote = map.get("deliveryNote");
      pigeonResult.setDeliveryNote((String)deliveryNote);
      Object recipient = map.get("recipient");
      pigeonResult.setRecipient((String)recipient);
      Object company = map.get("company");
      pigeonResult.setCompany((String)company);
      Object phoneNumber = map.get("phoneNumber");
      pigeonResult.setPhoneNumber((String)phoneNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ConsentInterface {
    private @NonNull Boolean granted;
    public @NonNull Boolean getGranted() { return granted; }
    public void setGranted(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"granted\" is null.");
      }
      this.granted = setterArg;
    }

    private @Nullable String consentType;
    public @Nullable String getConsentType() { return consentType; }
    public void setConsentType(@Nullable String setterArg) {
      this.consentType = setterArg;
    }

    private @NonNull String date;
    public @NonNull String getDate() { return date; }
    public void setDate(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"date\" is null.");
      }
      this.date = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ConsentInterface() {}
    public static final class Builder {
      private @Nullable Boolean granted;
      public @NonNull Builder setGranted(@NonNull Boolean setterArg) {
        this.granted = setterArg;
        return this;
      }
      private @Nullable String consentType;
      public @NonNull Builder setConsentType(@Nullable String setterArg) {
        this.consentType = setterArg;
        return this;
      }
      private @Nullable String date;
      public @NonNull Builder setDate(@NonNull String setterArg) {
        this.date = setterArg;
        return this;
      }
      public @NonNull ConsentInterface build() {
        ConsentInterface pigeonReturn = new ConsentInterface();
        pigeonReturn.setGranted(granted);
        pigeonReturn.setConsentType(consentType);
        pigeonReturn.setDate(date);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("granted", granted);
      toMapResult.put("consentType", consentType);
      toMapResult.put("date", date);
      return toMapResult;
    }
    static @NonNull ConsentInterface fromMap(@NonNull Map<String, Object> map) {
      ConsentInterface pigeonResult = new ConsentInterface();
      Object granted = map.get("granted");
      pigeonResult.setGranted((Boolean)granted);
      Object consentType = map.get("consentType");
      pigeonResult.setConsentType((String)consentType);
      Object date = map.get("date");
      pigeonResult.setDate((String)date);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ProfileSignupRequestInterface {
    private @NonNull String password;
    public @NonNull String getPassword() { return password; }
    public void setPassword(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"password\" is null.");
      }
      this.password = setterArg;
    }

    private @Nullable String email;
    public @Nullable String getEmail() { return email; }
    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String phoneNumber;
    public @Nullable String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable String givenName;
    public @Nullable String getGivenName() { return givenName; }
    public void setGivenName(@Nullable String setterArg) {
      this.givenName = setterArg;
    }

    private @Nullable String middleName;
    public @Nullable String getMiddleName() { return middleName; }
    public void setMiddleName(@Nullable String setterArg) {
      this.middleName = setterArg;
    }

    private @Nullable String familyName;
    public @Nullable String getFamilyName() { return familyName; }
    public void setFamilyName(@Nullable String setterArg) {
      this.familyName = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String nickname;
    public @Nullable String getNickname() { return nickname; }
    public void setNickname(@Nullable String setterArg) {
      this.nickname = setterArg;
    }

    private @Nullable String birthdate;
    public @Nullable String getBirthdate() { return birthdate; }
    public void setBirthdate(@Nullable String setterArg) {
      this.birthdate = setterArg;
    }

    private @Nullable String profileURL;
    public @Nullable String getProfileURL() { return profileURL; }
    public void setProfileURL(@Nullable String setterArg) {
      this.profileURL = setterArg;
    }

    private @Nullable String picture;
    public @Nullable String getPicture() { return picture; }
    public void setPicture(@Nullable String setterArg) {
      this.picture = setterArg;
    }

    private @Nullable String username;
    public @Nullable String getUsername() { return username; }
    public void setUsername(@Nullable String setterArg) {
      this.username = setterArg;
    }

    private @Nullable String gender;
    public @Nullable String getGender() { return gender; }
    public void setGender(@Nullable String setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String company;
    public @Nullable String getCompany() { return company; }
    public void setCompany(@Nullable String setterArg) {
      this.company = setterArg;
    }

    private @Nullable List<ProfileAddressInterface> addresses;
    public @Nullable List<ProfileAddressInterface> getAddresses() { return addresses; }
    public void setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
      this.addresses = setterArg;
    }

    private @Nullable String locale;
    public @Nullable String getLocale() { return locale; }
    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    private @Nullable String bio;
    public @Nullable String getBio() { return bio; }
    public void setBio(@Nullable String setterArg) {
      this.bio = setterArg;
    }

    private @Nullable Map<String, Object> customFields;
    public @Nullable Map<String, Object> getCustomFields() { return customFields; }
    public void setCustomFields(@Nullable Map<String, Object> setterArg) {
      this.customFields = setterArg;
    }

    private @Nullable Map<String, ConsentInterface> consents;
    public @Nullable Map<String, ConsentInterface> getConsents() { return consents; }
    public void setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
      this.consents = setterArg;
    }

    private @Nullable Boolean liteOnly;
    public @Nullable Boolean getLiteOnly() { return liteOnly; }
    public void setLiteOnly(@Nullable Boolean setterArg) {
      this.liteOnly = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ProfileSignupRequestInterface() {}
    public static final class Builder {
      private @Nullable String password;
      public @NonNull Builder setPassword(@NonNull String setterArg) {
        this.password = setterArg;
        return this;
      }
      private @Nullable String email;
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }
      private @Nullable String phoneNumber;
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }
      private @Nullable String givenName;
      public @NonNull Builder setGivenName(@Nullable String setterArg) {
        this.givenName = setterArg;
        return this;
      }
      private @Nullable String middleName;
      public @NonNull Builder setMiddleName(@Nullable String setterArg) {
        this.middleName = setterArg;
        return this;
      }
      private @Nullable String familyName;
      public @NonNull Builder setFamilyName(@Nullable String setterArg) {
        this.familyName = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String nickname;
      public @NonNull Builder setNickname(@Nullable String setterArg) {
        this.nickname = setterArg;
        return this;
      }
      private @Nullable String birthdate;
      public @NonNull Builder setBirthdate(@Nullable String setterArg) {
        this.birthdate = setterArg;
        return this;
      }
      private @Nullable String profileURL;
      public @NonNull Builder setProfileURL(@Nullable String setterArg) {
        this.profileURL = setterArg;
        return this;
      }
      private @Nullable String picture;
      public @NonNull Builder setPicture(@Nullable String setterArg) {
        this.picture = setterArg;
        return this;
      }
      private @Nullable String username;
      public @NonNull Builder setUsername(@Nullable String setterArg) {
        this.username = setterArg;
        return this;
      }
      private @Nullable String gender;
      public @NonNull Builder setGender(@Nullable String setterArg) {
        this.gender = setterArg;
        return this;
      }
      private @Nullable String company;
      public @NonNull Builder setCompany(@Nullable String setterArg) {
        this.company = setterArg;
        return this;
      }
      private @Nullable List<ProfileAddressInterface> addresses;
      public @NonNull Builder setAddresses(@Nullable List<ProfileAddressInterface> setterArg) {
        this.addresses = setterArg;
        return this;
      }
      private @Nullable String locale;
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }
      private @Nullable String bio;
      public @NonNull Builder setBio(@Nullable String setterArg) {
        this.bio = setterArg;
        return this;
      }
      private @Nullable Map<String, Object> customFields;
      public @NonNull Builder setCustomFields(@Nullable Map<String, Object> setterArg) {
        this.customFields = setterArg;
        return this;
      }
      private @Nullable Map<String, ConsentInterface> consents;
      public @NonNull Builder setConsents(@Nullable Map<String, ConsentInterface> setterArg) {
        this.consents = setterArg;
        return this;
      }
      private @Nullable Boolean liteOnly;
      public @NonNull Builder setLiteOnly(@Nullable Boolean setterArg) {
        this.liteOnly = setterArg;
        return this;
      }
      public @NonNull ProfileSignupRequestInterface build() {
        ProfileSignupRequestInterface pigeonReturn = new ProfileSignupRequestInterface();
        pigeonReturn.setPassword(password);
        pigeonReturn.setEmail(email);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setGivenName(givenName);
        pigeonReturn.setMiddleName(middleName);
        pigeonReturn.setFamilyName(familyName);
        pigeonReturn.setName(name);
        pigeonReturn.setNickname(nickname);
        pigeonReturn.setBirthdate(birthdate);
        pigeonReturn.setProfileURL(profileURL);
        pigeonReturn.setPicture(picture);
        pigeonReturn.setUsername(username);
        pigeonReturn.setGender(gender);
        pigeonReturn.setCompany(company);
        pigeonReturn.setAddresses(addresses);
        pigeonReturn.setLocale(locale);
        pigeonReturn.setBio(bio);
        pigeonReturn.setCustomFields(customFields);
        pigeonReturn.setConsents(consents);
        pigeonReturn.setLiteOnly(liteOnly);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("password", password);
      toMapResult.put("email", email);
      toMapResult.put("phoneNumber", phoneNumber);
      toMapResult.put("givenName", givenName);
      toMapResult.put("middleName", middleName);
      toMapResult.put("familyName", familyName);
      toMapResult.put("name", name);
      toMapResult.put("nickname", nickname);
      toMapResult.put("birthdate", birthdate);
      toMapResult.put("profileURL", profileURL);
      toMapResult.put("picture", picture);
      toMapResult.put("username", username);
      toMapResult.put("gender", gender);
      toMapResult.put("company", company);
      toMapResult.put("addresses", addresses);
      toMapResult.put("locale", locale);
      toMapResult.put("bio", bio);
      toMapResult.put("customFields", customFields);
      toMapResult.put("consents", consents);
      toMapResult.put("liteOnly", liteOnly);
      return toMapResult;
    }
    static @NonNull ProfileSignupRequestInterface fromMap(@NonNull Map<String, Object> map) {
      ProfileSignupRequestInterface pigeonResult = new ProfileSignupRequestInterface();
      Object password = map.get("password");
      pigeonResult.setPassword((String)password);
      Object email = map.get("email");
      pigeonResult.setEmail((String)email);
      Object phoneNumber = map.get("phoneNumber");
      pigeonResult.setPhoneNumber((String)phoneNumber);
      Object givenName = map.get("givenName");
      pigeonResult.setGivenName((String)givenName);
      Object middleName = map.get("middleName");
      pigeonResult.setMiddleName((String)middleName);
      Object familyName = map.get("familyName");
      pigeonResult.setFamilyName((String)familyName);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object nickname = map.get("nickname");
      pigeonResult.setNickname((String)nickname);
      Object birthdate = map.get("birthdate");
      pigeonResult.setBirthdate((String)birthdate);
      Object profileURL = map.get("profileURL");
      pigeonResult.setProfileURL((String)profileURL);
      Object picture = map.get("picture");
      pigeonResult.setPicture((String)picture);
      Object username = map.get("username");
      pigeonResult.setUsername((String)username);
      Object gender = map.get("gender");
      pigeonResult.setGender((String)gender);
      Object company = map.get("company");
      pigeonResult.setCompany((String)company);
      Object addresses = map.get("addresses");
      pigeonResult.setAddresses((List<ProfileAddressInterface>)addresses);
      Object locale = map.get("locale");
      pigeonResult.setLocale((String)locale);
      Object bio = map.get("bio");
      pigeonResult.setBio((String)bio);
      Object customFields = map.get("customFields");
      pigeonResult.setCustomFields((Map<String, Object>)customFields);
      Object consents = map.get("consents");
      pigeonResult.setConsents((Map<String, ConsentInterface>)consents);
      Object liteOnly = map.get("liteOnly");
      pigeonResult.setLiteOnly((Boolean)liteOnly);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SignupRequestInterface {
    private @NonNull ReachFiveConfigInterface config;
    public @NonNull ReachFiveConfigInterface getConfig() { return config; }
    public void setConfig(@NonNull ReachFiveConfigInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"config\" is null.");
      }
      this.config = setterArg;
    }

    private @NonNull ProfileSignupRequestInterface profile;
    public @NonNull ProfileSignupRequestInterface getProfile() { return profile; }
    public void setProfile(@NonNull ProfileSignupRequestInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"profile\" is null.");
      }
      this.profile = setterArg;
    }

    private @Nullable String redirectUrl;
    public @Nullable String getRedirectUrl() { return redirectUrl; }
    public void setRedirectUrl(@Nullable String setterArg) {
      this.redirectUrl = setterArg;
    }

    private @Nullable List<String> scope;
    public @Nullable List<String> getScope() { return scope; }
    public void setScope(@Nullable List<String> setterArg) {
      this.scope = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SignupRequestInterface() {}
    public static final class Builder {
      private @Nullable ReachFiveConfigInterface config;
      public @NonNull Builder setConfig(@NonNull ReachFiveConfigInterface setterArg) {
        this.config = setterArg;
        return this;
      }
      private @Nullable ProfileSignupRequestInterface profile;
      public @NonNull Builder setProfile(@NonNull ProfileSignupRequestInterface setterArg) {
        this.profile = setterArg;
        return this;
      }
      private @Nullable String redirectUrl;
      public @NonNull Builder setRedirectUrl(@Nullable String setterArg) {
        this.redirectUrl = setterArg;
        return this;
      }
      private @Nullable List<String> scope;
      public @NonNull Builder setScope(@Nullable List<String> setterArg) {
        this.scope = setterArg;
        return this;
      }
      public @NonNull SignupRequestInterface build() {
        SignupRequestInterface pigeonReturn = new SignupRequestInterface();
        pigeonReturn.setConfig(config);
        pigeonReturn.setProfile(profile);
        pigeonReturn.setRedirectUrl(redirectUrl);
        pigeonReturn.setScope(scope);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("config", (config == null) ? null : config.toMap());
      toMapResult.put("profile", (profile == null) ? null : profile.toMap());
      toMapResult.put("redirectUrl", redirectUrl);
      toMapResult.put("scope", scope);
      return toMapResult;
    }
    static @NonNull SignupRequestInterface fromMap(@NonNull Map<String, Object> map) {
      SignupRequestInterface pigeonResult = new SignupRequestInterface();
      Object config = map.get("config");
      pigeonResult.setConfig((config == null) ? null : ReachFiveConfigInterface.fromMap((Map)config));
      Object profile = map.get("profile");
      pigeonResult.setProfile((profile == null) ? null : ProfileSignupRequestInterface.fromMap((Map)profile));
      Object redirectUrl = map.get("redirectUrl");
      pigeonResult.setRedirectUrl((String)redirectUrl);
      Object scope = map.get("scope");
      pigeonResult.setScope((List<String>)scope);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AddressInterface {
    private @Nullable String formatted;
    public @Nullable String getFormatted() { return formatted; }
    public void setFormatted(@Nullable String setterArg) {
      this.formatted = setterArg;
    }

    private @Nullable String streetAddress;
    public @Nullable String getStreetAddress() { return streetAddress; }
    public void setStreetAddress(@Nullable String setterArg) {
      this.streetAddress = setterArg;
    }

    private @Nullable String locality;
    public @Nullable String getLocality() { return locality; }
    public void setLocality(@Nullable String setterArg) {
      this.locality = setterArg;
    }

    private @Nullable String region;
    public @Nullable String getRegion() { return region; }
    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable String postalCode;
    public @Nullable String getPostalCode() { return postalCode; }
    public void setPostalCode(@Nullable String setterArg) {
      this.postalCode = setterArg;
    }

    private @Nullable String country;
    public @Nullable String getCountry() { return country; }
    public void setCountry(@Nullable String setterArg) {
      this.country = setterArg;
    }

    public static final class Builder {
      private @Nullable String formatted;
      public @NonNull Builder setFormatted(@Nullable String setterArg) {
        this.formatted = setterArg;
        return this;
      }
      private @Nullable String streetAddress;
      public @NonNull Builder setStreetAddress(@Nullable String setterArg) {
        this.streetAddress = setterArg;
        return this;
      }
      private @Nullable String locality;
      public @NonNull Builder setLocality(@Nullable String setterArg) {
        this.locality = setterArg;
        return this;
      }
      private @Nullable String region;
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable String postalCode;
      public @NonNull Builder setPostalCode(@Nullable String setterArg) {
        this.postalCode = setterArg;
        return this;
      }
      private @Nullable String country;
      public @NonNull Builder setCountry(@Nullable String setterArg) {
        this.country = setterArg;
        return this;
      }
      public @NonNull AddressInterface build() {
        AddressInterface pigeonReturn = new AddressInterface();
        pigeonReturn.setFormatted(formatted);
        pigeonReturn.setStreetAddress(streetAddress);
        pigeonReturn.setLocality(locality);
        pigeonReturn.setRegion(region);
        pigeonReturn.setPostalCode(postalCode);
        pigeonReturn.setCountry(country);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("formatted", formatted);
      toMapResult.put("streetAddress", streetAddress);
      toMapResult.put("locality", locality);
      toMapResult.put("region", region);
      toMapResult.put("postalCode", postalCode);
      toMapResult.put("country", country);
      return toMapResult;
    }
    static @NonNull AddressInterface fromMap(@NonNull Map<String, Object> map) {
      AddressInterface pigeonResult = new AddressInterface();
      Object formatted = map.get("formatted");
      pigeonResult.setFormatted((String)formatted);
      Object streetAddress = map.get("streetAddress");
      pigeonResult.setStreetAddress((String)streetAddress);
      Object locality = map.get("locality");
      pigeonResult.setLocality((String)locality);
      Object region = map.get("region");
      pigeonResult.setRegion((String)region);
      Object postalCode = map.get("postalCode");
      pigeonResult.setPostalCode((String)postalCode);
      Object country = map.get("country");
      pigeonResult.setCountry((String)country);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class OpenIdUserInterface {
    private @Nullable String id;
    public @Nullable String getId() { return id; }
    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String preferredUsername;
    public @Nullable String getPreferredUsername() { return preferredUsername; }
    public void setPreferredUsername(@Nullable String setterArg) {
      this.preferredUsername = setterArg;
    }

    private @Nullable String givenName;
    public @Nullable String getGivenName() { return givenName; }
    public void setGivenName(@Nullable String setterArg) {
      this.givenName = setterArg;
    }

    private @Nullable String familyName;
    public @Nullable String getFamilyName() { return familyName; }
    public void setFamilyName(@Nullable String setterArg) {
      this.familyName = setterArg;
    }

    private @Nullable String middleName;
    public @Nullable String getMiddleName() { return middleName; }
    public void setMiddleName(@Nullable String setterArg) {
      this.middleName = setterArg;
    }

    private @Nullable String nickname;
    public @Nullable String getNickname() { return nickname; }
    public void setNickname(@Nullable String setterArg) {
      this.nickname = setterArg;
    }

    private @Nullable String picture;
    public @Nullable String getPicture() { return picture; }
    public void setPicture(@Nullable String setterArg) {
      this.picture = setterArg;
    }

    private @Nullable String website;
    public @Nullable String getWebsite() { return website; }
    public void setWebsite(@Nullable String setterArg) {
      this.website = setterArg;
    }

    private @Nullable String email;
    public @Nullable String getEmail() { return email; }
    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable Boolean emailVerified;
    public @Nullable Boolean getEmailVerified() { return emailVerified; }
    public void setEmailVerified(@Nullable Boolean setterArg) {
      this.emailVerified = setterArg;
    }

    private @Nullable String gender;
    public @Nullable String getGender() { return gender; }
    public void setGender(@Nullable String setterArg) {
      this.gender = setterArg;
    }

    private @Nullable String zoneinfo;
    public @Nullable String getZoneinfo() { return zoneinfo; }
    public void setZoneinfo(@Nullable String setterArg) {
      this.zoneinfo = setterArg;
    }

    private @Nullable String locale;
    public @Nullable String getLocale() { return locale; }
    public void setLocale(@Nullable String setterArg) {
      this.locale = setterArg;
    }

    private @Nullable String phoneNumber;
    public @Nullable String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable Boolean phoneNumberVerified;
    public @Nullable Boolean getPhoneNumberVerified() { return phoneNumberVerified; }
    public void setPhoneNumberVerified(@Nullable Boolean setterArg) {
      this.phoneNumberVerified = setterArg;
    }

    private @Nullable AddressInterface address;
    public @Nullable AddressInterface getAddress() { return address; }
    public void setAddress(@Nullable AddressInterface setterArg) {
      this.address = setterArg;
    }

    private @Nullable String birthdate;
    public @Nullable String getBirthdate() { return birthdate; }
    public void setBirthdate(@Nullable String setterArg) {
      this.birthdate = setterArg;
    }

    private @Nullable String externalId;
    public @Nullable String getExternalId() { return externalId; }
    public void setExternalId(@Nullable String setterArg) {
      this.externalId = setterArg;
    }

    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String preferredUsername;
      public @NonNull Builder setPreferredUsername(@Nullable String setterArg) {
        this.preferredUsername = setterArg;
        return this;
      }
      private @Nullable String givenName;
      public @NonNull Builder setGivenName(@Nullable String setterArg) {
        this.givenName = setterArg;
        return this;
      }
      private @Nullable String familyName;
      public @NonNull Builder setFamilyName(@Nullable String setterArg) {
        this.familyName = setterArg;
        return this;
      }
      private @Nullable String middleName;
      public @NonNull Builder setMiddleName(@Nullable String setterArg) {
        this.middleName = setterArg;
        return this;
      }
      private @Nullable String nickname;
      public @NonNull Builder setNickname(@Nullable String setterArg) {
        this.nickname = setterArg;
        return this;
      }
      private @Nullable String picture;
      public @NonNull Builder setPicture(@Nullable String setterArg) {
        this.picture = setterArg;
        return this;
      }
      private @Nullable String website;
      public @NonNull Builder setWebsite(@Nullable String setterArg) {
        this.website = setterArg;
        return this;
      }
      private @Nullable String email;
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }
      private @Nullable Boolean emailVerified;
      public @NonNull Builder setEmailVerified(@Nullable Boolean setterArg) {
        this.emailVerified = setterArg;
        return this;
      }
      private @Nullable String gender;
      public @NonNull Builder setGender(@Nullable String setterArg) {
        this.gender = setterArg;
        return this;
      }
      private @Nullable String zoneinfo;
      public @NonNull Builder setZoneinfo(@Nullable String setterArg) {
        this.zoneinfo = setterArg;
        return this;
      }
      private @Nullable String locale;
      public @NonNull Builder setLocale(@Nullable String setterArg) {
        this.locale = setterArg;
        return this;
      }
      private @Nullable String phoneNumber;
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }
      private @Nullable Boolean phoneNumberVerified;
      public @NonNull Builder setPhoneNumberVerified(@Nullable Boolean setterArg) {
        this.phoneNumberVerified = setterArg;
        return this;
      }
      private @Nullable AddressInterface address;
      public @NonNull Builder setAddress(@Nullable AddressInterface setterArg) {
        this.address = setterArg;
        return this;
      }
      private @Nullable String birthdate;
      public @NonNull Builder setBirthdate(@Nullable String setterArg) {
        this.birthdate = setterArg;
        return this;
      }
      private @Nullable String externalId;
      public @NonNull Builder setExternalId(@Nullable String setterArg) {
        this.externalId = setterArg;
        return this;
      }
      public @NonNull OpenIdUserInterface build() {
        OpenIdUserInterface pigeonReturn = new OpenIdUserInterface();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        pigeonReturn.setPreferredUsername(preferredUsername);
        pigeonReturn.setGivenName(givenName);
        pigeonReturn.setFamilyName(familyName);
        pigeonReturn.setMiddleName(middleName);
        pigeonReturn.setNickname(nickname);
        pigeonReturn.setPicture(picture);
        pigeonReturn.setWebsite(website);
        pigeonReturn.setEmail(email);
        pigeonReturn.setEmailVerified(emailVerified);
        pigeonReturn.setGender(gender);
        pigeonReturn.setZoneinfo(zoneinfo);
        pigeonReturn.setLocale(locale);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setPhoneNumberVerified(phoneNumberVerified);
        pigeonReturn.setAddress(address);
        pigeonReturn.setBirthdate(birthdate);
        pigeonReturn.setExternalId(externalId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      toMapResult.put("preferredUsername", preferredUsername);
      toMapResult.put("givenName", givenName);
      toMapResult.put("familyName", familyName);
      toMapResult.put("middleName", middleName);
      toMapResult.put("nickname", nickname);
      toMapResult.put("picture", picture);
      toMapResult.put("website", website);
      toMapResult.put("email", email);
      toMapResult.put("emailVerified", emailVerified);
      toMapResult.put("gender", gender);
      toMapResult.put("zoneinfo", zoneinfo);
      toMapResult.put("locale", locale);
      toMapResult.put("phoneNumber", phoneNumber);
      toMapResult.put("phoneNumberVerified", phoneNumberVerified);
      toMapResult.put("address", (address == null) ? null : address.toMap());
      toMapResult.put("birthdate", birthdate);
      toMapResult.put("externalId", externalId);
      return toMapResult;
    }
    static @NonNull OpenIdUserInterface fromMap(@NonNull Map<String, Object> map) {
      OpenIdUserInterface pigeonResult = new OpenIdUserInterface();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object preferredUsername = map.get("preferredUsername");
      pigeonResult.setPreferredUsername((String)preferredUsername);
      Object givenName = map.get("givenName");
      pigeonResult.setGivenName((String)givenName);
      Object familyName = map.get("familyName");
      pigeonResult.setFamilyName((String)familyName);
      Object middleName = map.get("middleName");
      pigeonResult.setMiddleName((String)middleName);
      Object nickname = map.get("nickname");
      pigeonResult.setNickname((String)nickname);
      Object picture = map.get("picture");
      pigeonResult.setPicture((String)picture);
      Object website = map.get("website");
      pigeonResult.setWebsite((String)website);
      Object email = map.get("email");
      pigeonResult.setEmail((String)email);
      Object emailVerified = map.get("emailVerified");
      pigeonResult.setEmailVerified((Boolean)emailVerified);
      Object gender = map.get("gender");
      pigeonResult.setGender((String)gender);
      Object zoneinfo = map.get("zoneinfo");
      pigeonResult.setZoneinfo((String)zoneinfo);
      Object locale = map.get("locale");
      pigeonResult.setLocale((String)locale);
      Object phoneNumber = map.get("phoneNumber");
      pigeonResult.setPhoneNumber((String)phoneNumber);
      Object phoneNumberVerified = map.get("phoneNumberVerified");
      pigeonResult.setPhoneNumberVerified((Boolean)phoneNumberVerified);
      Object address = map.get("address");
      pigeonResult.setAddress((address == null) ? null : AddressInterface.fromMap((Map)address));
      Object birthdate = map.get("birthdate");
      pigeonResult.setBirthdate((String)birthdate);
      Object externalId = map.get("externalId");
      pigeonResult.setExternalId((String)externalId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AuthTokenInterface {
    private @Nullable String idToken;
    public @Nullable String getIdToken() { return idToken; }
    public void setIdToken(@Nullable String setterArg) {
      this.idToken = setterArg;
    }

    private @NonNull String accessToken;
    public @NonNull String getAccessToken() { return accessToken; }
    public void setAccessToken(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"accessToken\" is null.");
      }
      this.accessToken = setterArg;
    }

    private @Nullable String refreshToken;
    public @Nullable String getRefreshToken() { return refreshToken; }
    public void setRefreshToken(@Nullable String setterArg) {
      this.refreshToken = setterArg;
    }

    private @Nullable String tokenType;
    public @Nullable String getTokenType() { return tokenType; }
    public void setTokenType(@Nullable String setterArg) {
      this.tokenType = setterArg;
    }

    private @Nullable Long expiresIn;
    public @Nullable Long getExpiresIn() { return expiresIn; }
    public void setExpiresIn(@Nullable Long setterArg) {
      this.expiresIn = setterArg;
    }

    private @Nullable OpenIdUserInterface user;
    public @Nullable OpenIdUserInterface getUser() { return user; }
    public void setUser(@Nullable OpenIdUserInterface setterArg) {
      this.user = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AuthTokenInterface() {}
    public static final class Builder {
      private @Nullable String idToken;
      public @NonNull Builder setIdToken(@Nullable String setterArg) {
        this.idToken = setterArg;
        return this;
      }
      private @Nullable String accessToken;
      public @NonNull Builder setAccessToken(@NonNull String setterArg) {
        this.accessToken = setterArg;
        return this;
      }
      private @Nullable String refreshToken;
      public @NonNull Builder setRefreshToken(@Nullable String setterArg) {
        this.refreshToken = setterArg;
        return this;
      }
      private @Nullable String tokenType;
      public @NonNull Builder setTokenType(@Nullable String setterArg) {
        this.tokenType = setterArg;
        return this;
      }
      private @Nullable Long expiresIn;
      public @NonNull Builder setExpiresIn(@Nullable Long setterArg) {
        this.expiresIn = setterArg;
        return this;
      }
      private @Nullable OpenIdUserInterface user;
      public @NonNull Builder setUser(@Nullable OpenIdUserInterface setterArg) {
        this.user = setterArg;
        return this;
      }
      public @NonNull AuthTokenInterface build() {
        AuthTokenInterface pigeonReturn = new AuthTokenInterface();
        pigeonReturn.setIdToken(idToken);
        pigeonReturn.setAccessToken(accessToken);
        pigeonReturn.setRefreshToken(refreshToken);
        pigeonReturn.setTokenType(tokenType);
        pigeonReturn.setExpiresIn(expiresIn);
        pigeonReturn.setUser(user);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("idToken", idToken);
      toMapResult.put("accessToken", accessToken);
      toMapResult.put("refreshToken", refreshToken);
      toMapResult.put("tokenType", tokenType);
      toMapResult.put("expiresIn", expiresIn);
      toMapResult.put("user", (user == null) ? null : user.toMap());
      return toMapResult;
    }
    static @NonNull AuthTokenInterface fromMap(@NonNull Map<String, Object> map) {
      AuthTokenInterface pigeonResult = new AuthTokenInterface();
      Object idToken = map.get("idToken");
      pigeonResult.setIdToken((String)idToken);
      Object accessToken = map.get("accessToken");
      pigeonResult.setAccessToken((String)accessToken);
      Object refreshToken = map.get("refreshToken");
      pigeonResult.setRefreshToken((String)refreshToken);
      Object tokenType = map.get("tokenType");
      pigeonResult.setTokenType((String)tokenType);
      Object expiresIn = map.get("expiresIn");
      pigeonResult.setExpiresIn((expiresIn == null) ? null : ((expiresIn instanceof Integer) ? (Integer)expiresIn : (Long)expiresIn));
      Object user = map.get("user");
      pigeonResult.setUser((user == null) ? null : OpenIdUserInterface.fromMap((Map)user));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RefreshAccessTokenRequestInterface {
    private @NonNull ReachFiveConfigInterface config;
    public @NonNull ReachFiveConfigInterface getConfig() { return config; }
    public void setConfig(@NonNull ReachFiveConfigInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"config\" is null.");
      }
      this.config = setterArg;
    }

    private @NonNull AuthTokenInterface authToken;
    public @NonNull AuthTokenInterface getAuthToken() { return authToken; }
    public void setAuthToken(@NonNull AuthTokenInterface setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"authToken\" is null.");
      }
      this.authToken = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private RefreshAccessTokenRequestInterface() {}
    public static final class Builder {
      private @Nullable ReachFiveConfigInterface config;
      public @NonNull Builder setConfig(@NonNull ReachFiveConfigInterface setterArg) {
        this.config = setterArg;
        return this;
      }
      private @Nullable AuthTokenInterface authToken;
      public @NonNull Builder setAuthToken(@NonNull AuthTokenInterface setterArg) {
        this.authToken = setterArg;
        return this;
      }
      public @NonNull RefreshAccessTokenRequestInterface build() {
        RefreshAccessTokenRequestInterface pigeonReturn = new RefreshAccessTokenRequestInterface();
        pigeonReturn.setConfig(config);
        pigeonReturn.setAuthToken(authToken);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("config", (config == null) ? null : config.toMap());
      toMapResult.put("authToken", (authToken == null) ? null : authToken.toMap());
      return toMapResult;
    }
    static @NonNull RefreshAccessTokenRequestInterface fromMap(@NonNull Map<String, Object> map) {
      RefreshAccessTokenRequestInterface pigeonResult = new RefreshAccessTokenRequestInterface();
      Object config = map.get("config");
      pigeonResult.setConfig((config == null) ? null : ReachFiveConfigInterface.fromMap((Map)config));
      Object authToken = map.get("authToken");
      pigeonResult.setAuthToken((authToken == null) ? null : AuthTokenInterface.fromMap((Map)authToken));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class ReachFiveHostApiCodec extends StandardMessageCodec {
    public static final ReachFiveHostApiCodec INSTANCE = new ReachFiveHostApiCodec();
    private ReachFiveHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AddressInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AuthTokenInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ConsentInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return OpenIdUserInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ProfileAddressInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ProfileSignupRequestInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ReachFiveConfigInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return RefreshAccessTokenRequestInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return SignupRequestInterface.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AddressInterface) {
        stream.write(128);
        writeValue(stream, ((AddressInterface) value).toMap());
      } else 
      if (value instanceof AuthTokenInterface) {
        stream.write(129);
        writeValue(stream, ((AuthTokenInterface) value).toMap());
      } else 
      if (value instanceof ConsentInterface) {
        stream.write(130);
        writeValue(stream, ((ConsentInterface) value).toMap());
      } else 
      if (value instanceof OpenIdUserInterface) {
        stream.write(131);
        writeValue(stream, ((OpenIdUserInterface) value).toMap());
      } else 
      if (value instanceof ProfileAddressInterface) {
        stream.write(132);
        writeValue(stream, ((ProfileAddressInterface) value).toMap());
      } else 
      if (value instanceof ProfileSignupRequestInterface) {
        stream.write(133);
        writeValue(stream, ((ProfileSignupRequestInterface) value).toMap());
      } else 
      if (value instanceof ReachFiveConfigInterface) {
        stream.write(134);
        writeValue(stream, ((ReachFiveConfigInterface) value).toMap());
      } else 
      if (value instanceof RefreshAccessTokenRequestInterface) {
        stream.write(135);
        writeValue(stream, ((RefreshAccessTokenRequestInterface) value).toMap());
      } else 
      if (value instanceof SignupRequestInterface) {
        stream.write(136);
        writeValue(stream, ((SignupRequestInterface) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ReachFiveHostApi {
    void initialize(@NonNull ReachFiveConfigInterface config, Result<ReachFiveConfigInterface> result);
    void signup(@NonNull SignupRequestInterface request, Result<AuthTokenInterface> result);
    void refreshAccessToken(@NonNull RefreshAccessTokenRequestInterface request, Result<AuthTokenInterface> result);

    /** The codec used by ReachFiveHostApi. */
    static MessageCodec<Object> getCodec() {
      return ReachFiveHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ReachFiveHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ReachFiveHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ReachFiveConfigInterface configArg = (ReachFiveConfigInterface)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              Result<ReachFiveConfigInterface> resultCallback = new Result<ReachFiveConfigInterface>() {
                public void success(ReachFiveConfigInterface result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.initialize(configArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.signup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SignupRequestInterface requestArg = (SignupRequestInterface)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<AuthTokenInterface> resultCallback = new Result<AuthTokenInterface>() {
                public void success(AuthTokenInterface result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.signup(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              RefreshAccessTokenRequestInterface requestArg = (RefreshAccessTokenRequestInterface)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              Result<AuthTokenInterface> resultCallback = new Result<AuthTokenInterface>() {
                public void success(AuthTokenInterface result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.refreshAccessToken(requestArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
