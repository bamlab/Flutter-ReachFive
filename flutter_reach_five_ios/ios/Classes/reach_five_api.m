// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "reach_five_api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface ReachFiveConfigInterface ()
+ (ReachFiveConfigInterface *)fromMap:(NSDictionary *)dict;
+ (nullable ReachFiveConfigInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ProfileAddressInterface ()
+ (ProfileAddressInterface *)fromMap:(NSDictionary *)dict;
+ (nullable ProfileAddressInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ConsentInterface ()
+ (ConsentInterface *)fromMap:(NSDictionary *)dict;
+ (nullable ConsentInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ProfileSignupRequestInterface ()
+ (ProfileSignupRequestInterface *)fromMap:(NSDictionary *)dict;
+ (nullable ProfileSignupRequestInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SignupRequestInterface ()
+ (SignupRequestInterface *)fromMap:(NSDictionary *)dict;
+ (nullable SignupRequestInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface AddressInterface ()
+ (AddressInterface *)fromMap:(NSDictionary *)dict;
+ (nullable AddressInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface OpenIdUserInterface ()
+ (OpenIdUserInterface *)fromMap:(NSDictionary *)dict;
+ (nullable OpenIdUserInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface AuthTokenInterface ()
+ (AuthTokenInterface *)fromMap:(NSDictionary *)dict;
+ (nullable AuthTokenInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LoginWithPasswordRequestInterface ()
+ (LoginWithPasswordRequestInterface *)fromMap:(NSDictionary *)dict;
+ (nullable LoginWithPasswordRequestInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RefreshAccessTokenRequestInterface ()
+ (RefreshAccessTokenRequestInterface *)fromMap:(NSDictionary *)dict;
+ (nullable RefreshAccessTokenRequestInterface *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation ReachFiveConfigInterface
+ (instancetype)makeWithDomain:(NSString *)domain
    clientId:(NSString *)clientId
    scheme:(NSString *)scheme {
  ReachFiveConfigInterface* pigeonResult = [[ReachFiveConfigInterface alloc] init];
  pigeonResult.domain = domain;
  pigeonResult.clientId = clientId;
  pigeonResult.scheme = scheme;
  return pigeonResult;
}
+ (ReachFiveConfigInterface *)fromMap:(NSDictionary *)dict {
  ReachFiveConfigInterface *pigeonResult = [[ReachFiveConfigInterface alloc] init];
  pigeonResult.domain = GetNullableObject(dict, @"domain");
  NSAssert(pigeonResult.domain != nil, @"");
  pigeonResult.clientId = GetNullableObject(dict, @"clientId");
  NSAssert(pigeonResult.clientId != nil, @"");
  pigeonResult.scheme = GetNullableObject(dict, @"scheme");
  NSAssert(pigeonResult.scheme != nil, @"");
  return pigeonResult;
}
+ (nullable ReachFiveConfigInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ReachFiveConfigInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"domain" : (self.domain ?: [NSNull null]),
    @"clientId" : (self.clientId ?: [NSNull null]),
    @"scheme" : (self.scheme ?: [NSNull null]),
  };
}
@end

@implementation ProfileAddressInterface
+ (instancetype)makeWithTitle:(nullable NSString *)title
    isDefault:(nullable NSNumber *)isDefault
    addressType:(ProfileAddressTypeInterface)addressType
    streetAddress:(nullable NSString *)streetAddress
    locality:(nullable NSString *)locality
    region:(nullable NSString *)region
    postalCode:(nullable NSString *)postalCode
    country:(nullable NSString *)country
    raw:(nullable NSString *)raw
    deliveryNote:(nullable NSString *)deliveryNote
    recipient:(nullable NSString *)recipient
    company:(nullable NSString *)company
    phoneNumber:(nullable NSString *)phoneNumber {
  ProfileAddressInterface* pigeonResult = [[ProfileAddressInterface alloc] init];
  pigeonResult.title = title;
  pigeonResult.isDefault = isDefault;
  pigeonResult.addressType = addressType;
  pigeonResult.streetAddress = streetAddress;
  pigeonResult.locality = locality;
  pigeonResult.region = region;
  pigeonResult.postalCode = postalCode;
  pigeonResult.country = country;
  pigeonResult.raw = raw;
  pigeonResult.deliveryNote = deliveryNote;
  pigeonResult.recipient = recipient;
  pigeonResult.company = company;
  pigeonResult.phoneNumber = phoneNumber;
  return pigeonResult;
}
+ (ProfileAddressInterface *)fromMap:(NSDictionary *)dict {
  ProfileAddressInterface *pigeonResult = [[ProfileAddressInterface alloc] init];
  pigeonResult.title = GetNullableObject(dict, @"title");
  pigeonResult.isDefault = GetNullableObject(dict, @"isDefault");
  pigeonResult.addressType = [GetNullableObject(dict, @"addressType") integerValue];
  pigeonResult.streetAddress = GetNullableObject(dict, @"streetAddress");
  pigeonResult.locality = GetNullableObject(dict, @"locality");
  pigeonResult.region = GetNullableObject(dict, @"region");
  pigeonResult.postalCode = GetNullableObject(dict, @"postalCode");
  pigeonResult.country = GetNullableObject(dict, @"country");
  pigeonResult.raw = GetNullableObject(dict, @"raw");
  pigeonResult.deliveryNote = GetNullableObject(dict, @"deliveryNote");
  pigeonResult.recipient = GetNullableObject(dict, @"recipient");
  pigeonResult.company = GetNullableObject(dict, @"company");
  pigeonResult.phoneNumber = GetNullableObject(dict, @"phoneNumber");
  return pigeonResult;
}
+ (nullable ProfileAddressInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ProfileAddressInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"title" : (self.title ?: [NSNull null]),
    @"isDefault" : (self.isDefault ?: [NSNull null]),
    @"addressType" : @(self.addressType),
    @"streetAddress" : (self.streetAddress ?: [NSNull null]),
    @"locality" : (self.locality ?: [NSNull null]),
    @"region" : (self.region ?: [NSNull null]),
    @"postalCode" : (self.postalCode ?: [NSNull null]),
    @"country" : (self.country ?: [NSNull null]),
    @"raw" : (self.raw ?: [NSNull null]),
    @"deliveryNote" : (self.deliveryNote ?: [NSNull null]),
    @"recipient" : (self.recipient ?: [NSNull null]),
    @"company" : (self.company ?: [NSNull null]),
    @"phoneNumber" : (self.phoneNumber ?: [NSNull null]),
  };
}
@end

@implementation ConsentInterface
+ (instancetype)makeWithGranted:(NSNumber *)granted
    consentType:(nullable NSString *)consentType
    date:(NSString *)date {
  ConsentInterface* pigeonResult = [[ConsentInterface alloc] init];
  pigeonResult.granted = granted;
  pigeonResult.consentType = consentType;
  pigeonResult.date = date;
  return pigeonResult;
}
+ (ConsentInterface *)fromMap:(NSDictionary *)dict {
  ConsentInterface *pigeonResult = [[ConsentInterface alloc] init];
  pigeonResult.granted = GetNullableObject(dict, @"granted");
  NSAssert(pigeonResult.granted != nil, @"");
  pigeonResult.consentType = GetNullableObject(dict, @"consentType");
  pigeonResult.date = GetNullableObject(dict, @"date");
  NSAssert(pigeonResult.date != nil, @"");
  return pigeonResult;
}
+ (nullable ConsentInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ConsentInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"granted" : (self.granted ?: [NSNull null]),
    @"consentType" : (self.consentType ?: [NSNull null]),
    @"date" : (self.date ?: [NSNull null]),
  };
}
@end

@implementation ProfileSignupRequestInterface
+ (instancetype)makeWithPassword:(NSString *)password
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber
    givenName:(nullable NSString *)givenName
    middleName:(nullable NSString *)middleName
    familyName:(nullable NSString *)familyName
    name:(nullable NSString *)name
    nickname:(nullable NSString *)nickname
    birthdate:(nullable NSString *)birthdate
    profileURL:(nullable NSString *)profileURL
    picture:(nullable NSString *)picture
    username:(nullable NSString *)username
    gender:(nullable NSString *)gender
    company:(nullable NSString *)company
    addresses:(nullable NSArray<ProfileAddressInterface *> *)addresses
    locale:(nullable NSString *)locale
    bio:(nullable NSString *)bio
    customFields:(nullable NSDictionary<NSString *, id> *)customFields
    consents:(nullable NSDictionary<NSString *, ConsentInterface *> *)consents
    liteOnly:(nullable NSNumber *)liteOnly {
  ProfileSignupRequestInterface* pigeonResult = [[ProfileSignupRequestInterface alloc] init];
  pigeonResult.password = password;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.givenName = givenName;
  pigeonResult.middleName = middleName;
  pigeonResult.familyName = familyName;
  pigeonResult.name = name;
  pigeonResult.nickname = nickname;
  pigeonResult.birthdate = birthdate;
  pigeonResult.profileURL = profileURL;
  pigeonResult.picture = picture;
  pigeonResult.username = username;
  pigeonResult.gender = gender;
  pigeonResult.company = company;
  pigeonResult.addresses = addresses;
  pigeonResult.locale = locale;
  pigeonResult.bio = bio;
  pigeonResult.customFields = customFields;
  pigeonResult.consents = consents;
  pigeonResult.liteOnly = liteOnly;
  return pigeonResult;
}
+ (ProfileSignupRequestInterface *)fromMap:(NSDictionary *)dict {
  ProfileSignupRequestInterface *pigeonResult = [[ProfileSignupRequestInterface alloc] init];
  pigeonResult.password = GetNullableObject(dict, @"password");
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.email = GetNullableObject(dict, @"email");
  pigeonResult.phoneNumber = GetNullableObject(dict, @"phoneNumber");
  pigeonResult.givenName = GetNullableObject(dict, @"givenName");
  pigeonResult.middleName = GetNullableObject(dict, @"middleName");
  pigeonResult.familyName = GetNullableObject(dict, @"familyName");
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.nickname = GetNullableObject(dict, @"nickname");
  pigeonResult.birthdate = GetNullableObject(dict, @"birthdate");
  pigeonResult.profileURL = GetNullableObject(dict, @"profileURL");
  pigeonResult.picture = GetNullableObject(dict, @"picture");
  pigeonResult.username = GetNullableObject(dict, @"username");
  pigeonResult.gender = GetNullableObject(dict, @"gender");
  pigeonResult.company = GetNullableObject(dict, @"company");
  pigeonResult.addresses = GetNullableObject(dict, @"addresses");
  pigeonResult.locale = GetNullableObject(dict, @"locale");
  pigeonResult.bio = GetNullableObject(dict, @"bio");
  pigeonResult.customFields = GetNullableObject(dict, @"customFields");
  pigeonResult.consents = GetNullableObject(dict, @"consents");
  pigeonResult.liteOnly = GetNullableObject(dict, @"liteOnly");
  return pigeonResult;
}
+ (nullable ProfileSignupRequestInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ProfileSignupRequestInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"password" : (self.password ?: [NSNull null]),
    @"email" : (self.email ?: [NSNull null]),
    @"phoneNumber" : (self.phoneNumber ?: [NSNull null]),
    @"givenName" : (self.givenName ?: [NSNull null]),
    @"middleName" : (self.middleName ?: [NSNull null]),
    @"familyName" : (self.familyName ?: [NSNull null]),
    @"name" : (self.name ?: [NSNull null]),
    @"nickname" : (self.nickname ?: [NSNull null]),
    @"birthdate" : (self.birthdate ?: [NSNull null]),
    @"profileURL" : (self.profileURL ?: [NSNull null]),
    @"picture" : (self.picture ?: [NSNull null]),
    @"username" : (self.username ?: [NSNull null]),
    @"gender" : (self.gender ?: [NSNull null]),
    @"company" : (self.company ?: [NSNull null]),
    @"addresses" : (self.addresses ?: [NSNull null]),
    @"locale" : (self.locale ?: [NSNull null]),
    @"bio" : (self.bio ?: [NSNull null]),
    @"customFields" : (self.customFields ?: [NSNull null]),
    @"consents" : (self.consents ?: [NSNull null]),
    @"liteOnly" : (self.liteOnly ?: [NSNull null]),
  };
}
@end

@implementation SignupRequestInterface
+ (instancetype)makeWithConfig:(ReachFiveConfigInterface *)config
    profile:(ProfileSignupRequestInterface *)profile
    redirectUrl:(nullable NSString *)redirectUrl
    scope:(nullable NSArray<NSString *> *)scope {
  SignupRequestInterface* pigeonResult = [[SignupRequestInterface alloc] init];
  pigeonResult.config = config;
  pigeonResult.profile = profile;
  pigeonResult.redirectUrl = redirectUrl;
  pigeonResult.scope = scope;
  return pigeonResult;
}
+ (SignupRequestInterface *)fromMap:(NSDictionary *)dict {
  SignupRequestInterface *pigeonResult = [[SignupRequestInterface alloc] init];
  pigeonResult.config = [ReachFiveConfigInterface nullableFromMap:GetNullableObject(dict, @"config")];
  NSAssert(pigeonResult.config != nil, @"");
  pigeonResult.profile = [ProfileSignupRequestInterface nullableFromMap:GetNullableObject(dict, @"profile")];
  NSAssert(pigeonResult.profile != nil, @"");
  pigeonResult.redirectUrl = GetNullableObject(dict, @"redirectUrl");
  pigeonResult.scope = GetNullableObject(dict, @"scope");
  return pigeonResult;
}
+ (nullable SignupRequestInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SignupRequestInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"config" : (self.config ? [self.config toMap] : [NSNull null]),
    @"profile" : (self.profile ? [self.profile toMap] : [NSNull null]),
    @"redirectUrl" : (self.redirectUrl ?: [NSNull null]),
    @"scope" : (self.scope ?: [NSNull null]),
  };
}
@end

@implementation AddressInterface
+ (instancetype)makeWithFormatted:(nullable NSString *)formatted
    streetAddress:(nullable NSString *)streetAddress
    locality:(nullable NSString *)locality
    region:(nullable NSString *)region
    postalCode:(nullable NSString *)postalCode
    country:(nullable NSString *)country {
  AddressInterface* pigeonResult = [[AddressInterface alloc] init];
  pigeonResult.formatted = formatted;
  pigeonResult.streetAddress = streetAddress;
  pigeonResult.locality = locality;
  pigeonResult.region = region;
  pigeonResult.postalCode = postalCode;
  pigeonResult.country = country;
  return pigeonResult;
}
+ (AddressInterface *)fromMap:(NSDictionary *)dict {
  AddressInterface *pigeonResult = [[AddressInterface alloc] init];
  pigeonResult.formatted = GetNullableObject(dict, @"formatted");
  pigeonResult.streetAddress = GetNullableObject(dict, @"streetAddress");
  pigeonResult.locality = GetNullableObject(dict, @"locality");
  pigeonResult.region = GetNullableObject(dict, @"region");
  pigeonResult.postalCode = GetNullableObject(dict, @"postalCode");
  pigeonResult.country = GetNullableObject(dict, @"country");
  return pigeonResult;
}
+ (nullable AddressInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [AddressInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"formatted" : (self.formatted ?: [NSNull null]),
    @"streetAddress" : (self.streetAddress ?: [NSNull null]),
    @"locality" : (self.locality ?: [NSNull null]),
    @"region" : (self.region ?: [NSNull null]),
    @"postalCode" : (self.postalCode ?: [NSNull null]),
    @"country" : (self.country ?: [NSNull null]),
  };
}
@end

@implementation OpenIdUserInterface
+ (instancetype)makeWithId:(nullable NSString *)id
    name:(nullable NSString *)name
    preferredUsername:(nullable NSString *)preferredUsername
    givenName:(nullable NSString *)givenName
    familyName:(nullable NSString *)familyName
    middleName:(nullable NSString *)middleName
    nickname:(nullable NSString *)nickname
    picture:(nullable NSString *)picture
    website:(nullable NSString *)website
    email:(nullable NSString *)email
    emailVerified:(nullable NSNumber *)emailVerified
    gender:(nullable NSString *)gender
    zoneinfo:(nullable NSString *)zoneinfo
    locale:(nullable NSString *)locale
    phoneNumber:(nullable NSString *)phoneNumber
    phoneNumberVerified:(nullable NSNumber *)phoneNumberVerified
    address:(nullable AddressInterface *)address
    birthdate:(nullable NSString *)birthdate
    externalId:(nullable NSString *)externalId {
  OpenIdUserInterface* pigeonResult = [[OpenIdUserInterface alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.preferredUsername = preferredUsername;
  pigeonResult.givenName = givenName;
  pigeonResult.familyName = familyName;
  pigeonResult.middleName = middleName;
  pigeonResult.nickname = nickname;
  pigeonResult.picture = picture;
  pigeonResult.website = website;
  pigeonResult.email = email;
  pigeonResult.emailVerified = emailVerified;
  pigeonResult.gender = gender;
  pigeonResult.zoneinfo = zoneinfo;
  pigeonResult.locale = locale;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.phoneNumberVerified = phoneNumberVerified;
  pigeonResult.address = address;
  pigeonResult.birthdate = birthdate;
  pigeonResult.externalId = externalId;
  return pigeonResult;
}
+ (OpenIdUserInterface *)fromMap:(NSDictionary *)dict {
  OpenIdUserInterface *pigeonResult = [[OpenIdUserInterface alloc] init];
  pigeonResult.id = GetNullableObject(dict, @"id");
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.preferredUsername = GetNullableObject(dict, @"preferredUsername");
  pigeonResult.givenName = GetNullableObject(dict, @"givenName");
  pigeonResult.familyName = GetNullableObject(dict, @"familyName");
  pigeonResult.middleName = GetNullableObject(dict, @"middleName");
  pigeonResult.nickname = GetNullableObject(dict, @"nickname");
  pigeonResult.picture = GetNullableObject(dict, @"picture");
  pigeonResult.website = GetNullableObject(dict, @"website");
  pigeonResult.email = GetNullableObject(dict, @"email");
  pigeonResult.emailVerified = GetNullableObject(dict, @"emailVerified");
  pigeonResult.gender = GetNullableObject(dict, @"gender");
  pigeonResult.zoneinfo = GetNullableObject(dict, @"zoneinfo");
  pigeonResult.locale = GetNullableObject(dict, @"locale");
  pigeonResult.phoneNumber = GetNullableObject(dict, @"phoneNumber");
  pigeonResult.phoneNumberVerified = GetNullableObject(dict, @"phoneNumberVerified");
  pigeonResult.address = [AddressInterface nullableFromMap:GetNullableObject(dict, @"address")];
  pigeonResult.birthdate = GetNullableObject(dict, @"birthdate");
  pigeonResult.externalId = GetNullableObject(dict, @"externalId");
  return pigeonResult;
}
+ (nullable OpenIdUserInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [OpenIdUserInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"id" : (self.id ?: [NSNull null]),
    @"name" : (self.name ?: [NSNull null]),
    @"preferredUsername" : (self.preferredUsername ?: [NSNull null]),
    @"givenName" : (self.givenName ?: [NSNull null]),
    @"familyName" : (self.familyName ?: [NSNull null]),
    @"middleName" : (self.middleName ?: [NSNull null]),
    @"nickname" : (self.nickname ?: [NSNull null]),
    @"picture" : (self.picture ?: [NSNull null]),
    @"website" : (self.website ?: [NSNull null]),
    @"email" : (self.email ?: [NSNull null]),
    @"emailVerified" : (self.emailVerified ?: [NSNull null]),
    @"gender" : (self.gender ?: [NSNull null]),
    @"zoneinfo" : (self.zoneinfo ?: [NSNull null]),
    @"locale" : (self.locale ?: [NSNull null]),
    @"phoneNumber" : (self.phoneNumber ?: [NSNull null]),
    @"phoneNumberVerified" : (self.phoneNumberVerified ?: [NSNull null]),
    @"address" : (self.address ? [self.address toMap] : [NSNull null]),
    @"birthdate" : (self.birthdate ?: [NSNull null]),
    @"externalId" : (self.externalId ?: [NSNull null]),
  };
}
@end

@implementation AuthTokenInterface
+ (instancetype)makeWithIdToken:(nullable NSString *)idToken
    accessToken:(NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken
    tokenType:(nullable NSString *)tokenType
    expiresIn:(nullable NSNumber *)expiresIn
    user:(nullable OpenIdUserInterface *)user {
  AuthTokenInterface* pigeonResult = [[AuthTokenInterface alloc] init];
  pigeonResult.idToken = idToken;
  pigeonResult.accessToken = accessToken;
  pigeonResult.refreshToken = refreshToken;
  pigeonResult.tokenType = tokenType;
  pigeonResult.expiresIn = expiresIn;
  pigeonResult.user = user;
  return pigeonResult;
}
+ (AuthTokenInterface *)fromMap:(NSDictionary *)dict {
  AuthTokenInterface *pigeonResult = [[AuthTokenInterface alloc] init];
  pigeonResult.idToken = GetNullableObject(dict, @"idToken");
  pigeonResult.accessToken = GetNullableObject(dict, @"accessToken");
  NSAssert(pigeonResult.accessToken != nil, @"");
  pigeonResult.refreshToken = GetNullableObject(dict, @"refreshToken");
  pigeonResult.tokenType = GetNullableObject(dict, @"tokenType");
  pigeonResult.expiresIn = GetNullableObject(dict, @"expiresIn");
  pigeonResult.user = [OpenIdUserInterface nullableFromMap:GetNullableObject(dict, @"user")];
  return pigeonResult;
}
+ (nullable AuthTokenInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [AuthTokenInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"idToken" : (self.idToken ?: [NSNull null]),
    @"accessToken" : (self.accessToken ?: [NSNull null]),
    @"refreshToken" : (self.refreshToken ?: [NSNull null]),
    @"tokenType" : (self.tokenType ?: [NSNull null]),
    @"expiresIn" : (self.expiresIn ?: [NSNull null]),
    @"user" : (self.user ? [self.user toMap] : [NSNull null]),
  };
}
@end

@implementation LoginWithPasswordRequestInterface
+ (instancetype)makeWithConfig:(ReachFiveConfigInterface *)config
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber
    password:(NSString *)password
    scope:(nullable NSArray<NSString *> *)scope {
  LoginWithPasswordRequestInterface* pigeonResult = [[LoginWithPasswordRequestInterface alloc] init];
  pigeonResult.config = config;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.password = password;
  pigeonResult.scope = scope;
  return pigeonResult;
}
+ (LoginWithPasswordRequestInterface *)fromMap:(NSDictionary *)dict {
  LoginWithPasswordRequestInterface *pigeonResult = [[LoginWithPasswordRequestInterface alloc] init];
  pigeonResult.config = [ReachFiveConfigInterface nullableFromMap:GetNullableObject(dict, @"config")];
  NSAssert(pigeonResult.config != nil, @"");
  pigeonResult.email = GetNullableObject(dict, @"email");
  pigeonResult.phoneNumber = GetNullableObject(dict, @"phoneNumber");
  pigeonResult.password = GetNullableObject(dict, @"password");
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.scope = GetNullableObject(dict, @"scope");
  return pigeonResult;
}
+ (nullable LoginWithPasswordRequestInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LoginWithPasswordRequestInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"config" : (self.config ? [self.config toMap] : [NSNull null]),
    @"email" : (self.email ?: [NSNull null]),
    @"phoneNumber" : (self.phoneNumber ?: [NSNull null]),
    @"password" : (self.password ?: [NSNull null]),
    @"scope" : (self.scope ?: [NSNull null]),
  };
}
@end

@implementation RefreshAccessTokenRequestInterface
+ (instancetype)makeWithConfig:(ReachFiveConfigInterface *)config
    authToken:(AuthTokenInterface *)authToken {
  RefreshAccessTokenRequestInterface* pigeonResult = [[RefreshAccessTokenRequestInterface alloc] init];
  pigeonResult.config = config;
  pigeonResult.authToken = authToken;
  return pigeonResult;
}
+ (RefreshAccessTokenRequestInterface *)fromMap:(NSDictionary *)dict {
  RefreshAccessTokenRequestInterface *pigeonResult = [[RefreshAccessTokenRequestInterface alloc] init];
  pigeonResult.config = [ReachFiveConfigInterface nullableFromMap:GetNullableObject(dict, @"config")];
  NSAssert(pigeonResult.config != nil, @"");
  pigeonResult.authToken = [AuthTokenInterface nullableFromMap:GetNullableObject(dict, @"authToken")];
  NSAssert(pigeonResult.authToken != nil, @"");
  return pigeonResult;
}
+ (nullable RefreshAccessTokenRequestInterface *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [RefreshAccessTokenRequestInterface fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"config" : (self.config ? [self.config toMap] : [NSNull null]),
    @"authToken" : (self.authToken ? [self.authToken toMap] : [NSNull null]),
  };
}
@end

@interface ReachFiveHostApiCodecReader : FlutterStandardReader
@end
@implementation ReachFiveHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [AddressInterface fromMap:[self readValue]];
    
    case 129:     
      return [AuthTokenInterface fromMap:[self readValue]];
    
    case 130:     
      return [ConsentInterface fromMap:[self readValue]];
    
    case 131:     
      return [LoginWithPasswordRequestInterface fromMap:[self readValue]];
    
    case 132:     
      return [OpenIdUserInterface fromMap:[self readValue]];
    
    case 133:     
      return [ProfileAddressInterface fromMap:[self readValue]];
    
    case 134:     
      return [ProfileSignupRequestInterface fromMap:[self readValue]];
    
    case 135:     
      return [ReachFiveConfigInterface fromMap:[self readValue]];
    
    case 136:     
      return [RefreshAccessTokenRequestInterface fromMap:[self readValue]];
    
    case 137:     
      return [SignupRequestInterface fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ReachFiveHostApiCodecWriter : FlutterStandardWriter
@end
@implementation ReachFiveHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[AddressInterface class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[AuthTokenInterface class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ConsentInterface class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LoginWithPasswordRequestInterface class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[OpenIdUserInterface class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ProfileAddressInterface class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ProfileSignupRequestInterface class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ReachFiveConfigInterface class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[RefreshAccessTokenRequestInterface class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[SignupRequestInterface class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ReachFiveHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ReachFiveHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ReachFiveHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ReachFiveHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ReachFiveHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ReachFiveHostApiCodecReaderWriter *readerWriter = [[ReachFiveHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ReachFiveHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReachFiveHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.initialize"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeConfig:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(initializeConfig:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ReachFiveConfigInterface *arg_config = GetNullableObjectAtIndex(args, 0);
        [api initializeConfig:arg_config completion:^(ReachFiveConfigInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.signup"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signupRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(signupRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SignupRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api signupRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.loginWithPassword"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loginWithPasswordRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(loginWithPasswordRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LoginWithPasswordRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api loginWithPasswordRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.logout"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logoutWithCompletion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(logoutWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api logoutWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(refreshAccessTokenRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(refreshAccessTokenRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RefreshAccessTokenRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api refreshAccessTokenRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
