// Autogenerated from Pigeon (v9.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "reach_five_api.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface ErrorCodesInterface ()
+ (ErrorCodesInterface *)fromList:(NSArray *)list;
+ (nullable ErrorCodesInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SdkConfigInterface ()
+ (SdkConfigInterface *)fromList:(NSArray *)list;
+ (nullable SdkConfigInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ProviderCreatorInterface ()
+ (ProviderCreatorInterface *)fromList:(NSArray *)list;
+ (nullable ProviderCreatorInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ReachFiveKeyInterface ()
+ (ReachFiveKeyInterface *)fromList:(NSArray *)list;
+ (nullable ReachFiveKeyInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ReachFiveConfigInterface ()
+ (ReachFiveConfigInterface *)fromList:(NSArray *)list;
+ (nullable ReachFiveConfigInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ProfileAddressInterface ()
+ (ProfileAddressInterface *)fromList:(NSArray *)list;
+ (nullable ProfileAddressInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ConsentInterface ()
+ (ConsentInterface *)fromList:(NSArray *)list;
+ (nullable ConsentInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ProfileSignupRequestInterface ()
+ (ProfileSignupRequestInterface *)fromList:(NSArray *)list;
+ (nullable ProfileSignupRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SignupRequestInterface ()
+ (SignupRequestInterface *)fromList:(NSArray *)list;
+ (nullable SignupRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AddressInterface ()
+ (AddressInterface *)fromList:(NSArray *)list;
+ (nullable AddressInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface OpenIdUserInterface ()
+ (OpenIdUserInterface *)fromList:(NSArray *)list;
+ (nullable OpenIdUserInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AuthTokenInterface ()
+ (AuthTokenInterface *)fromList:(NSArray *)list;
+ (nullable AuthTokenInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LoginWithPasswordRequestInterface ()
+ (LoginWithPasswordRequestInterface *)fromList:(NSArray *)list;
+ (nullable LoginWithPasswordRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LoginWithProviderRequestInterface ()
+ (LoginWithProviderRequestInterface *)fromList:(NSArray *)list;
+ (nullable LoginWithProviderRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RefreshAccessTokenRequestInterface ()
+ (RefreshAccessTokenRequestInterface *)fromList:(NSArray *)list;
+ (nullable RefreshAccessTokenRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface LoginSummaryInterface ()
+ (LoginSummaryInterface *)fromList:(NSArray *)list;
+ (nullable LoginSummaryInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface EmailsInterface ()
+ (EmailsInterface *)fromList:(NSArray *)list;
+ (nullable EmailsInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface ProfileInterface ()
+ (ProfileInterface *)fromList:(NSArray *)list;
+ (nullable ProfileInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface GetProfileRequestInterface ()
+ (GetProfileRequestInterface *)fromList:(NSArray *)list;
+ (nullable GetProfileRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface UpdateProfileRequestInterface ()
+ (UpdateProfileRequestInterface *)fromList:(NSArray *)list;
+ (nullable UpdateProfileRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface RequestPasswordResetRequestInterface ()
+ (RequestPasswordResetRequestInterface *)fromList:(NSArray *)list;
+ (nullable RequestPasswordResetRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface UpdatePasswordWithAccessTokenRequestInterface ()
+ (UpdatePasswordWithAccessTokenRequestInterface *)fromList:(NSArray *)list;
+ (nullable UpdatePasswordWithAccessTokenRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface UpdatePasswordWithFreshAccessTokenRequestInterface ()
+ (UpdatePasswordWithFreshAccessTokenRequestInterface *)fromList:(NSArray *)list;
+ (nullable UpdatePasswordWithFreshAccessTokenRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface UpdatePasswordWithEmailRequestInterface ()
+ (UpdatePasswordWithEmailRequestInterface *)fromList:(NSArray *)list;
+ (nullable UpdatePasswordWithEmailRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface UpdatePasswordWithPhoneNumberRequestInterface ()
+ (UpdatePasswordWithPhoneNumberRequestInterface *)fromList:(NSArray *)list;
+ (nullable UpdatePasswordWithPhoneNumberRequestInterface *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation ErrorCodesInterface
+ (instancetype)makeWithEmailAlreadyInUseCode:(NSString *)emailAlreadyInUseCode
    invalidEmailOrPasswordCode:(NSString *)invalidEmailOrPasswordCode
    invalidVerificationCode:(NSString *)invalidVerificationCode
    invalidGrant:(NSString *)invalidGrant
    userCancelledOrClosedTheWebFlow:(NSString *)userCancelledOrClosedTheWebFlow
    socialAccountEmailAlreadyInUse:(NSString *)socialAccountEmailAlreadyInUse {
  ErrorCodesInterface* pigeonResult = [[ErrorCodesInterface alloc] init];
  pigeonResult.emailAlreadyInUseCode = emailAlreadyInUseCode;
  pigeonResult.invalidEmailOrPasswordCode = invalidEmailOrPasswordCode;
  pigeonResult.invalidVerificationCode = invalidVerificationCode;
  pigeonResult.invalidGrant = invalidGrant;
  pigeonResult.userCancelledOrClosedTheWebFlow = userCancelledOrClosedTheWebFlow;
  pigeonResult.socialAccountEmailAlreadyInUse = socialAccountEmailAlreadyInUse;
  return pigeonResult;
}
+ (ErrorCodesInterface *)fromList:(NSArray *)list {
  ErrorCodesInterface *pigeonResult = [[ErrorCodesInterface alloc] init];
  pigeonResult.emailAlreadyInUseCode = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.emailAlreadyInUseCode != nil, @"");
  pigeonResult.invalidEmailOrPasswordCode = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.invalidEmailOrPasswordCode != nil, @"");
  pigeonResult.invalidVerificationCode = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.invalidVerificationCode != nil, @"");
  pigeonResult.invalidGrant = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.invalidGrant != nil, @"");
  pigeonResult.userCancelledOrClosedTheWebFlow = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.userCancelledOrClosedTheWebFlow != nil, @"");
  pigeonResult.socialAccountEmailAlreadyInUse = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.socialAccountEmailAlreadyInUse != nil, @"");
  return pigeonResult;
}
+ (nullable ErrorCodesInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ErrorCodesInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.emailAlreadyInUseCode ?: [NSNull null]),
    (self.invalidEmailOrPasswordCode ?: [NSNull null]),
    (self.invalidVerificationCode ?: [NSNull null]),
    (self.invalidGrant ?: [NSNull null]),
    (self.userCancelledOrClosedTheWebFlow ?: [NSNull null]),
    (self.socialAccountEmailAlreadyInUse ?: [NSNull null]),
  ];
}
@end

@implementation SdkConfigInterface
+ (instancetype)makeWithDomain:(NSString *)domain
    clientId:(NSString *)clientId
    androidScheme:(NSString *)androidScheme
    iosScheme:(NSString *)iosScheme {
  SdkConfigInterface* pigeonResult = [[SdkConfigInterface alloc] init];
  pigeonResult.domain = domain;
  pigeonResult.clientId = clientId;
  pigeonResult.androidScheme = androidScheme;
  pigeonResult.iosScheme = iosScheme;
  return pigeonResult;
}
+ (SdkConfigInterface *)fromList:(NSArray *)list {
  SdkConfigInterface *pigeonResult = [[SdkConfigInterface alloc] init];
  pigeonResult.domain = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.domain != nil, @"");
  pigeonResult.clientId = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.clientId != nil, @"");
  pigeonResult.androidScheme = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.androidScheme != nil, @"");
  pigeonResult.iosScheme = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.iosScheme != nil, @"");
  return pigeonResult;
}
+ (nullable SdkConfigInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [SdkConfigInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.domain ?: [NSNull null]),
    (self.clientId ?: [NSNull null]),
    (self.androidScheme ?: [NSNull null]),
    (self.iosScheme ?: [NSNull null]),
  ];
}
@end

@implementation ProviderCreatorInterface
+ (instancetype)makeWithType:(ProviderCreatorTypeInterface)type {
  ProviderCreatorInterface* pigeonResult = [[ProviderCreatorInterface alloc] init];
  pigeonResult.type = type;
  return pigeonResult;
}
+ (ProviderCreatorInterface *)fromList:(NSArray *)list {
  ProviderCreatorInterface *pigeonResult = [[ProviderCreatorInterface alloc] init];
  pigeonResult.type = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable ProviderCreatorInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ProviderCreatorInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.type),
  ];
}
@end

@implementation ReachFiveKeyInterface
+ (instancetype)makeWithSdkConfig:(SdkConfigInterface *)sdkConfig
    providerCreators:(NSArray<ProviderCreatorInterface *> *)providerCreators {
  ReachFiveKeyInterface* pigeonResult = [[ReachFiveKeyInterface alloc] init];
  pigeonResult.sdkConfig = sdkConfig;
  pigeonResult.providerCreators = providerCreators;
  return pigeonResult;
}
+ (ReachFiveKeyInterface *)fromList:(NSArray *)list {
  ReachFiveKeyInterface *pigeonResult = [[ReachFiveKeyInterface alloc] init];
  pigeonResult.sdkConfig = [SdkConfigInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.sdkConfig != nil, @"");
  pigeonResult.providerCreators = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.providerCreators != nil, @"");
  return pigeonResult;
}
+ (nullable ReachFiveKeyInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ReachFiveKeyInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.sdkConfig ? [self.sdkConfig toList] : [NSNull null]),
    (self.providerCreators ?: [NSNull null]),
  ];
}
@end

@implementation ReachFiveConfigInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    providers:(NSArray<NSString *> *)providers {
  ReachFiveConfigInterface* pigeonResult = [[ReachFiveConfigInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.providers = providers;
  return pigeonResult;
}
+ (ReachFiveConfigInterface *)fromList:(NSArray *)list {
  ReachFiveConfigInterface *pigeonResult = [[ReachFiveConfigInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.providers = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.providers != nil, @"");
  return pigeonResult;
}
+ (nullable ReachFiveConfigInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ReachFiveConfigInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.providers ?: [NSNull null]),
  ];
}
@end

@implementation ProfileAddressInterface
+ (instancetype)makeWithTitle:(nullable NSString *)title
    isDefault:(nullable NSNumber *)isDefault
    addressType:(ProfileAddressTypeInterface)addressType
    streetAddress:(nullable NSString *)streetAddress
    locality:(nullable NSString *)locality
    region:(nullable NSString *)region
    postalCode:(nullable NSString *)postalCode
    country:(nullable NSString *)country
    raw:(nullable NSString *)raw
    deliveryNote:(nullable NSString *)deliveryNote
    recipient:(nullable NSString *)recipient
    company:(nullable NSString *)company
    phoneNumber:(nullable NSString *)phoneNumber {
  ProfileAddressInterface* pigeonResult = [[ProfileAddressInterface alloc] init];
  pigeonResult.title = title;
  pigeonResult.isDefault = isDefault;
  pigeonResult.addressType = addressType;
  pigeonResult.streetAddress = streetAddress;
  pigeonResult.locality = locality;
  pigeonResult.region = region;
  pigeonResult.postalCode = postalCode;
  pigeonResult.country = country;
  pigeonResult.raw = raw;
  pigeonResult.deliveryNote = deliveryNote;
  pigeonResult.recipient = recipient;
  pigeonResult.company = company;
  pigeonResult.phoneNumber = phoneNumber;
  return pigeonResult;
}
+ (ProfileAddressInterface *)fromList:(NSArray *)list {
  ProfileAddressInterface *pigeonResult = [[ProfileAddressInterface alloc] init];
  pigeonResult.title = GetNullableObjectAtIndex(list, 0);
  pigeonResult.isDefault = GetNullableObjectAtIndex(list, 1);
  pigeonResult.addressType = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.streetAddress = GetNullableObjectAtIndex(list, 3);
  pigeonResult.locality = GetNullableObjectAtIndex(list, 4);
  pigeonResult.region = GetNullableObjectAtIndex(list, 5);
  pigeonResult.postalCode = GetNullableObjectAtIndex(list, 6);
  pigeonResult.country = GetNullableObjectAtIndex(list, 7);
  pigeonResult.raw = GetNullableObjectAtIndex(list, 8);
  pigeonResult.deliveryNote = GetNullableObjectAtIndex(list, 9);
  pigeonResult.recipient = GetNullableObjectAtIndex(list, 10);
  pigeonResult.company = GetNullableObjectAtIndex(list, 11);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 12);
  return pigeonResult;
}
+ (nullable ProfileAddressInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ProfileAddressInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.title ?: [NSNull null]),
    (self.isDefault ?: [NSNull null]),
    @(self.addressType),
    (self.streetAddress ?: [NSNull null]),
    (self.locality ?: [NSNull null]),
    (self.region ?: [NSNull null]),
    (self.postalCode ?: [NSNull null]),
    (self.country ?: [NSNull null]),
    (self.raw ?: [NSNull null]),
    (self.deliveryNote ?: [NSNull null]),
    (self.recipient ?: [NSNull null]),
    (self.company ?: [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
  ];
}
@end

@implementation ConsentInterface
+ (instancetype)makeWithGranted:(NSNumber *)granted
    consentType:(nullable NSString *)consentType
    date:(NSString *)date {
  ConsentInterface* pigeonResult = [[ConsentInterface alloc] init];
  pigeonResult.granted = granted;
  pigeonResult.consentType = consentType;
  pigeonResult.date = date;
  return pigeonResult;
}
+ (ConsentInterface *)fromList:(NSArray *)list {
  ConsentInterface *pigeonResult = [[ConsentInterface alloc] init];
  pigeonResult.granted = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.granted != nil, @"");
  pigeonResult.consentType = GetNullableObjectAtIndex(list, 1);
  pigeonResult.date = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.date != nil, @"");
  return pigeonResult;
}
+ (nullable ConsentInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ConsentInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.granted ?: [NSNull null]),
    (self.consentType ?: [NSNull null]),
    (self.date ?: [NSNull null]),
  ];
}
@end

@implementation ProfileSignupRequestInterface
+ (instancetype)makeWithPassword:(NSString *)password
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber
    givenName:(nullable NSString *)givenName
    middleName:(nullable NSString *)middleName
    familyName:(nullable NSString *)familyName
    name:(nullable NSString *)name
    nickname:(nullable NSString *)nickname
    birthdate:(nullable NSString *)birthdate
    profileURL:(nullable NSString *)profileURL
    picture:(nullable NSString *)picture
    username:(nullable NSString *)username
    gender:(nullable NSString *)gender
    company:(nullable NSString *)company
    addresses:(nullable NSArray<ProfileAddressInterface *> *)addresses
    locale:(nullable NSString *)locale
    bio:(nullable NSString *)bio
    customFields:(nullable NSDictionary<NSString *, id> *)customFields
    consents:(nullable NSDictionary<NSString *, ConsentInterface *> *)consents
    liteOnly:(nullable NSNumber *)liteOnly {
  ProfileSignupRequestInterface* pigeonResult = [[ProfileSignupRequestInterface alloc] init];
  pigeonResult.password = password;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.givenName = givenName;
  pigeonResult.middleName = middleName;
  pigeonResult.familyName = familyName;
  pigeonResult.name = name;
  pigeonResult.nickname = nickname;
  pigeonResult.birthdate = birthdate;
  pigeonResult.profileURL = profileURL;
  pigeonResult.picture = picture;
  pigeonResult.username = username;
  pigeonResult.gender = gender;
  pigeonResult.company = company;
  pigeonResult.addresses = addresses;
  pigeonResult.locale = locale;
  pigeonResult.bio = bio;
  pigeonResult.customFields = customFields;
  pigeonResult.consents = consents;
  pigeonResult.liteOnly = liteOnly;
  return pigeonResult;
}
+ (ProfileSignupRequestInterface *)fromList:(NSArray *)list {
  ProfileSignupRequestInterface *pigeonResult = [[ProfileSignupRequestInterface alloc] init];
  pigeonResult.password = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 2);
  pigeonResult.givenName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.middleName = GetNullableObjectAtIndex(list, 4);
  pigeonResult.familyName = GetNullableObjectAtIndex(list, 5);
  pigeonResult.name = GetNullableObjectAtIndex(list, 6);
  pigeonResult.nickname = GetNullableObjectAtIndex(list, 7);
  pigeonResult.birthdate = GetNullableObjectAtIndex(list, 8);
  pigeonResult.profileURL = GetNullableObjectAtIndex(list, 9);
  pigeonResult.picture = GetNullableObjectAtIndex(list, 10);
  pigeonResult.username = GetNullableObjectAtIndex(list, 11);
  pigeonResult.gender = GetNullableObjectAtIndex(list, 12);
  pigeonResult.company = GetNullableObjectAtIndex(list, 13);
  pigeonResult.addresses = GetNullableObjectAtIndex(list, 14);
  pigeonResult.locale = GetNullableObjectAtIndex(list, 15);
  pigeonResult.bio = GetNullableObjectAtIndex(list, 16);
  pigeonResult.customFields = GetNullableObjectAtIndex(list, 17);
  pigeonResult.consents = GetNullableObjectAtIndex(list, 18);
  pigeonResult.liteOnly = GetNullableObjectAtIndex(list, 19);
  return pigeonResult;
}
+ (nullable ProfileSignupRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ProfileSignupRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.password ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.givenName ?: [NSNull null]),
    (self.middleName ?: [NSNull null]),
    (self.familyName ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.nickname ?: [NSNull null]),
    (self.birthdate ?: [NSNull null]),
    (self.profileURL ?: [NSNull null]),
    (self.picture ?: [NSNull null]),
    (self.username ?: [NSNull null]),
    (self.gender ?: [NSNull null]),
    (self.company ?: [NSNull null]),
    (self.addresses ?: [NSNull null]),
    (self.locale ?: [NSNull null]),
    (self.bio ?: [NSNull null]),
    (self.customFields ?: [NSNull null]),
    (self.consents ?: [NSNull null]),
    (self.liteOnly ?: [NSNull null]),
  ];
}
@end

@implementation SignupRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    profile:(ProfileSignupRequestInterface *)profile
    redirectUrl:(nullable NSString *)redirectUrl
    scope:(nullable NSArray<NSString *> *)scope
    errorCodes:(ErrorCodesInterface *)errorCodes {
  SignupRequestInterface* pigeonResult = [[SignupRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.profile = profile;
  pigeonResult.redirectUrl = redirectUrl;
  pigeonResult.scope = scope;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (SignupRequestInterface *)fromList:(NSArray *)list {
  SignupRequestInterface *pigeonResult = [[SignupRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.profile = [ProfileSignupRequestInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.profile != nil, @"");
  pigeonResult.redirectUrl = GetNullableObjectAtIndex(list, 2);
  pigeonResult.scope = GetNullableObjectAtIndex(list, 3);
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable SignupRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [SignupRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.profile ? [self.profile toList] : [NSNull null]),
    (self.redirectUrl ?: [NSNull null]),
    (self.scope ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation AddressInterface
+ (instancetype)makeWithFormatted:(nullable NSString *)formatted
    streetAddress:(nullable NSString *)streetAddress
    locality:(nullable NSString *)locality
    region:(nullable NSString *)region
    postalCode:(nullable NSString *)postalCode
    country:(nullable NSString *)country {
  AddressInterface* pigeonResult = [[AddressInterface alloc] init];
  pigeonResult.formatted = formatted;
  pigeonResult.streetAddress = streetAddress;
  pigeonResult.locality = locality;
  pigeonResult.region = region;
  pigeonResult.postalCode = postalCode;
  pigeonResult.country = country;
  return pigeonResult;
}
+ (AddressInterface *)fromList:(NSArray *)list {
  AddressInterface *pigeonResult = [[AddressInterface alloc] init];
  pigeonResult.formatted = GetNullableObjectAtIndex(list, 0);
  pigeonResult.streetAddress = GetNullableObjectAtIndex(list, 1);
  pigeonResult.locality = GetNullableObjectAtIndex(list, 2);
  pigeonResult.region = GetNullableObjectAtIndex(list, 3);
  pigeonResult.postalCode = GetNullableObjectAtIndex(list, 4);
  pigeonResult.country = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable AddressInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [AddressInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.formatted ?: [NSNull null]),
    (self.streetAddress ?: [NSNull null]),
    (self.locality ?: [NSNull null]),
    (self.region ?: [NSNull null]),
    (self.postalCode ?: [NSNull null]),
    (self.country ?: [NSNull null]),
  ];
}
@end

@implementation OpenIdUserInterface
+ (instancetype)makeWithId:(nullable NSString *)id
    name:(nullable NSString *)name
    preferredUsername:(nullable NSString *)preferredUsername
    givenName:(nullable NSString *)givenName
    familyName:(nullable NSString *)familyName
    middleName:(nullable NSString *)middleName
    nickname:(nullable NSString *)nickname
    picture:(nullable NSString *)picture
    website:(nullable NSString *)website
    email:(nullable NSString *)email
    emailVerified:(nullable NSNumber *)emailVerified
    gender:(nullable NSString *)gender
    zoneinfo:(nullable NSString *)zoneinfo
    locale:(nullable NSString *)locale
    phoneNumber:(nullable NSString *)phoneNumber
    phoneNumberVerified:(nullable NSNumber *)phoneNumberVerified
    address:(nullable AddressInterface *)address
    birthdate:(nullable NSString *)birthdate
    externalId:(nullable NSString *)externalId {
  OpenIdUserInterface* pigeonResult = [[OpenIdUserInterface alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.preferredUsername = preferredUsername;
  pigeonResult.givenName = givenName;
  pigeonResult.familyName = familyName;
  pigeonResult.middleName = middleName;
  pigeonResult.nickname = nickname;
  pigeonResult.picture = picture;
  pigeonResult.website = website;
  pigeonResult.email = email;
  pigeonResult.emailVerified = emailVerified;
  pigeonResult.gender = gender;
  pigeonResult.zoneinfo = zoneinfo;
  pigeonResult.locale = locale;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.phoneNumberVerified = phoneNumberVerified;
  pigeonResult.address = address;
  pigeonResult.birthdate = birthdate;
  pigeonResult.externalId = externalId;
  return pigeonResult;
}
+ (OpenIdUserInterface *)fromList:(NSArray *)list {
  OpenIdUserInterface *pigeonResult = [[OpenIdUserInterface alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.preferredUsername = GetNullableObjectAtIndex(list, 2);
  pigeonResult.givenName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.familyName = GetNullableObjectAtIndex(list, 4);
  pigeonResult.middleName = GetNullableObjectAtIndex(list, 5);
  pigeonResult.nickname = GetNullableObjectAtIndex(list, 6);
  pigeonResult.picture = GetNullableObjectAtIndex(list, 7);
  pigeonResult.website = GetNullableObjectAtIndex(list, 8);
  pigeonResult.email = GetNullableObjectAtIndex(list, 9);
  pigeonResult.emailVerified = GetNullableObjectAtIndex(list, 10);
  pigeonResult.gender = GetNullableObjectAtIndex(list, 11);
  pigeonResult.zoneinfo = GetNullableObjectAtIndex(list, 12);
  pigeonResult.locale = GetNullableObjectAtIndex(list, 13);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 14);
  pigeonResult.phoneNumberVerified = GetNullableObjectAtIndex(list, 15);
  pigeonResult.address = [AddressInterface nullableFromList:(GetNullableObjectAtIndex(list, 16))];
  pigeonResult.birthdate = GetNullableObjectAtIndex(list, 17);
  pigeonResult.externalId = GetNullableObjectAtIndex(list, 18);
  return pigeonResult;
}
+ (nullable OpenIdUserInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [OpenIdUserInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.preferredUsername ?: [NSNull null]),
    (self.givenName ?: [NSNull null]),
    (self.familyName ?: [NSNull null]),
    (self.middleName ?: [NSNull null]),
    (self.nickname ?: [NSNull null]),
    (self.picture ?: [NSNull null]),
    (self.website ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.emailVerified ?: [NSNull null]),
    (self.gender ?: [NSNull null]),
    (self.zoneinfo ?: [NSNull null]),
    (self.locale ?: [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.phoneNumberVerified ?: [NSNull null]),
    (self.address ? [self.address toList] : [NSNull null]),
    (self.birthdate ?: [NSNull null]),
    (self.externalId ?: [NSNull null]),
  ];
}
@end

@implementation AuthTokenInterface
+ (instancetype)makeWithIdToken:(nullable NSString *)idToken
    accessToken:(NSString *)accessToken
    refreshToken:(nullable NSString *)refreshToken
    tokenType:(nullable NSString *)tokenType
    expiresIn:(nullable NSNumber *)expiresIn
    user:(nullable OpenIdUserInterface *)user {
  AuthTokenInterface* pigeonResult = [[AuthTokenInterface alloc] init];
  pigeonResult.idToken = idToken;
  pigeonResult.accessToken = accessToken;
  pigeonResult.refreshToken = refreshToken;
  pigeonResult.tokenType = tokenType;
  pigeonResult.expiresIn = expiresIn;
  pigeonResult.user = user;
  return pigeonResult;
}
+ (AuthTokenInterface *)fromList:(NSArray *)list {
  AuthTokenInterface *pigeonResult = [[AuthTokenInterface alloc] init];
  pigeonResult.idToken = GetNullableObjectAtIndex(list, 0);
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.accessToken != nil, @"");
  pigeonResult.refreshToken = GetNullableObjectAtIndex(list, 2);
  pigeonResult.tokenType = GetNullableObjectAtIndex(list, 3);
  pigeonResult.expiresIn = GetNullableObjectAtIndex(list, 4);
  pigeonResult.user = [OpenIdUserInterface nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  return pigeonResult;
}
+ (nullable AuthTokenInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [AuthTokenInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.idToken ?: [NSNull null]),
    (self.accessToken ?: [NSNull null]),
    (self.refreshToken ?: [NSNull null]),
    (self.tokenType ?: [NSNull null]),
    (self.expiresIn ?: [NSNull null]),
    (self.user ? [self.user toList] : [NSNull null]),
  ];
}
@end

@implementation LoginWithPasswordRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber
    password:(NSString *)password
    scope:(nullable NSArray<NSString *> *)scope
    errorCodes:(ErrorCodesInterface *)errorCodes {
  LoginWithPasswordRequestInterface* pigeonResult = [[LoginWithPasswordRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.password = password;
  pigeonResult.scope = scope;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (LoginWithPasswordRequestInterface *)fromList:(NSArray *)list {
  LoginWithPasswordRequestInterface *pigeonResult = [[LoginWithPasswordRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 2);
  pigeonResult.password = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.scope = GetNullableObjectAtIndex(list, 4);
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable LoginWithPasswordRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [LoginWithPasswordRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.password ?: [NSNull null]),
    (self.scope ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation LoginWithProviderRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    provider:(NSString *)provider
    origin:(NSString *)origin
    scope:(nullable NSArray<NSString *> *)scope
    errorCodes:(ErrorCodesInterface *)errorCodes {
  LoginWithProviderRequestInterface* pigeonResult = [[LoginWithProviderRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.provider = provider;
  pigeonResult.origin = origin;
  pigeonResult.scope = scope;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (LoginWithProviderRequestInterface *)fromList:(NSArray *)list {
  LoginWithProviderRequestInterface *pigeonResult = [[LoginWithProviderRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.provider = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.provider != nil, @"");
  pigeonResult.origin = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.origin != nil, @"");
  pigeonResult.scope = GetNullableObjectAtIndex(list, 3);
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable LoginWithProviderRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [LoginWithProviderRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.provider ?: [NSNull null]),
    (self.origin ?: [NSNull null]),
    (self.scope ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation RefreshAccessTokenRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    authToken:(AuthTokenInterface *)authToken {
  RefreshAccessTokenRequestInterface* pigeonResult = [[RefreshAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.authToken = authToken;
  return pigeonResult;
}
+ (RefreshAccessTokenRequestInterface *)fromList:(NSArray *)list {
  RefreshAccessTokenRequestInterface *pigeonResult = [[RefreshAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.authToken = [AuthTokenInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.authToken != nil, @"");
  return pigeonResult;
}
+ (nullable RefreshAccessTokenRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [RefreshAccessTokenRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.authToken ? [self.authToken toList] : [NSNull null]),
  ];
}
@end

@implementation LoginSummaryInterface
+ (instancetype)makeWithFirstLogin:(nullable NSNumber *)firstLogin
    lastLogin:(nullable NSNumber *)lastLogin
    total:(nullable NSNumber *)total
    origins:(nullable NSArray<NSString *> *)origins
    devices:(nullable NSArray<NSString *> *)devices
    lastProvider:(nullable NSString *)lastProvider {
  LoginSummaryInterface* pigeonResult = [[LoginSummaryInterface alloc] init];
  pigeonResult.firstLogin = firstLogin;
  pigeonResult.lastLogin = lastLogin;
  pigeonResult.total = total;
  pigeonResult.origins = origins;
  pigeonResult.devices = devices;
  pigeonResult.lastProvider = lastProvider;
  return pigeonResult;
}
+ (LoginSummaryInterface *)fromList:(NSArray *)list {
  LoginSummaryInterface *pigeonResult = [[LoginSummaryInterface alloc] init];
  pigeonResult.firstLogin = GetNullableObjectAtIndex(list, 0);
  pigeonResult.lastLogin = GetNullableObjectAtIndex(list, 1);
  pigeonResult.total = GetNullableObjectAtIndex(list, 2);
  pigeonResult.origins = GetNullableObjectAtIndex(list, 3);
  pigeonResult.devices = GetNullableObjectAtIndex(list, 4);
  pigeonResult.lastProvider = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable LoginSummaryInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [LoginSummaryInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.firstLogin ?: [NSNull null]),
    (self.lastLogin ?: [NSNull null]),
    (self.total ?: [NSNull null]),
    (self.origins ?: [NSNull null]),
    (self.devices ?: [NSNull null]),
    (self.lastProvider ?: [NSNull null]),
  ];
}
@end

@implementation EmailsInterface
+ (instancetype)makeWithVerified:(nullable NSArray<NSString *> *)verified
    unverified:(nullable NSArray<NSString *> *)unverified {
  EmailsInterface* pigeonResult = [[EmailsInterface alloc] init];
  pigeonResult.verified = verified;
  pigeonResult.unverified = unverified;
  return pigeonResult;
}
+ (EmailsInterface *)fromList:(NSArray *)list {
  EmailsInterface *pigeonResult = [[EmailsInterface alloc] init];
  pigeonResult.verified = GetNullableObjectAtIndex(list, 0);
  pigeonResult.unverified = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable EmailsInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [EmailsInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.verified ?: [NSNull null]),
    (self.unverified ?: [NSNull null]),
  ];
}
@end

@implementation ProfileInterface
+ (instancetype)makeWithUid:(nullable NSString *)uid
    givenName:(nullable NSString *)givenName
    middleName:(nullable NSString *)middleName
    familyName:(nullable NSString *)familyName
    name:(nullable NSString *)name
    nickname:(nullable NSString *)nickname
    birthdate:(nullable NSString *)birthdate
    profileURL:(nullable NSString *)profileURL
    picture:(nullable NSString *)picture
    externalId:(nullable NSString *)externalId
    authTypes:(nullable NSArray<NSString *> *)authTypes
    loginSummary:(nullable LoginSummaryInterface *)loginSummary
    username:(nullable NSString *)username
    gender:(nullable NSString *)gender
    email:(nullable NSString *)email
    emailVerified:(nullable NSNumber *)emailVerified
    emails:(nullable EmailsInterface *)emails
    phoneNumber:(nullable NSString *)phoneNumber
    phoneNumberVerified:(nullable NSNumber *)phoneNumberVerified
    addresses:(nullable NSArray<ProfileAddressInterface *> *)addresses
    locale:(nullable NSString *)locale
    bio:(nullable NSString *)bio
    customFields:(nullable NSDictionary<NSString *, id> *)customFields
    consents:(nullable NSDictionary<NSString *, ConsentInterface *> *)consents
    createdAt:(nullable NSString *)createdAt
    updatedAt:(nullable NSString *)updatedAt
    liteOnly:(nullable NSNumber *)liteOnly
    company:(nullable NSString *)company {
  ProfileInterface* pigeonResult = [[ProfileInterface alloc] init];
  pigeonResult.uid = uid;
  pigeonResult.givenName = givenName;
  pigeonResult.middleName = middleName;
  pigeonResult.familyName = familyName;
  pigeonResult.name = name;
  pigeonResult.nickname = nickname;
  pigeonResult.birthdate = birthdate;
  pigeonResult.profileURL = profileURL;
  pigeonResult.picture = picture;
  pigeonResult.externalId = externalId;
  pigeonResult.authTypes = authTypes;
  pigeonResult.loginSummary = loginSummary;
  pigeonResult.username = username;
  pigeonResult.gender = gender;
  pigeonResult.email = email;
  pigeonResult.emailVerified = emailVerified;
  pigeonResult.emails = emails;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.phoneNumberVerified = phoneNumberVerified;
  pigeonResult.addresses = addresses;
  pigeonResult.locale = locale;
  pigeonResult.bio = bio;
  pigeonResult.customFields = customFields;
  pigeonResult.consents = consents;
  pigeonResult.createdAt = createdAt;
  pigeonResult.updatedAt = updatedAt;
  pigeonResult.liteOnly = liteOnly;
  pigeonResult.company = company;
  return pigeonResult;
}
+ (ProfileInterface *)fromList:(NSArray *)list {
  ProfileInterface *pigeonResult = [[ProfileInterface alloc] init];
  pigeonResult.uid = GetNullableObjectAtIndex(list, 0);
  pigeonResult.givenName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.middleName = GetNullableObjectAtIndex(list, 2);
  pigeonResult.familyName = GetNullableObjectAtIndex(list, 3);
  pigeonResult.name = GetNullableObjectAtIndex(list, 4);
  pigeonResult.nickname = GetNullableObjectAtIndex(list, 5);
  pigeonResult.birthdate = GetNullableObjectAtIndex(list, 6);
  pigeonResult.profileURL = GetNullableObjectAtIndex(list, 7);
  pigeonResult.picture = GetNullableObjectAtIndex(list, 8);
  pigeonResult.externalId = GetNullableObjectAtIndex(list, 9);
  pigeonResult.authTypes = GetNullableObjectAtIndex(list, 10);
  pigeonResult.loginSummary = [LoginSummaryInterface nullableFromList:(GetNullableObjectAtIndex(list, 11))];
  pigeonResult.username = GetNullableObjectAtIndex(list, 12);
  pigeonResult.gender = GetNullableObjectAtIndex(list, 13);
  pigeonResult.email = GetNullableObjectAtIndex(list, 14);
  pigeonResult.emailVerified = GetNullableObjectAtIndex(list, 15);
  pigeonResult.emails = [EmailsInterface nullableFromList:(GetNullableObjectAtIndex(list, 16))];
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 17);
  pigeonResult.phoneNumberVerified = GetNullableObjectAtIndex(list, 18);
  pigeonResult.addresses = GetNullableObjectAtIndex(list, 19);
  pigeonResult.locale = GetNullableObjectAtIndex(list, 20);
  pigeonResult.bio = GetNullableObjectAtIndex(list, 21);
  pigeonResult.customFields = GetNullableObjectAtIndex(list, 22);
  pigeonResult.consents = GetNullableObjectAtIndex(list, 23);
  pigeonResult.createdAt = GetNullableObjectAtIndex(list, 24);
  pigeonResult.updatedAt = GetNullableObjectAtIndex(list, 25);
  pigeonResult.liteOnly = GetNullableObjectAtIndex(list, 26);
  pigeonResult.company = GetNullableObjectAtIndex(list, 27);
  return pigeonResult;
}
+ (nullable ProfileInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [ProfileInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.uid ?: [NSNull null]),
    (self.givenName ?: [NSNull null]),
    (self.middleName ?: [NSNull null]),
    (self.familyName ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.nickname ?: [NSNull null]),
    (self.birthdate ?: [NSNull null]),
    (self.profileURL ?: [NSNull null]),
    (self.picture ?: [NSNull null]),
    (self.externalId ?: [NSNull null]),
    (self.authTypes ?: [NSNull null]),
    (self.loginSummary ? [self.loginSummary toList] : [NSNull null]),
    (self.username ?: [NSNull null]),
    (self.gender ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.emailVerified ?: [NSNull null]),
    (self.emails ? [self.emails toList] : [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.phoneNumberVerified ?: [NSNull null]),
    (self.addresses ?: [NSNull null]),
    (self.locale ?: [NSNull null]),
    (self.bio ?: [NSNull null]),
    (self.customFields ?: [NSNull null]),
    (self.consents ?: [NSNull null]),
    (self.createdAt ?: [NSNull null]),
    (self.updatedAt ?: [NSNull null]),
    (self.liteOnly ?: [NSNull null]),
    (self.company ?: [NSNull null]),
  ];
}
@end

@implementation GetProfileRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    authToken:(AuthTokenInterface *)authToken
    errorCodes:(ErrorCodesInterface *)errorCodes {
  GetProfileRequestInterface* pigeonResult = [[GetProfileRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.authToken = authToken;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (GetProfileRequestInterface *)fromList:(NSArray *)list {
  GetProfileRequestInterface *pigeonResult = [[GetProfileRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.authToken = [AuthTokenInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.authToken != nil, @"");
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable GetProfileRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [GetProfileRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.authToken ? [self.authToken toList] : [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation UpdateProfileRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    authToken:(AuthTokenInterface *)authToken
    profile:(ProfileInterface *)profile
    errorCodes:(ErrorCodesInterface *)errorCodes {
  UpdateProfileRequestInterface* pigeonResult = [[UpdateProfileRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.authToken = authToken;
  pigeonResult.profile = profile;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (UpdateProfileRequestInterface *)fromList:(NSArray *)list {
  UpdateProfileRequestInterface *pigeonResult = [[UpdateProfileRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.authToken = [AuthTokenInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.authToken != nil, @"");
  pigeonResult.profile = [ProfileInterface nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  NSAssert(pigeonResult.profile != nil, @"");
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable UpdateProfileRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [UpdateProfileRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.authToken ? [self.authToken toList] : [NSNull null]),
    (self.profile ? [self.profile toList] : [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation RequestPasswordResetRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    email:(nullable NSString *)email
    phoneNumber:(nullable NSString *)phoneNumber
    redirectUrl:(nullable NSString *)redirectUrl {
  RequestPasswordResetRequestInterface* pigeonResult = [[RequestPasswordResetRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.email = email;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.redirectUrl = redirectUrl;
  return pigeonResult;
}
+ (RequestPasswordResetRequestInterface *)fromList:(NSArray *)list {
  RequestPasswordResetRequestInterface *pigeonResult = [[RequestPasswordResetRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 2);
  pigeonResult.redirectUrl = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable RequestPasswordResetRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [RequestPasswordResetRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.redirectUrl ?: [NSNull null]),
  ];
}
@end

@implementation UpdatePasswordWithAccessTokenRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    authToken:(AuthTokenInterface *)authToken
    oldPassword:(NSString *)oldPassword
    password:(NSString *)password {
  UpdatePasswordWithAccessTokenRequestInterface* pigeonResult = [[UpdatePasswordWithAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.authToken = authToken;
  pigeonResult.oldPassword = oldPassword;
  pigeonResult.password = password;
  return pigeonResult;
}
+ (UpdatePasswordWithAccessTokenRequestInterface *)fromList:(NSArray *)list {
  UpdatePasswordWithAccessTokenRequestInterface *pigeonResult = [[UpdatePasswordWithAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.authToken = [AuthTokenInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.authToken != nil, @"");
  pigeonResult.oldPassword = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.oldPassword != nil, @"");
  pigeonResult.password = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.password != nil, @"");
  return pigeonResult;
}
+ (nullable UpdatePasswordWithAccessTokenRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [UpdatePasswordWithAccessTokenRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.authToken ? [self.authToken toList] : [NSNull null]),
    (self.oldPassword ?: [NSNull null]),
    (self.password ?: [NSNull null]),
  ];
}
@end

@implementation UpdatePasswordWithFreshAccessTokenRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    freshAuthToken:(AuthTokenInterface *)freshAuthToken
    password:(NSString *)password {
  UpdatePasswordWithFreshAccessTokenRequestInterface* pigeonResult = [[UpdatePasswordWithFreshAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.freshAuthToken = freshAuthToken;
  pigeonResult.password = password;
  return pigeonResult;
}
+ (UpdatePasswordWithFreshAccessTokenRequestInterface *)fromList:(NSArray *)list {
  UpdatePasswordWithFreshAccessTokenRequestInterface *pigeonResult = [[UpdatePasswordWithFreshAccessTokenRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.freshAuthToken = [AuthTokenInterface nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.freshAuthToken != nil, @"");
  pigeonResult.password = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.password != nil, @"");
  return pigeonResult;
}
+ (nullable UpdatePasswordWithFreshAccessTokenRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [UpdatePasswordWithFreshAccessTokenRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.freshAuthToken ? [self.freshAuthToken toList] : [NSNull null]),
    (self.password ?: [NSNull null]),
  ];
}
@end

@implementation UpdatePasswordWithEmailRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    email:(NSString *)email
    verificationCode:(NSString *)verificationCode
    password:(NSString *)password
    errorCodes:(ErrorCodesInterface *)errorCodes {
  UpdatePasswordWithEmailRequestInterface* pigeonResult = [[UpdatePasswordWithEmailRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.email = email;
  pigeonResult.verificationCode = verificationCode;
  pigeonResult.password = password;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (UpdatePasswordWithEmailRequestInterface *)fromList:(NSArray *)list {
  UpdatePasswordWithEmailRequestInterface *pigeonResult = [[UpdatePasswordWithEmailRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.email != nil, @"");
  pigeonResult.verificationCode = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.verificationCode != nil, @"");
  pigeonResult.password = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable UpdatePasswordWithEmailRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [UpdatePasswordWithEmailRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.verificationCode ?: [NSNull null]),
    (self.password ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@implementation UpdatePasswordWithPhoneNumberRequestInterface
+ (instancetype)makeWithReachFiveKey:(ReachFiveKeyInterface *)reachFiveKey
    phoneNumber:(NSString *)phoneNumber
    verificationCode:(NSString *)verificationCode
    password:(NSString *)password
    errorCodes:(ErrorCodesInterface *)errorCodes {
  UpdatePasswordWithPhoneNumberRequestInterface* pigeonResult = [[UpdatePasswordWithPhoneNumberRequestInterface alloc] init];
  pigeonResult.reachFiveKey = reachFiveKey;
  pigeonResult.phoneNumber = phoneNumber;
  pigeonResult.verificationCode = verificationCode;
  pigeonResult.password = password;
  pigeonResult.errorCodes = errorCodes;
  return pigeonResult;
}
+ (UpdatePasswordWithPhoneNumberRequestInterface *)fromList:(NSArray *)list {
  UpdatePasswordWithPhoneNumberRequestInterface *pigeonResult = [[UpdatePasswordWithPhoneNumberRequestInterface alloc] init];
  pigeonResult.reachFiveKey = [ReachFiveKeyInterface nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.reachFiveKey != nil, @"");
  pigeonResult.phoneNumber = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.phoneNumber != nil, @"");
  pigeonResult.verificationCode = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.verificationCode != nil, @"");
  pigeonResult.password = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.password != nil, @"");
  pigeonResult.errorCodes = [ErrorCodesInterface nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  NSAssert(pigeonResult.errorCodes != nil, @"");
  return pigeonResult;
}
+ (nullable UpdatePasswordWithPhoneNumberRequestInterface *)nullableFromList:(NSArray *)list {
  return (list) ? [UpdatePasswordWithPhoneNumberRequestInterface fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.reachFiveKey ? [self.reachFiveKey toList] : [NSNull null]),
    (self.phoneNumber ?: [NSNull null]),
    (self.verificationCode ?: [NSNull null]),
    (self.password ?: [NSNull null]),
    (self.errorCodes ? [self.errorCodes toList] : [NSNull null]),
  ];
}
@end

@interface ReachFiveHostApiCodecReader : FlutterStandardReader
@end
@implementation ReachFiveHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AddressInterface fromList:[self readValue]];
    case 129: 
      return [AuthTokenInterface fromList:[self readValue]];
    case 130: 
      return [ConsentInterface fromList:[self readValue]];
    case 131: 
      return [EmailsInterface fromList:[self readValue]];
    case 132: 
      return [ErrorCodesInterface fromList:[self readValue]];
    case 133: 
      return [GetProfileRequestInterface fromList:[self readValue]];
    case 134: 
      return [LoginSummaryInterface fromList:[self readValue]];
    case 135: 
      return [LoginWithPasswordRequestInterface fromList:[self readValue]];
    case 136: 
      return [LoginWithProviderRequestInterface fromList:[self readValue]];
    case 137: 
      return [OpenIdUserInterface fromList:[self readValue]];
    case 138: 
      return [ProfileAddressInterface fromList:[self readValue]];
    case 139: 
      return [ProfileInterface fromList:[self readValue]];
    case 140: 
      return [ProfileSignupRequestInterface fromList:[self readValue]];
    case 141: 
      return [ProviderCreatorInterface fromList:[self readValue]];
    case 142: 
      return [ReachFiveConfigInterface fromList:[self readValue]];
    case 143: 
      return [ReachFiveKeyInterface fromList:[self readValue]];
    case 144: 
      return [RefreshAccessTokenRequestInterface fromList:[self readValue]];
    case 145: 
      return [RequestPasswordResetRequestInterface fromList:[self readValue]];
    case 146: 
      return [SdkConfigInterface fromList:[self readValue]];
    case 147: 
      return [SignupRequestInterface fromList:[self readValue]];
    case 148: 
      return [UpdatePasswordWithAccessTokenRequestInterface fromList:[self readValue]];
    case 149: 
      return [UpdatePasswordWithEmailRequestInterface fromList:[self readValue]];
    case 150: 
      return [UpdatePasswordWithFreshAccessTokenRequestInterface fromList:[self readValue]];
    case 151: 
      return [UpdatePasswordWithPhoneNumberRequestInterface fromList:[self readValue]];
    case 152: 
      return [UpdateProfileRequestInterface fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface ReachFiveHostApiCodecWriter : FlutterStandardWriter
@end
@implementation ReachFiveHostApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AddressInterface class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AuthTokenInterface class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ConsentInterface class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[EmailsInterface class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ErrorCodesInterface class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[GetProfileRequestInterface class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LoginSummaryInterface class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LoginWithPasswordRequestInterface class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[LoginWithProviderRequestInterface class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[OpenIdUserInterface class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProfileAddressInterface class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProfileInterface class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProfileSignupRequestInterface class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ProviderCreatorInterface class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReachFiveConfigInterface class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[ReachFiveKeyInterface class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RefreshAccessTokenRequestInterface class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[RequestPasswordResetRequestInterface class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SdkConfigInterface class]]) {
    [self writeByte:146];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SignupRequestInterface class]]) {
    [self writeByte:147];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[UpdatePasswordWithAccessTokenRequestInterface class]]) {
    [self writeByte:148];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[UpdatePasswordWithEmailRequestInterface class]]) {
    [self writeByte:149];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[UpdatePasswordWithFreshAccessTokenRequestInterface class]]) {
    [self writeByte:150];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[UpdatePasswordWithPhoneNumberRequestInterface class]]) {
    [self writeByte:151];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[UpdateProfileRequestInterface class]]) {
    [self writeByte:152];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface ReachFiveHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ReachFiveHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ReachFiveHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ReachFiveHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ReachFiveHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    ReachFiveHostApiCodecReaderWriter *readerWriter = [[ReachFiveHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void ReachFiveHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ReachFiveHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.initialize"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeReachFiveKey:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(initializeReachFiveKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ReachFiveKeyInterface *arg_reachFiveKey = GetNullableObjectAtIndex(args, 0);
        [api initializeReachFiveKey:arg_reachFiveKey completion:^(ReachFiveConfigInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.signup"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signupRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(signupRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SignupRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api signupRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.loginWithPassword"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loginWithPasswordRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(loginWithPasswordRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LoginWithPasswordRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api loginWithPasswordRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.loginWithProvider"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(loginWithProviderRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(loginWithProviderRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        LoginWithProviderRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api loginWithProviderRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.logout"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logoutReachFiveKey:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(logoutReachFiveKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        ReachFiveKeyInterface *arg_reachFiveKey = GetNullableObjectAtIndex(args, 0);
        [api logoutReachFiveKey:arg_reachFiveKey completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.getProfile"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getProfileRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(getProfileRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        GetProfileRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api getProfileRequest:arg_request completion:^(ProfileInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.updateProfile"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateProfileRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(updateProfileRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdateProfileRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api updateProfileRequest:arg_request completion:^(ProfileInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(refreshAccessTokenRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(refreshAccessTokenRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RefreshAccessTokenRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api refreshAccessTokenRequest:arg_request completion:^(AuthTokenInterface *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.requestPasswordReset"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestPasswordResetRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(requestPasswordResetRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RequestPasswordResetRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api requestPasswordResetRequest:arg_request completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithAccessToken"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePasswordWithAccessTokenRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(updatePasswordWithAccessTokenRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdatePasswordWithAccessTokenRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api updatePasswordWithAccessTokenRequest:arg_request completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithFreshAccessToken"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePasswordWithFreshAccessTokenRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(updatePasswordWithFreshAccessTokenRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdatePasswordWithFreshAccessTokenRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api updatePasswordWithFreshAccessTokenRequest:arg_request completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithEmail"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePasswordWithEmailRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(updatePasswordWithEmailRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdatePasswordWithEmailRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api updatePasswordWithEmailRequest:arg_request completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithPhoneNumber"
        binaryMessenger:binaryMessenger
        codec:ReachFiveHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updatePasswordWithPhoneNumberRequest:completion:)], @"ReachFiveHostApi api (%@) doesn't respond to @selector(updatePasswordWithPhoneNumberRequest:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        UpdatePasswordWithPhoneNumberRequestInterface *arg_request = GetNullableObjectAtIndex(args, 0);
        [api updatePasswordWithPhoneNumberRequest:arg_request completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
