// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return (value as Any) as! T?
}

enum ProviderCreatorTypeInterface: Int {
  case google = 0
  case facebook = 1
  case webview = 2
}

enum ProfileAddressTypeInterface: Int {
  case billing = 0
  case delivery = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct ErrorCodesInterface {
  var emailAlreadyInUseCode: String
  var invalidEmailOrPasswordCode: String
  var invalidVerificationCode: String
  var invalidGrant: String
  var userCancelledOrClosedTheWebFlow: String
  var socialAccountEmailAlreadyInUse: String

  static func fromList(_ list: [Any]) -> ErrorCodesInterface? {
    let emailAlreadyInUseCode = list[0] as! String
    let invalidEmailOrPasswordCode = list[1] as! String
    let invalidVerificationCode = list[2] as! String
    let invalidGrant = list[3] as! String
    let userCancelledOrClosedTheWebFlow = list[4] as! String
    let socialAccountEmailAlreadyInUse = list[5] as! String

    return ErrorCodesInterface(
      emailAlreadyInUseCode: emailAlreadyInUseCode,
      invalidEmailOrPasswordCode: invalidEmailOrPasswordCode,
      invalidVerificationCode: invalidVerificationCode,
      invalidGrant: invalidGrant,
      userCancelledOrClosedTheWebFlow: userCancelledOrClosedTheWebFlow,
      socialAccountEmailAlreadyInUse: socialAccountEmailAlreadyInUse
    )
  }
  func toList() -> [Any?] {
    return [
      emailAlreadyInUseCode,
      invalidEmailOrPasswordCode,
      invalidVerificationCode,
      invalidGrant,
      userCancelledOrClosedTheWebFlow,
      socialAccountEmailAlreadyInUse,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SdkConfigInterface {
  var domain: String
  var clientId: String
  var androidScheme: String
  var iosScheme: String

  static func fromList(_ list: [Any]) -> SdkConfigInterface? {
    let domain = list[0] as! String
    let clientId = list[1] as! String
    let androidScheme = list[2] as! String
    let iosScheme = list[3] as! String

    return SdkConfigInterface(
      domain: domain,
      clientId: clientId,
      androidScheme: androidScheme,
      iosScheme: iosScheme
    )
  }
  func toList() -> [Any?] {
    return [
      domain,
      clientId,
      androidScheme,
      iosScheme,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ProviderCreatorInterface {
  var type: ProviderCreatorTypeInterface

  static func fromList(_ list: [Any]) -> ProviderCreatorInterface? {
    let type = ProviderCreatorTypeInterface(rawValue: list[0] as! Int)!

    return ProviderCreatorInterface(
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReachFiveKeyInterface {
  var sdkConfig: SdkConfigInterface
  var providerCreators: [ProviderCreatorInterface?]

  static func fromList(_ list: [Any]) -> ReachFiveKeyInterface? {
    let sdkConfig = SdkConfigInterface.fromList(list[0] as! [Any])!
    let providerCreators = list[1] as! [ProviderCreatorInterface?]

    return ReachFiveKeyInterface(
      sdkConfig: sdkConfig,
      providerCreators: providerCreators
    )
  }
  func toList() -> [Any?] {
    return [
      sdkConfig.toList(),
      providerCreators,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReachFiveConfigInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var providers: [String?]

  static func fromList(_ list: [Any]) -> ReachFiveConfigInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let providers = list[1] as! [String?]

    return ReachFiveConfigInterface(
      reachFiveKey: reachFiveKey,
      providers: providers
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      providers,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ProfileAddressInterface {
  var title: String? = nil
  var isDefault: Bool? = nil
  var addressType: ProfileAddressTypeInterface? = nil
  var streetAddress: String? = nil
  var locality: String? = nil
  var region: String? = nil
  var postalCode: String? = nil
  var country: String? = nil
  var raw: String? = nil
  var deliveryNote: String? = nil
  var recipient: String? = nil
  var company: String? = nil
  var phoneNumber: String? = nil

  static func fromList(_ list: [Any]) -> ProfileAddressInterface? {
    let title: String? = nilOrValue(list[0])
    let isDefault: Bool? = nilOrValue(list[1])
    var addressType: ProfileAddressTypeInterface? = nil
    let addressTypeEnumVal: Int? = nilOrValue(list[2])
    if let addressTypeRawValue = addressTypeEnumVal {
      addressType = ProfileAddressTypeInterface(rawValue: addressTypeRawValue)!
    }
    let streetAddress: String? = nilOrValue(list[3])
    let locality: String? = nilOrValue(list[4])
    let region: String? = nilOrValue(list[5])
    let postalCode: String? = nilOrValue(list[6])
    let country: String? = nilOrValue(list[7])
    let raw: String? = nilOrValue(list[8])
    let deliveryNote: String? = nilOrValue(list[9])
    let recipient: String? = nilOrValue(list[10])
    let company: String? = nilOrValue(list[11])
    let phoneNumber: String? = nilOrValue(list[12])

    return ProfileAddressInterface(
      title: title,
      isDefault: isDefault,
      addressType: addressType,
      streetAddress: streetAddress,
      locality: locality,
      region: region,
      postalCode: postalCode,
      country: country,
      raw: raw,
      deliveryNote: deliveryNote,
      recipient: recipient,
      company: company,
      phoneNumber: phoneNumber
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      isDefault,
      addressType?.rawValue,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
      raw,
      deliveryNote,
      recipient,
      company,
      phoneNumber,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ConsentInterface {
  var granted: Bool
  var consentType: String? = nil
  var date: String

  static func fromList(_ list: [Any]) -> ConsentInterface? {
    let granted = list[0] as! Bool
    let consentType: String? = nilOrValue(list[1])
    let date = list[2] as! String

    return ConsentInterface(
      granted: granted,
      consentType: consentType,
      date: date
    )
  }
  func toList() -> [Any?] {
    return [
      granted,
      consentType,
      date,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ProfileSignupRequestInterface {
  var password: String
  var email: String? = nil
  var phoneNumber: String? = nil
  var givenName: String? = nil
  var middleName: String? = nil
  var familyName: String? = nil
  var name: String? = nil
  var nickname: String? = nil
  var birthdate: String? = nil
  var profileURL: String? = nil
  var picture: String? = nil
  var username: String? = nil
  var gender: String? = nil
  var company: String? = nil
  var addresses: [ProfileAddressInterface?]? = nil
  var locale: String? = nil
  var bio: String? = nil
  var customFields: [String?: Any?]? = nil
  var consents: [String?: ConsentInterface?]? = nil
  var liteOnly: Bool? = nil

  static func fromList(_ list: [Any]) -> ProfileSignupRequestInterface? {
    let password = list[0] as! String
    let email: String? = nilOrValue(list[1])
    let phoneNumber: String? = nilOrValue(list[2])
    let givenName: String? = nilOrValue(list[3])
    let middleName: String? = nilOrValue(list[4])
    let familyName: String? = nilOrValue(list[5])
    let name: String? = nilOrValue(list[6])
    let nickname: String? = nilOrValue(list[7])
    let birthdate: String? = nilOrValue(list[8])
    let profileURL: String? = nilOrValue(list[9])
    let picture: String? = nilOrValue(list[10])
    let username: String? = nilOrValue(list[11])
    let gender: String? = nilOrValue(list[12])
    let company: String? = nilOrValue(list[13])
    let addresses: [ProfileAddressInterface?]? = nilOrValue(list[14])
    let locale: String? = nilOrValue(list[15])
    let bio: String? = nilOrValue(list[16])
    let customFields: [String?: Any?]? = nilOrValue(list[17])
    let consents: [String?: ConsentInterface?]? = nilOrValue(list[18])
    let liteOnly: Bool? = nilOrValue(list[19])

    return ProfileSignupRequestInterface(
      password: password,
      email: email,
      phoneNumber: phoneNumber,
      givenName: givenName,
      middleName: middleName,
      familyName: familyName,
      name: name,
      nickname: nickname,
      birthdate: birthdate,
      profileURL: profileURL,
      picture: picture,
      username: username,
      gender: gender,
      company: company,
      addresses: addresses,
      locale: locale,
      bio: bio,
      customFields: customFields,
      consents: consents,
      liteOnly: liteOnly
    )
  }
  func toList() -> [Any?] {
    return [
      password,
      email,
      phoneNumber,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      username,
      gender,
      company,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      liteOnly,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SignupRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var profile: ProfileSignupRequestInterface
  var redirectUrl: String? = nil
  var scope: [String?]? = nil
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> SignupRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let profile = ProfileSignupRequestInterface.fromList(list[1] as! [Any])!
    let redirectUrl: String? = nilOrValue(list[2])
    let scope: [String?]? = nilOrValue(list[3])
    let errorCodes = ErrorCodesInterface.fromList(list[4] as! [Any])!

    return SignupRequestInterface(
      reachFiveKey: reachFiveKey,
      profile: profile,
      redirectUrl: redirectUrl,
      scope: scope,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      profile.toList(),
      redirectUrl,
      scope,
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AddressInterface {
  var formatted: String? = nil
  var streetAddress: String? = nil
  var locality: String? = nil
  var region: String? = nil
  var postalCode: String? = nil
  var country: String? = nil

  static func fromList(_ list: [Any]) -> AddressInterface? {
    let formatted: String? = nilOrValue(list[0])
    let streetAddress: String? = nilOrValue(list[1])
    let locality: String? = nilOrValue(list[2])
    let region: String? = nilOrValue(list[3])
    let postalCode: String? = nilOrValue(list[4])
    let country: String? = nilOrValue(list[5])

    return AddressInterface(
      formatted: formatted,
      streetAddress: streetAddress,
      locality: locality,
      region: region,
      postalCode: postalCode,
      country: country
    )
  }
  func toList() -> [Any?] {
    return [
      formatted,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OpenIdUserInterface {
  var id: String? = nil
  var name: String? = nil
  var preferredUsername: String? = nil
  var givenName: String? = nil
  var familyName: String? = nil
  var middleName: String? = nil
  var nickname: String? = nil
  var picture: String? = nil
  var website: String? = nil
  var email: String? = nil
  var emailVerified: Bool? = nil
  var gender: String? = nil
  var zoneinfo: String? = nil
  var locale: String? = nil
  var phoneNumber: String? = nil
  var phoneNumberVerified: Bool? = nil
  var address: AddressInterface? = nil
  var birthdate: String? = nil
  var externalId: String? = nil

  static func fromList(_ list: [Any]) -> OpenIdUserInterface? {
    let id: String? = nilOrValue(list[0])
    let name: String? = nilOrValue(list[1])
    let preferredUsername: String? = nilOrValue(list[2])
    let givenName: String? = nilOrValue(list[3])
    let familyName: String? = nilOrValue(list[4])
    let middleName: String? = nilOrValue(list[5])
    let nickname: String? = nilOrValue(list[6])
    let picture: String? = nilOrValue(list[7])
    let website: String? = nilOrValue(list[8])
    let email: String? = nilOrValue(list[9])
    let emailVerified: Bool? = nilOrValue(list[10])
    let gender: String? = nilOrValue(list[11])
    let zoneinfo: String? = nilOrValue(list[12])
    let locale: String? = nilOrValue(list[13])
    let phoneNumber: String? = nilOrValue(list[14])
    let phoneNumberVerified: Bool? = nilOrValue(list[15])
    var address: AddressInterface? = nil
    if let addressList = list[16] as! [Any]? {
      address = AddressInterface.fromList(addressList)
    }
    let birthdate: String? = nilOrValue(list[17])
    let externalId: String? = nilOrValue(list[18])

    return OpenIdUserInterface(
      id: id,
      name: name,
      preferredUsername: preferredUsername,
      givenName: givenName,
      familyName: familyName,
      middleName: middleName,
      nickname: nickname,
      picture: picture,
      website: website,
      email: email,
      emailVerified: emailVerified,
      gender: gender,
      zoneinfo: zoneinfo,
      locale: locale,
      phoneNumber: phoneNumber,
      phoneNumberVerified: phoneNumberVerified,
      address: address,
      birthdate: birthdate,
      externalId: externalId
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
      preferredUsername,
      givenName,
      familyName,
      middleName,
      nickname,
      picture,
      website,
      email,
      emailVerified,
      gender,
      zoneinfo,
      locale,
      phoneNumber,
      phoneNumberVerified,
      address?.toList(),
      birthdate,
      externalId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AuthTokenInterface {
  var idToken: String? = nil
  var accessToken: String
  var refreshToken: String? = nil
  var tokenType: String? = nil
  var expiresIn: Int64? = nil
  var user: OpenIdUserInterface? = nil

  static func fromList(_ list: [Any]) -> AuthTokenInterface? {
    let idToken: String? = nilOrValue(list[0])
    let accessToken = list[1] as! String
    let refreshToken: String? = nilOrValue(list[2])
    let tokenType: String? = nilOrValue(list[3])
    let expiresIn: Int64? = list[4] is NSNull ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    var user: OpenIdUserInterface? = nil
    if let userList = list[5] as! [Any]? {
      user = OpenIdUserInterface.fromList(userList)
    }

    return AuthTokenInterface(
      idToken: idToken,
      accessToken: accessToken,
      refreshToken: refreshToken,
      tokenType: tokenType,
      expiresIn: expiresIn,
      user: user
    )
  }
  func toList() -> [Any?] {
    return [
      idToken,
      accessToken,
      refreshToken,
      tokenType,
      expiresIn,
      user?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LoginWithPasswordRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var email: String? = nil
  var phoneNumber: String? = nil
  var password: String
  var scope: [String?]? = nil
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> LoginWithPasswordRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let email: String? = nilOrValue(list[1])
    let phoneNumber: String? = nilOrValue(list[2])
    let password = list[3] as! String
    let scope: [String?]? = nilOrValue(list[4])
    let errorCodes = ErrorCodesInterface.fromList(list[5] as! [Any])!

    return LoginWithPasswordRequestInterface(
      reachFiveKey: reachFiveKey,
      email: email,
      phoneNumber: phoneNumber,
      password: password,
      scope: scope,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      email,
      phoneNumber,
      password,
      scope,
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LoginWithProviderRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var provider: String
  var origin: String
  var scope: [String?]? = nil
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> LoginWithProviderRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let provider = list[1] as! String
    let origin = list[2] as! String
    let scope: [String?]? = nilOrValue(list[3])
    let errorCodes = ErrorCodesInterface.fromList(list[4] as! [Any])!

    return LoginWithProviderRequestInterface(
      reachFiveKey: reachFiveKey,
      provider: provider,
      origin: origin,
      scope: scope,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      provider,
      origin,
      scope,
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RefreshAccessTokenRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var authToken: AuthTokenInterface

  static func fromList(_ list: [Any]) -> RefreshAccessTokenRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let authToken = AuthTokenInterface.fromList(list[1] as! [Any])!

    return RefreshAccessTokenRequestInterface(
      reachFiveKey: reachFiveKey,
      authToken: authToken
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      authToken.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LoginSummaryInterface {
  var firstLogin: Double? = nil
  var lastLogin: Double? = nil
  var total: Int64? = nil
  var origins: [String?]? = nil
  var devices: [String?]? = nil
  var lastProvider: String? = nil

  static func fromList(_ list: [Any]) -> LoginSummaryInterface? {
    let firstLogin: Double? = nilOrValue(list[0])
    let lastLogin: Double? = nilOrValue(list[1])
    let total: Int64? = list[2] is NSNull ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let origins: [String?]? = nilOrValue(list[3])
    let devices: [String?]? = nilOrValue(list[4])
    let lastProvider: String? = nilOrValue(list[5])

    return LoginSummaryInterface(
      firstLogin: firstLogin,
      lastLogin: lastLogin,
      total: total,
      origins: origins,
      devices: devices,
      lastProvider: lastProvider
    )
  }
  func toList() -> [Any?] {
    return [
      firstLogin,
      lastLogin,
      total,
      origins,
      devices,
      lastProvider,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct EmailsInterface {
  var verified: [String?]? = nil
  var unverified: [String?]? = nil

  static func fromList(_ list: [Any]) -> EmailsInterface? {
    let verified: [String?]? = nilOrValue(list[0])
    let unverified: [String?]? = nilOrValue(list[1])

    return EmailsInterface(
      verified: verified,
      unverified: unverified
    )
  }
  func toList() -> [Any?] {
    return [
      verified,
      unverified,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ProfileInterface {
  var uid: String? = nil
  var givenName: String? = nil
  var middleName: String? = nil
  var familyName: String? = nil
  var name: String? = nil
  var nickname: String? = nil
  var birthdate: String? = nil
  var profileURL: String? = nil
  var picture: String? = nil
  var externalId: String? = nil
  var authTypes: [String?]? = nil
  var loginSummary: LoginSummaryInterface? = nil
  var username: String? = nil
  var gender: String? = nil
  var email: String? = nil
  var emailVerified: Bool? = nil
  var emails: EmailsInterface? = nil
  var phoneNumber: String? = nil
  var phoneNumberVerified: Bool? = nil
  var addresses: [ProfileAddressInterface?]? = nil
  var locale: String? = nil
  var bio: String? = nil
  var customFields: [String?: Any?]? = nil
  var consents: [String?: ConsentInterface?]? = nil
  var createdAt: String? = nil
  var updatedAt: String? = nil
  var liteOnly: Bool? = nil
  var company: String? = nil

  static func fromList(_ list: [Any]) -> ProfileInterface? {
    let uid: String? = nilOrValue(list[0])
    let givenName: String? = nilOrValue(list[1])
    let middleName: String? = nilOrValue(list[2])
    let familyName: String? = nilOrValue(list[3])
    let name: String? = nilOrValue(list[4])
    let nickname: String? = nilOrValue(list[5])
    let birthdate: String? = nilOrValue(list[6])
    let profileURL: String? = nilOrValue(list[7])
    let picture: String? = nilOrValue(list[8])
    let externalId: String? = nilOrValue(list[9])
    let authTypes: [String?]? = nilOrValue(list[10])
    var loginSummary: LoginSummaryInterface? = nil
    if let loginSummaryList = list[11] as! [Any]? {
      loginSummary = LoginSummaryInterface.fromList(loginSummaryList)
    }
    let username: String? = nilOrValue(list[12])
    let gender: String? = nilOrValue(list[13])
    let email: String? = nilOrValue(list[14])
    let emailVerified: Bool? = nilOrValue(list[15])
    var emails: EmailsInterface? = nil
    if let emailsList = list[16] as! [Any]? {
      emails = EmailsInterface.fromList(emailsList)
    }
    let phoneNumber: String? = nilOrValue(list[17])
    let phoneNumberVerified: Bool? = nilOrValue(list[18])
    let addresses: [ProfileAddressInterface?]? = nilOrValue(list[19])
    let locale: String? = nilOrValue(list[20])
    let bio: String? = nilOrValue(list[21])
    let customFields: [String?: Any?]? = nilOrValue(list[22])
    let consents: [String?: ConsentInterface?]? = nilOrValue(list[23])
    let createdAt: String? = nilOrValue(list[24])
    let updatedAt: String? = nilOrValue(list[25])
    let liteOnly: Bool? = nilOrValue(list[26])
    let company: String? = nilOrValue(list[27])

    return ProfileInterface(
      uid: uid,
      givenName: givenName,
      middleName: middleName,
      familyName: familyName,
      name: name,
      nickname: nickname,
      birthdate: birthdate,
      profileURL: profileURL,
      picture: picture,
      externalId: externalId,
      authTypes: authTypes,
      loginSummary: loginSummary,
      username: username,
      gender: gender,
      email: email,
      emailVerified: emailVerified,
      emails: emails,
      phoneNumber: phoneNumber,
      phoneNumberVerified: phoneNumberVerified,
      addresses: addresses,
      locale: locale,
      bio: bio,
      customFields: customFields,
      consents: consents,
      createdAt: createdAt,
      updatedAt: updatedAt,
      liteOnly: liteOnly,
      company: company
    )
  }
  func toList() -> [Any?] {
    return [
      uid,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      externalId,
      authTypes,
      loginSummary?.toList(),
      username,
      gender,
      email,
      emailVerified,
      emails?.toList(),
      phoneNumber,
      phoneNumberVerified,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      createdAt,
      updatedAt,
      liteOnly,
      company,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GetProfileRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var authToken: AuthTokenInterface
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> GetProfileRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let authToken = AuthTokenInterface.fromList(list[1] as! [Any])!
    let errorCodes = ErrorCodesInterface.fromList(list[2] as! [Any])!

    return GetProfileRequestInterface(
      reachFiveKey: reachFiveKey,
      authToken: authToken,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      authToken.toList(),
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UpdateProfileRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var authToken: AuthTokenInterface
  var profile: ProfileInterface
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> UpdateProfileRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let authToken = AuthTokenInterface.fromList(list[1] as! [Any])!
    let profile = ProfileInterface.fromList(list[2] as! [Any])!
    let errorCodes = ErrorCodesInterface.fromList(list[3] as! [Any])!

    return UpdateProfileRequestInterface(
      reachFiveKey: reachFiveKey,
      authToken: authToken,
      profile: profile,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      authToken.toList(),
      profile.toList(),
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RequestPasswordResetRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var email: String? = nil
  var phoneNumber: String? = nil
  var redirectUrl: String? = nil

  static func fromList(_ list: [Any]) -> RequestPasswordResetRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let email: String? = nilOrValue(list[1])
    let phoneNumber: String? = nilOrValue(list[2])
    let redirectUrl: String? = nilOrValue(list[3])

    return RequestPasswordResetRequestInterface(
      reachFiveKey: reachFiveKey,
      email: email,
      phoneNumber: phoneNumber,
      redirectUrl: redirectUrl
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      email,
      phoneNumber,
      redirectUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UpdatePasswordWithAccessTokenRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var authToken: AuthTokenInterface
  var oldPassword: String
  var password: String

  static func fromList(_ list: [Any]) -> UpdatePasswordWithAccessTokenRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let authToken = AuthTokenInterface.fromList(list[1] as! [Any])!
    let oldPassword = list[2] as! String
    let password = list[3] as! String

    return UpdatePasswordWithAccessTokenRequestInterface(
      reachFiveKey: reachFiveKey,
      authToken: authToken,
      oldPassword: oldPassword,
      password: password
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      authToken.toList(),
      oldPassword,
      password,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UpdatePasswordWithFreshAccessTokenRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var freshAuthToken: AuthTokenInterface
  var password: String

  static func fromList(_ list: [Any]) -> UpdatePasswordWithFreshAccessTokenRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let freshAuthToken = AuthTokenInterface.fromList(list[1] as! [Any])!
    let password = list[2] as! String

    return UpdatePasswordWithFreshAccessTokenRequestInterface(
      reachFiveKey: reachFiveKey,
      freshAuthToken: freshAuthToken,
      password: password
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      freshAuthToken.toList(),
      password,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UpdatePasswordWithEmailRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var email: String
  var verificationCode: String
  var password: String
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> UpdatePasswordWithEmailRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let email = list[1] as! String
    let verificationCode = list[2] as! String
    let password = list[3] as! String
    let errorCodes = ErrorCodesInterface.fromList(list[4] as! [Any])!

    return UpdatePasswordWithEmailRequestInterface(
      reachFiveKey: reachFiveKey,
      email: email,
      verificationCode: verificationCode,
      password: password,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      email,
      verificationCode,
      password,
      errorCodes.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UpdatePasswordWithPhoneNumberRequestInterface {
  var reachFiveKey: ReachFiveKeyInterface
  var phoneNumber: String
  var verificationCode: String
  var password: String
  var errorCodes: ErrorCodesInterface

  static func fromList(_ list: [Any]) -> UpdatePasswordWithPhoneNumberRequestInterface? {
    let reachFiveKey = ReachFiveKeyInterface.fromList(list[0] as! [Any])!
    let phoneNumber = list[1] as! String
    let verificationCode = list[2] as! String
    let password = list[3] as! String
    let errorCodes = ErrorCodesInterface.fromList(list[4] as! [Any])!

    return UpdatePasswordWithPhoneNumberRequestInterface(
      reachFiveKey: reachFiveKey,
      phoneNumber: phoneNumber,
      verificationCode: verificationCode,
      password: password,
      errorCodes: errorCodes
    )
  }
  func toList() -> [Any?] {
    return [
      reachFiveKey.toList(),
      phoneNumber,
      verificationCode,
      password,
      errorCodes.toList(),
    ]
  }
}

private class ReachFiveHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AddressInterface.fromList(self.readValue() as! [Any])
      case 129:
        return AuthTokenInterface.fromList(self.readValue() as! [Any])
      case 130:
        return ConsentInterface.fromList(self.readValue() as! [Any])
      case 131:
        return EmailsInterface.fromList(self.readValue() as! [Any])
      case 132:
        return ErrorCodesInterface.fromList(self.readValue() as! [Any])
      case 133:
        return GetProfileRequestInterface.fromList(self.readValue() as! [Any])
      case 134:
        return LoginSummaryInterface.fromList(self.readValue() as! [Any])
      case 135:
        return LoginWithPasswordRequestInterface.fromList(self.readValue() as! [Any])
      case 136:
        return LoginWithProviderRequestInterface.fromList(self.readValue() as! [Any])
      case 137:
        return OpenIdUserInterface.fromList(self.readValue() as! [Any])
      case 138:
        return ProfileAddressInterface.fromList(self.readValue() as! [Any])
      case 139:
        return ProfileInterface.fromList(self.readValue() as! [Any])
      case 140:
        return ProfileSignupRequestInterface.fromList(self.readValue() as! [Any])
      case 141:
        return ProviderCreatorInterface.fromList(self.readValue() as! [Any])
      case 142:
        return ReachFiveConfigInterface.fromList(self.readValue() as! [Any])
      case 143:
        return ReachFiveKeyInterface.fromList(self.readValue() as! [Any])
      case 144:
        return RefreshAccessTokenRequestInterface.fromList(self.readValue() as! [Any])
      case 145:
        return RequestPasswordResetRequestInterface.fromList(self.readValue() as! [Any])
      case 146:
        return SdkConfigInterface.fromList(self.readValue() as! [Any])
      case 147:
        return SignupRequestInterface.fromList(self.readValue() as! [Any])
      case 148:
        return UpdatePasswordWithAccessTokenRequestInterface.fromList(self.readValue() as! [Any])
      case 149:
        return UpdatePasswordWithEmailRequestInterface.fromList(self.readValue() as! [Any])
      case 150:
        return UpdatePasswordWithFreshAccessTokenRequestInterface.fromList(self.readValue() as! [Any])
      case 151:
        return UpdatePasswordWithPhoneNumberRequestInterface.fromList(self.readValue() as! [Any])
      case 152:
        return UpdateProfileRequestInterface.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ReachFiveHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AddressInterface {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AuthTokenInterface {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ConsentInterface {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? EmailsInterface {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ErrorCodesInterface {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? GetProfileRequestInterface {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? LoginSummaryInterface {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? LoginWithPasswordRequestInterface {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? LoginWithProviderRequestInterface {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? OpenIdUserInterface {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? ProfileAddressInterface {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? ProfileInterface {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? ProfileSignupRequestInterface {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? ProviderCreatorInterface {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? ReachFiveConfigInterface {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? ReachFiveKeyInterface {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? RefreshAccessTokenRequestInterface {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? RequestPasswordResetRequestInterface {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? SdkConfigInterface {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? SignupRequestInterface {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? UpdatePasswordWithAccessTokenRequestInterface {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? UpdatePasswordWithEmailRequestInterface {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? UpdatePasswordWithFreshAccessTokenRequestInterface {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? UpdatePasswordWithPhoneNumberRequestInterface {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? UpdateProfileRequestInterface {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ReachFiveHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ReachFiveHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ReachFiveHostApiCodecWriter(data: data)
  }
}

class ReachFiveHostApiCodec: FlutterStandardMessageCodec {
  static let shared = ReachFiveHostApiCodec(readerWriter: ReachFiveHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReachFiveHostApi {
  func initialize(reachFiveKey: ReachFiveKeyInterface, completion: @escaping (Result<ReachFiveConfigInterface, Error>) -> Void)
  func signup(request: SignupRequestInterface, completion: @escaping (Result<AuthTokenInterface, Error>) -> Void)
  func loginWithPassword(request: LoginWithPasswordRequestInterface, completion: @escaping (Result<AuthTokenInterface, Error>) -> Void)
  func loginWithProvider(request: LoginWithProviderRequestInterface, completion: @escaping (Result<AuthTokenInterface, Error>) -> Void)
  func logout(reachFiveKey: ReachFiveKeyInterface, completion: @escaping (Result<Void, Error>) -> Void)
  func getProfile(request: GetProfileRequestInterface, completion: @escaping (Result<ProfileInterface, Error>) -> Void)
  func updateProfile(request: UpdateProfileRequestInterface, completion: @escaping (Result<ProfileInterface, Error>) -> Void)
  func refreshAccessToken(request: RefreshAccessTokenRequestInterface, completion: @escaping (Result<AuthTokenInterface, Error>) -> Void)
  func requestPasswordReset(request: RequestPasswordResetRequestInterface, completion: @escaping (Result<Void, Error>) -> Void)
  func updatePasswordWithAccessToken(request: UpdatePasswordWithAccessTokenRequestInterface, completion: @escaping (Result<Void, Error>) -> Void)
  func updatePasswordWithFreshAccessToken(request: UpdatePasswordWithFreshAccessTokenRequestInterface, completion: @escaping (Result<Void, Error>) -> Void)
  func updatePasswordWithEmail(request: UpdatePasswordWithEmailRequestInterface, completion: @escaping (Result<Void, Error>) -> Void)
  func updatePasswordWithPhoneNumber(request: UpdatePasswordWithPhoneNumberRequestInterface, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReachFiveHostApiSetup {
  /// The codec used by ReachFiveHostApi.
  static var codec: FlutterStandardMessageCodec { ReachFiveHostApiCodec.shared }
  /// Sets up an instance of `ReachFiveHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ReachFiveHostApi?) {
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let reachFiveKeyArg = args[0] as! ReachFiveKeyInterface
        api.initialize(reachFiveKey: reachFiveKeyArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let signupChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.signup", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signupChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! SignupRequestInterface
        api.signup(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      signupChannel.setMessageHandler(nil)
    }
    let loginWithPasswordChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.loginWithPassword", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginWithPasswordChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! LoginWithPasswordRequestInterface
        api.loginWithPassword(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginWithPasswordChannel.setMessageHandler(nil)
    }
    let loginWithProviderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.loginWithProvider", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginWithProviderChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! LoginWithProviderRequestInterface
        api.loginWithProvider(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginWithProviderChannel.setMessageHandler(nil)
    }
    let logoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.logout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logoutChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let reachFiveKeyArg = args[0] as! ReachFiveKeyInterface
        api.logout(reachFiveKey: reachFiveKeyArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      logoutChannel.setMessageHandler(nil)
    }
    let getProfileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.getProfile", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getProfileChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! GetProfileRequestInterface
        api.getProfile(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getProfileChannel.setMessageHandler(nil)
    }
    let updateProfileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.updateProfile", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateProfileChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! UpdateProfileRequestInterface
        api.updateProfile(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      updateProfileChannel.setMessageHandler(nil)
    }
    let refreshAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      refreshAccessTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! RefreshAccessTokenRequestInterface
        api.refreshAccessToken(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      refreshAccessTokenChannel.setMessageHandler(nil)
    }
    let requestPasswordResetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.requestPasswordReset", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestPasswordResetChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! RequestPasswordResetRequestInterface
        api.requestPasswordReset(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestPasswordResetChannel.setMessageHandler(nil)
    }
    let updatePasswordWithAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithAccessToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePasswordWithAccessTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! UpdatePasswordWithAccessTokenRequestInterface
        api.updatePasswordWithAccessToken(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      updatePasswordWithAccessTokenChannel.setMessageHandler(nil)
    }
    let updatePasswordWithFreshAccessTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithFreshAccessToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePasswordWithFreshAccessTokenChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! UpdatePasswordWithFreshAccessTokenRequestInterface
        api.updatePasswordWithFreshAccessToken(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      updatePasswordWithFreshAccessTokenChannel.setMessageHandler(nil)
    }
    let updatePasswordWithEmailChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithEmail", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePasswordWithEmailChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! UpdatePasswordWithEmailRequestInterface
        api.updatePasswordWithEmail(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      updatePasswordWithEmailChannel.setMessageHandler(nil)
    }
    let updatePasswordWithPhoneNumberChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.ReachFiveHostApi.updatePasswordWithPhoneNumber", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePasswordWithPhoneNumberChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let requestArg = args[0] as! UpdatePasswordWithPhoneNumberRequestInterface
        api.updatePasswordWithPhoneNumber(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      updatePasswordWithPhoneNumberChannel.setMessageHandler(nil)
    }
  }
}
