// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, lines_longer_than_80_chars, prefer_constructors_over_static_methods
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class Infos {
  Infos({
    this.info1,
    this.info2,
  });

  String? info1;
  String? info2;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['info1'] = info1;
    pigeonMap['info2'] = info2;
    return pigeonMap;
  }

  static Infos decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return Infos(
      info1: pigeonMap['info1'] as String?,
      info2: pigeonMap['info2'] as String?,
    );
  }
}

class _FLutterInfosApiCodec extends StandardMessageCodec {
  const _FLutterInfosApiCodec();
}

abstract class FLutterInfosApi {
  static const MessageCodec<Object?> codec = _FLutterInfosApiCodec();

  void onSearch();
  static void setup(FLutterInfosApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FLutterInfosApi.onSearch',
        codec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onSearch();
          return;
        });
      }
    }
  }
}

class _HostInfosApiCodec extends StandardMessageCodec {
  const _HostInfosApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is Infos) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return Infos.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HostInfosApi {
  /// Constructor for [HostInfosApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostInfosApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HostInfosApiCodec();

  Future<Infos?> search() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      'dev.flutter.pigeon.HostInfosApi.search',
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as Infos?);
    }
  }
}
