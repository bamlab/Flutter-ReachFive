// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ProfileAddressTypeInterface {
  billing,
  delivery,
}

class ReachFiveConfigInterface {
  ReachFiveConfigInterface({
    required this.domain,
    required this.clientId,
    required this.scheme,
  });

  String domain;
  String clientId;
  String scheme;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['domain'] = domain;
    pigeonMap['clientId'] = clientId;
    pigeonMap['scheme'] = scheme;
    return pigeonMap;
  }

  static ReachFiveConfigInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ReachFiveConfigInterface(
      domain: pigeonMap['domain']! as String,
      clientId: pigeonMap['clientId']! as String,
      scheme: pigeonMap['scheme']! as String,
    );
  }
}

class ProfileAddressInterface {
  ProfileAddressInterface({
    this.title,
    this.isDefault,
    this.addressType,
    this.streetAddress,
    this.locality,
    this.region,
    this.postalCode,
    this.country,
    this.raw,
    this.deliveryNote,
    this.recipient,
    this.company,
    this.phoneNumber,
  });

  String? title;
  bool? isDefault;
  ProfileAddressTypeInterface? addressType;
  String? streetAddress;
  String? locality;
  String? region;
  String? postalCode;
  String? country;
  String? raw;
  String? deliveryNote;
  String? recipient;
  String? company;
  String? phoneNumber;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['title'] = title;
    pigeonMap['isDefault'] = isDefault;
    pigeonMap['addressType'] = addressType?.index;
    pigeonMap['streetAddress'] = streetAddress;
    pigeonMap['locality'] = locality;
    pigeonMap['region'] = region;
    pigeonMap['postalCode'] = postalCode;
    pigeonMap['country'] = country;
    pigeonMap['raw'] = raw;
    pigeonMap['deliveryNote'] = deliveryNote;
    pigeonMap['recipient'] = recipient;
    pigeonMap['company'] = company;
    pigeonMap['phoneNumber'] = phoneNumber;
    return pigeonMap;
  }

  static ProfileAddressInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ProfileAddressInterface(
      title: pigeonMap['title'] as String?,
      isDefault: pigeonMap['isDefault'] as bool?,
      addressType: pigeonMap['addressType'] != null
          ? ProfileAddressTypeInterface.values[pigeonMap['addressType']! as int]
          : null,
      streetAddress: pigeonMap['streetAddress'] as String?,
      locality: pigeonMap['locality'] as String?,
      region: pigeonMap['region'] as String?,
      postalCode: pigeonMap['postalCode'] as String?,
      country: pigeonMap['country'] as String?,
      raw: pigeonMap['raw'] as String?,
      deliveryNote: pigeonMap['deliveryNote'] as String?,
      recipient: pigeonMap['recipient'] as String?,
      company: pigeonMap['company'] as String?,
      phoneNumber: pigeonMap['phoneNumber'] as String?,
    );
  }
}

class ConsentInterface {
  ConsentInterface({
    required this.granted,
    this.consentType,
    required this.date,
  });

  bool granted;
  String? consentType;
  String date;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['granted'] = granted;
    pigeonMap['consentType'] = consentType;
    pigeonMap['date'] = date;
    return pigeonMap;
  }

  static ConsentInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ConsentInterface(
      granted: pigeonMap['granted']! as bool,
      consentType: pigeonMap['consentType'] as String?,
      date: pigeonMap['date']! as String,
    );
  }
}

class ProfileSignupRequestInterface {
  ProfileSignupRequestInterface({
    required this.password,
    this.email,
    this.phoneNumber,
    this.givenName,
    this.middleName,
    this.familyName,
    this.name,
    this.nickname,
    this.birthdate,
    this.profileURL,
    this.picture,
    this.username,
    this.gender,
    this.company,
    this.addresses,
    this.locale,
    this.bio,
    this.customFields,
    this.consents,
    this.liteOnly,
  });

  String password;
  String? email;
  String? phoneNumber;
  String? givenName;
  String? middleName;
  String? familyName;
  String? name;
  String? nickname;
  String? birthdate;
  String? profileURL;
  String? picture;
  String? username;
  String? gender;
  String? company;
  List<ProfileAddressInterface?>? addresses;
  String? locale;
  String? bio;
  Map<String?, Object?>? customFields;
  Map<String?, ConsentInterface?>? consents;
  bool? liteOnly;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['password'] = password;
    pigeonMap['email'] = email;
    pigeonMap['phoneNumber'] = phoneNumber;
    pigeonMap['givenName'] = givenName;
    pigeonMap['middleName'] = middleName;
    pigeonMap['familyName'] = familyName;
    pigeonMap['name'] = name;
    pigeonMap['nickname'] = nickname;
    pigeonMap['birthdate'] = birthdate;
    pigeonMap['profileURL'] = profileURL;
    pigeonMap['picture'] = picture;
    pigeonMap['username'] = username;
    pigeonMap['gender'] = gender;
    pigeonMap['company'] = company;
    pigeonMap['addresses'] = addresses;
    pigeonMap['locale'] = locale;
    pigeonMap['bio'] = bio;
    pigeonMap['customFields'] = customFields;
    pigeonMap['consents'] = consents;
    pigeonMap['liteOnly'] = liteOnly;
    return pigeonMap;
  }

  static ProfileSignupRequestInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ProfileSignupRequestInterface(
      password: pigeonMap['password']! as String,
      email: pigeonMap['email'] as String?,
      phoneNumber: pigeonMap['phoneNumber'] as String?,
      givenName: pigeonMap['givenName'] as String?,
      middleName: pigeonMap['middleName'] as String?,
      familyName: pigeonMap['familyName'] as String?,
      name: pigeonMap['name'] as String?,
      nickname: pigeonMap['nickname'] as String?,
      birthdate: pigeonMap['birthdate'] as String?,
      profileURL: pigeonMap['profileURL'] as String?,
      picture: pigeonMap['picture'] as String?,
      username: pigeonMap['username'] as String?,
      gender: pigeonMap['gender'] as String?,
      company: pigeonMap['company'] as String?,
      addresses: (pigeonMap['addresses'] as List<Object?>?)
          ?.cast<ProfileAddressInterface?>(),
      locale: pigeonMap['locale'] as String?,
      bio: pigeonMap['bio'] as String?,
      customFields: (pigeonMap['customFields'] as Map<Object?, Object?>?)
          ?.cast<String?, Object?>(),
      consents: (pigeonMap['consents'] as Map<Object?, Object?>?)
          ?.cast<String?, ConsentInterface?>(),
      liteOnly: pigeonMap['liteOnly'] as bool?,
    );
  }
}

class SignupRequestInterface {
  SignupRequestInterface({
    required this.config,
    required this.profile,
    this.redirectUrl,
    this.scope,
  });

  ReachFiveConfigInterface config;
  ProfileSignupRequestInterface profile;
  String? redirectUrl;
  List<String?>? scope;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['config'] = config.encode();
    pigeonMap['profile'] = profile.encode();
    pigeonMap['redirectUrl'] = redirectUrl;
    pigeonMap['scope'] = scope;
    return pigeonMap;
  }

  static SignupRequestInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return SignupRequestInterface(
      config: ReachFiveConfigInterface.decode(pigeonMap['config']!),
      profile: ProfileSignupRequestInterface.decode(pigeonMap['profile']!),
      redirectUrl: pigeonMap['redirectUrl'] as String?,
      scope: (pigeonMap['scope'] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class AddressInterface {
  AddressInterface({
    this.formatted,
    this.streetAddress,
    this.locality,
    this.region,
    this.postalCode,
    this.country,
  });

  String? formatted;
  String? streetAddress;
  String? locality;
  String? region;
  String? postalCode;
  String? country;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['formatted'] = formatted;
    pigeonMap['streetAddress'] = streetAddress;
    pigeonMap['locality'] = locality;
    pigeonMap['region'] = region;
    pigeonMap['postalCode'] = postalCode;
    pigeonMap['country'] = country;
    return pigeonMap;
  }

  static AddressInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AddressInterface(
      formatted: pigeonMap['formatted'] as String?,
      streetAddress: pigeonMap['streetAddress'] as String?,
      locality: pigeonMap['locality'] as String?,
      region: pigeonMap['region'] as String?,
      postalCode: pigeonMap['postalCode'] as String?,
      country: pigeonMap['country'] as String?,
    );
  }
}

class OpenIdUserInterface {
  OpenIdUserInterface({
    this.id,
    this.name,
    this.preferredUsername,
    this.givenName,
    this.familyName,
    this.middleName,
    this.nickname,
    this.picture,
    this.website,
    this.email,
    this.emailVerified,
    this.gender,
    this.zoneinfo,
    this.locale,
    this.phoneNumber,
    this.phoneNumberVerified,
    this.address,
    this.birthdate,
    this.externalId,
  });

  String? id;
  String? name;
  String? preferredUsername;
  String? givenName;
  String? familyName;
  String? middleName;
  String? nickname;
  String? picture;
  String? website;
  String? email;
  bool? emailVerified;
  String? gender;
  String? zoneinfo;
  String? locale;
  String? phoneNumber;
  bool? phoneNumberVerified;
  AddressInterface? address;
  String? birthdate;
  String? externalId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['id'] = id;
    pigeonMap['name'] = name;
    pigeonMap['preferredUsername'] = preferredUsername;
    pigeonMap['givenName'] = givenName;
    pigeonMap['familyName'] = familyName;
    pigeonMap['middleName'] = middleName;
    pigeonMap['nickname'] = nickname;
    pigeonMap['picture'] = picture;
    pigeonMap['website'] = website;
    pigeonMap['email'] = email;
    pigeonMap['emailVerified'] = emailVerified;
    pigeonMap['gender'] = gender;
    pigeonMap['zoneinfo'] = zoneinfo;
    pigeonMap['locale'] = locale;
    pigeonMap['phoneNumber'] = phoneNumber;
    pigeonMap['phoneNumberVerified'] = phoneNumberVerified;
    pigeonMap['address'] = address?.encode();
    pigeonMap['birthdate'] = birthdate;
    pigeonMap['externalId'] = externalId;
    return pigeonMap;
  }

  static OpenIdUserInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return OpenIdUserInterface(
      id: pigeonMap['id'] as String?,
      name: pigeonMap['name'] as String?,
      preferredUsername: pigeonMap['preferredUsername'] as String?,
      givenName: pigeonMap['givenName'] as String?,
      familyName: pigeonMap['familyName'] as String?,
      middleName: pigeonMap['middleName'] as String?,
      nickname: pigeonMap['nickname'] as String?,
      picture: pigeonMap['picture'] as String?,
      website: pigeonMap['website'] as String?,
      email: pigeonMap['email'] as String?,
      emailVerified: pigeonMap['emailVerified'] as bool?,
      gender: pigeonMap['gender'] as String?,
      zoneinfo: pigeonMap['zoneinfo'] as String?,
      locale: pigeonMap['locale'] as String?,
      phoneNumber: pigeonMap['phoneNumber'] as String?,
      phoneNumberVerified: pigeonMap['phoneNumberVerified'] as bool?,
      address: pigeonMap['address'] != null
          ? AddressInterface.decode(pigeonMap['address']!)
          : null,
      birthdate: pigeonMap['birthdate'] as String?,
      externalId: pigeonMap['externalId'] as String?,
    );
  }
}

class AuthTokenInterface {
  AuthTokenInterface({
    this.idToken,
    required this.accessToken,
    this.refreshToken,
    this.tokenType,
    this.expiresIn,
    this.user,
  });

  String? idToken;
  String accessToken;
  String? refreshToken;
  String? tokenType;
  int? expiresIn;
  OpenIdUserInterface? user;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['idToken'] = idToken;
    pigeonMap['accessToken'] = accessToken;
    pigeonMap['refreshToken'] = refreshToken;
    pigeonMap['tokenType'] = tokenType;
    pigeonMap['expiresIn'] = expiresIn;
    pigeonMap['user'] = user?.encode();
    return pigeonMap;
  }

  static AuthTokenInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AuthTokenInterface(
      idToken: pigeonMap['idToken'] as String?,
      accessToken: pigeonMap['accessToken']! as String,
      refreshToken: pigeonMap['refreshToken'] as String?,
      tokenType: pigeonMap['tokenType'] as String?,
      expiresIn: pigeonMap['expiresIn'] as int?,
      user: pigeonMap['user'] != null
          ? OpenIdUserInterface.decode(pigeonMap['user']!)
          : null,
    );
  }
}

class LoginWithPasswordRequestInterface {
  LoginWithPasswordRequestInterface({
    required this.config,
    this.email,
    this.phoneNumber,
    required this.password,
    this.scope,
  });

  ReachFiveConfigInterface config;
  String? email;
  String? phoneNumber;
  String password;
  List<String?>? scope;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['config'] = config.encode();
    pigeonMap['email'] = email;
    pigeonMap['phoneNumber'] = phoneNumber;
    pigeonMap['password'] = password;
    pigeonMap['scope'] = scope;
    return pigeonMap;
  }

  static LoginWithPasswordRequestInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LoginWithPasswordRequestInterface(
      config: ReachFiveConfigInterface.decode(pigeonMap['config']!),
      email: pigeonMap['email'] as String?,
      phoneNumber: pigeonMap['phoneNumber'] as String?,
      password: pigeonMap['password']! as String,
      scope: (pigeonMap['scope'] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class RefreshAccessTokenRequestInterface {
  RefreshAccessTokenRequestInterface({
    required this.config,
    required this.authToken,
  });

  ReachFiveConfigInterface config;
  AuthTokenInterface authToken;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['config'] = config.encode();
    pigeonMap['authToken'] = authToken.encode();
    return pigeonMap;
  }

  static RefreshAccessTokenRequestInterface decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RefreshAccessTokenRequestInterface(
      config: ReachFiveConfigInterface.decode(pigeonMap['config']!),
      authToken: AuthTokenInterface.decode(pigeonMap['authToken']!),
    );
  }
}

class _ReachFiveHostApiCodec extends StandardMessageCodec {
  const _ReachFiveHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AddressInterface) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AuthTokenInterface) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ConsentInterface) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is LoginWithPasswordRequestInterface) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is OpenIdUserInterface) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ProfileAddressInterface) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ProfileSignupRequestInterface) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ReachFiveConfigInterface) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is RefreshAccessTokenRequestInterface) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is SignupRequestInterface) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AddressInterface.decode(readValue(buffer)!);

      case 129:
        return AuthTokenInterface.decode(readValue(buffer)!);

      case 130:
        return ConsentInterface.decode(readValue(buffer)!);

      case 131:
        return LoginWithPasswordRequestInterface.decode(readValue(buffer)!);

      case 132:
        return OpenIdUserInterface.decode(readValue(buffer)!);

      case 133:
        return ProfileAddressInterface.decode(readValue(buffer)!);

      case 134:
        return ProfileSignupRequestInterface.decode(readValue(buffer)!);

      case 135:
        return ReachFiveConfigInterface.decode(readValue(buffer)!);

      case 136:
        return RefreshAccessTokenRequestInterface.decode(readValue(buffer)!);

      case 137:
        return SignupRequestInterface.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ReachFiveHostApi {
  /// Constructor for [ReachFiveHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReachFiveHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ReachFiveHostApiCodec();

  Future<ReachFiveConfigInterface> initialize(
      ReachFiveConfigInterface arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReachFiveHostApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as ReachFiveConfigInterface?)!;
    }
  }

  Future<AuthTokenInterface> signup(SignupRequestInterface arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReachFiveHostApi.signup', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AuthTokenInterface?)!;
    }
  }

  Future<AuthTokenInterface> loginWithPassword(
      LoginWithPasswordRequestInterface arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReachFiveHostApi.loginWithPassword', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AuthTokenInterface?)!;
    }
  }

  Future<void> logout(ReachFiveConfigInterface arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReachFiveHostApi.logout', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<AuthTokenInterface> refreshAccessToken(
      RefreshAccessTokenRequestInterface arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReachFiveHostApi.refreshAccessToken', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AuthTokenInterface?)!;
    }
  }
}
