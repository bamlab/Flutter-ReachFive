// Autogenerated from Pigeon (v17.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum ProviderCreatorTypeInterface {
  google,
  facebook,
  webview,
}

enum ProfileAddressTypeInterface {
  billing,
  delivery,
}

class ErrorCodesInterface {
  ErrorCodesInterface({
    required this.emailAlreadyInUseCode,
    required this.invalidEmailOrPasswordCode,
    required this.invalidVerificationCode,
    required this.updateSamePassword,
    required this.invalidGrant,
    required this.userCancelledOrClosedTheWebFlow,
    required this.socialAccountEmailAlreadyInUse,
  });

  String emailAlreadyInUseCode;

  String invalidEmailOrPasswordCode;

  String invalidVerificationCode;

  String updateSamePassword;

  String invalidGrant;

  String userCancelledOrClosedTheWebFlow;

  String socialAccountEmailAlreadyInUse;

  Object encode() {
    return <Object?>[
      emailAlreadyInUseCode,
      invalidEmailOrPasswordCode,
      invalidVerificationCode,
      updateSamePassword,
      invalidGrant,
      userCancelledOrClosedTheWebFlow,
      socialAccountEmailAlreadyInUse,
    ];
  }

  static ErrorCodesInterface decode(Object result) {
    result as List<Object?>;
    return ErrorCodesInterface(
      emailAlreadyInUseCode: result[0]! as String,
      invalidEmailOrPasswordCode: result[1]! as String,
      invalidVerificationCode: result[2]! as String,
      updateSamePassword: result[3]! as String,
      invalidGrant: result[4]! as String,
      userCancelledOrClosedTheWebFlow: result[5]! as String,
      socialAccountEmailAlreadyInUse: result[6]! as String,
    );
  }
}

class SdkConfigInterface {
  SdkConfigInterface({
    required this.domain,
    required this.clientId,
    required this.androidScheme,
    required this.iosScheme,
  });

  String domain;

  String clientId;

  String androidScheme;

  String iosScheme;

  Object encode() {
    return <Object?>[
      domain,
      clientId,
      androidScheme,
      iosScheme,
    ];
  }

  static SdkConfigInterface decode(Object result) {
    result as List<Object?>;
    return SdkConfigInterface(
      domain: result[0]! as String,
      clientId: result[1]! as String,
      androidScheme: result[2]! as String,
      iosScheme: result[3]! as String,
    );
  }
}

class ProviderCreatorInterface {
  ProviderCreatorInterface({
    required this.type,
  });

  ProviderCreatorTypeInterface type;

  Object encode() {
    return <Object?>[
      type.index,
    ];
  }

  static ProviderCreatorInterface decode(Object result) {
    result as List<Object?>;
    return ProviderCreatorInterface(
      type: ProviderCreatorTypeInterface.values[result[0]! as int],
    );
  }
}

class ReachFiveKeyInterface {
  ReachFiveKeyInterface({
    required this.sdkConfig,
    required this.providerCreators,
  });

  SdkConfigInterface sdkConfig;

  List<ProviderCreatorInterface?> providerCreators;

  Object encode() {
    return <Object?>[
      sdkConfig.encode(),
      providerCreators,
    ];
  }

  static ReachFiveKeyInterface decode(Object result) {
    result as List<Object?>;
    return ReachFiveKeyInterface(
      sdkConfig: SdkConfigInterface.decode(result[0]! as List<Object?>),
      providerCreators:
          (result[1] as List<Object?>?)!.cast<ProviderCreatorInterface?>(),
    );
  }
}

class ReachFiveConfigInterface {
  ReachFiveConfigInterface({
    required this.reachFiveKey,
    required this.providers,
  });

  ReachFiveKeyInterface reachFiveKey;

  List<String?> providers;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      providers,
    ];
  }

  static ReachFiveConfigInterface decode(Object result) {
    result as List<Object?>;
    return ReachFiveConfigInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      providers: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class ProfileAddressInterface {
  ProfileAddressInterface({
    this.title,
    this.isDefault,
    this.addressType,
    this.streetAddress,
    this.locality,
    this.region,
    this.postalCode,
    this.country,
    this.raw,
    this.deliveryNote,
    this.recipient,
    this.company,
    this.phoneNumber,
  });

  String? title;

  bool? isDefault;

  ProfileAddressTypeInterface? addressType;

  String? streetAddress;

  String? locality;

  String? region;

  String? postalCode;

  String? country;

  String? raw;

  String? deliveryNote;

  String? recipient;

  String? company;

  String? phoneNumber;

  Object encode() {
    return <Object?>[
      title,
      isDefault,
      addressType?.index,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
      raw,
      deliveryNote,
      recipient,
      company,
      phoneNumber,
    ];
  }

  static ProfileAddressInterface decode(Object result) {
    result as List<Object?>;
    return ProfileAddressInterface(
      title: result[0] as String?,
      isDefault: result[1] as bool?,
      addressType: result[2] != null
          ? ProfileAddressTypeInterface.values[result[2]! as int]
          : null,
      streetAddress: result[3] as String?,
      locality: result[4] as String?,
      region: result[5] as String?,
      postalCode: result[6] as String?,
      country: result[7] as String?,
      raw: result[8] as String?,
      deliveryNote: result[9] as String?,
      recipient: result[10] as String?,
      company: result[11] as String?,
      phoneNumber: result[12] as String?,
    );
  }
}

class ConsentInterface {
  ConsentInterface({
    required this.granted,
    this.consentType,
    required this.date,
  });

  bool granted;

  String? consentType;

  String date;

  Object encode() {
    return <Object?>[
      granted,
      consentType,
      date,
    ];
  }

  static ConsentInterface decode(Object result) {
    result as List<Object?>;
    return ConsentInterface(
      granted: result[0]! as bool,
      consentType: result[1] as String?,
      date: result[2]! as String,
    );
  }
}

class ProfileSignupRequestInterface {
  ProfileSignupRequestInterface({
    required this.password,
    this.email,
    this.phoneNumber,
    this.givenName,
    this.middleName,
    this.familyName,
    this.name,
    this.nickname,
    this.birthdate,
    this.profileURL,
    this.picture,
    this.username,
    this.gender,
    this.company,
    this.addresses,
    this.locale,
    this.bio,
    this.customFields,
    this.consents,
    this.liteOnly,
  });

  String password;

  String? email;

  String? phoneNumber;

  String? givenName;

  String? middleName;

  String? familyName;

  String? name;

  String? nickname;

  String? birthdate;

  String? profileURL;

  String? picture;

  String? username;

  String? gender;

  String? company;

  List<ProfileAddressInterface?>? addresses;

  String? locale;

  String? bio;

  Map<String?, Object?>? customFields;

  Map<String?, ConsentInterface?>? consents;

  bool? liteOnly;

  Object encode() {
    return <Object?>[
      password,
      email,
      phoneNumber,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      username,
      gender,
      company,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      liteOnly,
    ];
  }

  static ProfileSignupRequestInterface decode(Object result) {
    result as List<Object?>;
    return ProfileSignupRequestInterface(
      password: result[0]! as String,
      email: result[1] as String?,
      phoneNumber: result[2] as String?,
      givenName: result[3] as String?,
      middleName: result[4] as String?,
      familyName: result[5] as String?,
      name: result[6] as String?,
      nickname: result[7] as String?,
      birthdate: result[8] as String?,
      profileURL: result[9] as String?,
      picture: result[10] as String?,
      username: result[11] as String?,
      gender: result[12] as String?,
      company: result[13] as String?,
      addresses:
          (result[14] as List<Object?>?)?.cast<ProfileAddressInterface?>(),
      locale: result[15] as String?,
      bio: result[16] as String?,
      customFields:
          (result[17] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      consents: (result[18] as Map<Object?, Object?>?)
          ?.cast<String?, ConsentInterface?>(),
      liteOnly: result[19] as bool?,
    );
  }
}

class SignupRequestInterface {
  SignupRequestInterface({
    required this.reachFiveKey,
    required this.profile,
    this.redirectUrl,
    this.scope,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  ProfileSignupRequestInterface profile;

  String? redirectUrl;

  List<String?>? scope;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      profile.encode(),
      redirectUrl,
      scope,
      errorCodes.encode(),
    ];
  }

  static SignupRequestInterface decode(Object result) {
    result as List<Object?>;
    return SignupRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      profile:
          ProfileSignupRequestInterface.decode(result[1]! as List<Object?>),
      redirectUrl: result[2] as String?,
      scope: (result[3] as List<Object?>?)?.cast<String?>(),
      errorCodes: ErrorCodesInterface.decode(result[4]! as List<Object?>),
    );
  }
}

class AddressInterface {
  AddressInterface({
    this.formatted,
    this.streetAddress,
    this.locality,
    this.region,
    this.postalCode,
    this.country,
  });

  String? formatted;

  String? streetAddress;

  String? locality;

  String? region;

  String? postalCode;

  String? country;

  Object encode() {
    return <Object?>[
      formatted,
      streetAddress,
      locality,
      region,
      postalCode,
      country,
    ];
  }

  static AddressInterface decode(Object result) {
    result as List<Object?>;
    return AddressInterface(
      formatted: result[0] as String?,
      streetAddress: result[1] as String?,
      locality: result[2] as String?,
      region: result[3] as String?,
      postalCode: result[4] as String?,
      country: result[5] as String?,
    );
  }
}

class OpenIdUserInterface {
  OpenIdUserInterface({
    this.id,
    this.name,
    this.preferredUsername,
    this.givenName,
    this.familyName,
    this.middleName,
    this.nickname,
    this.picture,
    this.website,
    this.email,
    this.emailVerified,
    this.gender,
    this.zoneinfo,
    this.locale,
    this.phoneNumber,
    this.phoneNumberVerified,
    this.address,
    this.birthdate,
    this.externalId,
  });

  String? id;

  String? name;

  String? preferredUsername;

  String? givenName;

  String? familyName;

  String? middleName;

  String? nickname;

  String? picture;

  String? website;

  String? email;

  bool? emailVerified;

  String? gender;

  String? zoneinfo;

  String? locale;

  String? phoneNumber;

  bool? phoneNumberVerified;

  AddressInterface? address;

  String? birthdate;

  String? externalId;

  Object encode() {
    return <Object?>[
      id,
      name,
      preferredUsername,
      givenName,
      familyName,
      middleName,
      nickname,
      picture,
      website,
      email,
      emailVerified,
      gender,
      zoneinfo,
      locale,
      phoneNumber,
      phoneNumberVerified,
      address?.encode(),
      birthdate,
      externalId,
    ];
  }

  static OpenIdUserInterface decode(Object result) {
    result as List<Object?>;
    return OpenIdUserInterface(
      id: result[0] as String?,
      name: result[1] as String?,
      preferredUsername: result[2] as String?,
      givenName: result[3] as String?,
      familyName: result[4] as String?,
      middleName: result[5] as String?,
      nickname: result[6] as String?,
      picture: result[7] as String?,
      website: result[8] as String?,
      email: result[9] as String?,
      emailVerified: result[10] as bool?,
      gender: result[11] as String?,
      zoneinfo: result[12] as String?,
      locale: result[13] as String?,
      phoneNumber: result[14] as String?,
      phoneNumberVerified: result[15] as bool?,
      address: result[16] != null
          ? AddressInterface.decode(result[16]! as List<Object?>)
          : null,
      birthdate: result[17] as String?,
      externalId: result[18] as String?,
    );
  }
}

class AuthTokenInterface {
  AuthTokenInterface({
    this.idToken,
    required this.accessToken,
    this.refreshToken,
    this.tokenType,
    this.expiresIn,
    this.user,
  });

  String? idToken;

  String accessToken;

  String? refreshToken;

  String? tokenType;

  int? expiresIn;

  OpenIdUserInterface? user;

  Object encode() {
    return <Object?>[
      idToken,
      accessToken,
      refreshToken,
      tokenType,
      expiresIn,
      user?.encode(),
    ];
  }

  static AuthTokenInterface decode(Object result) {
    result as List<Object?>;
    return AuthTokenInterface(
      idToken: result[0] as String?,
      accessToken: result[1]! as String,
      refreshToken: result[2] as String?,
      tokenType: result[3] as String?,
      expiresIn: result[4] as int?,
      user: result[5] != null
          ? OpenIdUserInterface.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class LoginWithPasswordRequestInterface {
  LoginWithPasswordRequestInterface({
    required this.reachFiveKey,
    this.email,
    this.phoneNumber,
    required this.password,
    this.scope,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  String? email;

  String? phoneNumber;

  String password;

  List<String?>? scope;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      email,
      phoneNumber,
      password,
      scope,
      errorCodes.encode(),
    ];
  }

  static LoginWithPasswordRequestInterface decode(Object result) {
    result as List<Object?>;
    return LoginWithPasswordRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      email: result[1] as String?,
      phoneNumber: result[2] as String?,
      password: result[3]! as String,
      scope: (result[4] as List<Object?>?)?.cast<String?>(),
      errorCodes: ErrorCodesInterface.decode(result[5]! as List<Object?>),
    );
  }
}

class LoginWithProviderRequestInterface {
  LoginWithProviderRequestInterface({
    required this.reachFiveKey,
    required this.provider,
    required this.origin,
    this.scope,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  String provider;

  String origin;

  List<String?>? scope;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      provider,
      origin,
      scope,
      errorCodes.encode(),
    ];
  }

  static LoginWithProviderRequestInterface decode(Object result) {
    result as List<Object?>;
    return LoginWithProviderRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      provider: result[1]! as String,
      origin: result[2]! as String,
      scope: (result[3] as List<Object?>?)?.cast<String?>(),
      errorCodes: ErrorCodesInterface.decode(result[4]! as List<Object?>),
    );
  }
}

class RefreshAccessTokenRequestInterface {
  RefreshAccessTokenRequestInterface({
    required this.reachFiveKey,
    required this.authToken,
  });

  ReachFiveKeyInterface reachFiveKey;

  AuthTokenInterface authToken;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      authToken.encode(),
    ];
  }

  static RefreshAccessTokenRequestInterface decode(Object result) {
    result as List<Object?>;
    return RefreshAccessTokenRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      authToken: AuthTokenInterface.decode(result[1]! as List<Object?>),
    );
  }
}

class LoginSummaryInterface {
  LoginSummaryInterface({
    this.firstLogin,
    this.lastLogin,
    this.total,
    this.origins,
    this.devices,
    this.lastProvider,
  });

  double? firstLogin;

  double? lastLogin;

  int? total;

  List<String?>? origins;

  List<String?>? devices;

  String? lastProvider;

  Object encode() {
    return <Object?>[
      firstLogin,
      lastLogin,
      total,
      origins,
      devices,
      lastProvider,
    ];
  }

  static LoginSummaryInterface decode(Object result) {
    result as List<Object?>;
    return LoginSummaryInterface(
      firstLogin: result[0] as double?,
      lastLogin: result[1] as double?,
      total: result[2] as int?,
      origins: (result[3] as List<Object?>?)?.cast<String?>(),
      devices: (result[4] as List<Object?>?)?.cast<String?>(),
      lastProvider: result[5] as String?,
    );
  }
}

class EmailsInterface {
  EmailsInterface({
    this.verified,
    this.unverified,
  });

  List<String?>? verified;

  List<String?>? unverified;

  Object encode() {
    return <Object?>[
      verified,
      unverified,
    ];
  }

  static EmailsInterface decode(Object result) {
    result as List<Object?>;
    return EmailsInterface(
      verified: (result[0] as List<Object?>?)?.cast<String?>(),
      unverified: (result[1] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class ProfileInterface {
  ProfileInterface({
    this.uid,
    this.givenName,
    this.middleName,
    this.familyName,
    this.name,
    this.nickname,
    this.birthdate,
    this.profileURL,
    this.picture,
    this.externalId,
    this.authTypes,
    this.loginSummary,
    this.username,
    this.gender,
    this.email,
    this.emailVerified,
    this.emails,
    this.phoneNumber,
    this.phoneNumberVerified,
    this.addresses,
    this.locale,
    this.bio,
    this.customFields,
    this.consents,
    this.createdAt,
    this.updatedAt,
    this.liteOnly,
    this.company,
  });

  String? uid;

  String? givenName;

  String? middleName;

  String? familyName;

  String? name;

  String? nickname;

  String? birthdate;

  String? profileURL;

  String? picture;

  String? externalId;

  List<String?>? authTypes;

  LoginSummaryInterface? loginSummary;

  String? username;

  String? gender;

  String? email;

  bool? emailVerified;

  EmailsInterface? emails;

  String? phoneNumber;

  bool? phoneNumberVerified;

  List<ProfileAddressInterface?>? addresses;

  String? locale;

  String? bio;

  Map<String?, Object?>? customFields;

  Map<String?, ConsentInterface?>? consents;

  String? createdAt;

  String? updatedAt;

  bool? liteOnly;

  String? company;

  Object encode() {
    return <Object?>[
      uid,
      givenName,
      middleName,
      familyName,
      name,
      nickname,
      birthdate,
      profileURL,
      picture,
      externalId,
      authTypes,
      loginSummary?.encode(),
      username,
      gender,
      email,
      emailVerified,
      emails?.encode(),
      phoneNumber,
      phoneNumberVerified,
      addresses,
      locale,
      bio,
      customFields,
      consents,
      createdAt,
      updatedAt,
      liteOnly,
      company,
    ];
  }

  static ProfileInterface decode(Object result) {
    result as List<Object?>;
    return ProfileInterface(
      uid: result[0] as String?,
      givenName: result[1] as String?,
      middleName: result[2] as String?,
      familyName: result[3] as String?,
      name: result[4] as String?,
      nickname: result[5] as String?,
      birthdate: result[6] as String?,
      profileURL: result[7] as String?,
      picture: result[8] as String?,
      externalId: result[9] as String?,
      authTypes: (result[10] as List<Object?>?)?.cast<String?>(),
      loginSummary: result[11] != null
          ? LoginSummaryInterface.decode(result[11]! as List<Object?>)
          : null,
      username: result[12] as String?,
      gender: result[13] as String?,
      email: result[14] as String?,
      emailVerified: result[15] as bool?,
      emails: result[16] != null
          ? EmailsInterface.decode(result[16]! as List<Object?>)
          : null,
      phoneNumber: result[17] as String?,
      phoneNumberVerified: result[18] as bool?,
      addresses:
          (result[19] as List<Object?>?)?.cast<ProfileAddressInterface?>(),
      locale: result[20] as String?,
      bio: result[21] as String?,
      customFields:
          (result[22] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      consents: (result[23] as Map<Object?, Object?>?)
          ?.cast<String?, ConsentInterface?>(),
      createdAt: result[24] as String?,
      updatedAt: result[25] as String?,
      liteOnly: result[26] as bool?,
      company: result[27] as String?,
    );
  }
}

class GetProfileRequestInterface {
  GetProfileRequestInterface({
    required this.reachFiveKey,
    required this.authToken,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  AuthTokenInterface authToken;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      authToken.encode(),
      errorCodes.encode(),
    ];
  }

  static GetProfileRequestInterface decode(Object result) {
    result as List<Object?>;
    return GetProfileRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      authToken: AuthTokenInterface.decode(result[1]! as List<Object?>),
      errorCodes: ErrorCodesInterface.decode(result[2]! as List<Object?>),
    );
  }
}

class UpdateProfileRequestInterface {
  UpdateProfileRequestInterface({
    required this.reachFiveKey,
    required this.authToken,
    required this.profile,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  AuthTokenInterface authToken;

  ProfileInterface profile;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      authToken.encode(),
      profile.encode(),
      errorCodes.encode(),
    ];
  }

  static UpdateProfileRequestInterface decode(Object result) {
    result as List<Object?>;
    return UpdateProfileRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      authToken: AuthTokenInterface.decode(result[1]! as List<Object?>),
      profile: ProfileInterface.decode(result[2]! as List<Object?>),
      errorCodes: ErrorCodesInterface.decode(result[3]! as List<Object?>),
    );
  }
}

class RequestPasswordResetRequestInterface {
  RequestPasswordResetRequestInterface({
    required this.reachFiveKey,
    this.email,
    this.phoneNumber,
    this.redirectUrl,
  });

  ReachFiveKeyInterface reachFiveKey;

  String? email;

  String? phoneNumber;

  String? redirectUrl;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      email,
      phoneNumber,
      redirectUrl,
    ];
  }

  static RequestPasswordResetRequestInterface decode(Object result) {
    result as List<Object?>;
    return RequestPasswordResetRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      email: result[1] as String?,
      phoneNumber: result[2] as String?,
      redirectUrl: result[3] as String?,
    );
  }
}

class UpdatePasswordWithAccessTokenRequestInterface {
  UpdatePasswordWithAccessTokenRequestInterface({
    required this.reachFiveKey,
    required this.authToken,
    required this.oldPassword,
    required this.password,
  });

  ReachFiveKeyInterface reachFiveKey;

  AuthTokenInterface authToken;

  String oldPassword;

  String password;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      authToken.encode(),
      oldPassword,
      password,
    ];
  }

  static UpdatePasswordWithAccessTokenRequestInterface decode(Object result) {
    result as List<Object?>;
    return UpdatePasswordWithAccessTokenRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      authToken: AuthTokenInterface.decode(result[1]! as List<Object?>),
      oldPassword: result[2]! as String,
      password: result[3]! as String,
    );
  }
}

class UpdatePasswordWithFreshAccessTokenRequestInterface {
  UpdatePasswordWithFreshAccessTokenRequestInterface({
    required this.reachFiveKey,
    required this.freshAuthToken,
    required this.password,
  });

  ReachFiveKeyInterface reachFiveKey;

  AuthTokenInterface freshAuthToken;

  String password;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      freshAuthToken.encode(),
      password,
    ];
  }

  static UpdatePasswordWithFreshAccessTokenRequestInterface decode(
      Object result) {
    result as List<Object?>;
    return UpdatePasswordWithFreshAccessTokenRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      freshAuthToken: AuthTokenInterface.decode(result[1]! as List<Object?>),
      password: result[2]! as String,
    );
  }
}

class UpdatePasswordWithEmailRequestInterface {
  UpdatePasswordWithEmailRequestInterface({
    required this.reachFiveKey,
    required this.email,
    required this.verificationCode,
    required this.password,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  String email;

  String verificationCode;

  String password;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      email,
      verificationCode,
      password,
      errorCodes.encode(),
    ];
  }

  static UpdatePasswordWithEmailRequestInterface decode(Object result) {
    result as List<Object?>;
    return UpdatePasswordWithEmailRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      email: result[1]! as String,
      verificationCode: result[2]! as String,
      password: result[3]! as String,
      errorCodes: ErrorCodesInterface.decode(result[4]! as List<Object?>),
    );
  }
}

class UpdatePasswordWithPhoneNumberRequestInterface {
  UpdatePasswordWithPhoneNumberRequestInterface({
    required this.reachFiveKey,
    required this.phoneNumber,
    required this.verificationCode,
    required this.password,
    required this.errorCodes,
  });

  ReachFiveKeyInterface reachFiveKey;

  String phoneNumber;

  String verificationCode;

  String password;

  ErrorCodesInterface errorCodes;

  Object encode() {
    return <Object?>[
      reachFiveKey.encode(),
      phoneNumber,
      verificationCode,
      password,
      errorCodes.encode(),
    ];
  }

  static UpdatePasswordWithPhoneNumberRequestInterface decode(Object result) {
    result as List<Object?>;
    return UpdatePasswordWithPhoneNumberRequestInterface(
      reachFiveKey: ReachFiveKeyInterface.decode(result[0]! as List<Object?>),
      phoneNumber: result[1]! as String,
      verificationCode: result[2]! as String,
      password: result[3]! as String,
      errorCodes: ErrorCodesInterface.decode(result[4]! as List<Object?>),
    );
  }
}

class _ReachFiveHostApiCodec extends StandardMessageCodec {
  const _ReachFiveHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AddressInterface) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AuthTokenInterface) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ConsentInterface) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is EmailsInterface) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ErrorCodesInterface) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is GetProfileRequestInterface) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is LoginSummaryInterface) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is LoginWithPasswordRequestInterface) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is LoginWithProviderRequestInterface) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is OpenIdUserInterface) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ProfileAddressInterface) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ProfileInterface) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ProfileSignupRequestInterface) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ProviderCreatorInterface) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ReachFiveConfigInterface) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is ReachFiveKeyInterface) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is RefreshAccessTokenRequestInterface) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is RequestPasswordResetRequestInterface) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is SdkConfigInterface) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is SignupRequestInterface) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is UpdatePasswordWithAccessTokenRequestInterface) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is UpdatePasswordWithEmailRequestInterface) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is UpdatePasswordWithFreshAccessTokenRequestInterface) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is UpdatePasswordWithPhoneNumberRequestInterface) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is UpdateProfileRequestInterface) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AddressInterface.decode(readValue(buffer)!);
      case 129:
        return AuthTokenInterface.decode(readValue(buffer)!);
      case 130:
        return ConsentInterface.decode(readValue(buffer)!);
      case 131:
        return EmailsInterface.decode(readValue(buffer)!);
      case 132:
        return ErrorCodesInterface.decode(readValue(buffer)!);
      case 133:
        return GetProfileRequestInterface.decode(readValue(buffer)!);
      case 134:
        return LoginSummaryInterface.decode(readValue(buffer)!);
      case 135:
        return LoginWithPasswordRequestInterface.decode(readValue(buffer)!);
      case 136:
        return LoginWithProviderRequestInterface.decode(readValue(buffer)!);
      case 137:
        return OpenIdUserInterface.decode(readValue(buffer)!);
      case 138:
        return ProfileAddressInterface.decode(readValue(buffer)!);
      case 139:
        return ProfileInterface.decode(readValue(buffer)!);
      case 140:
        return ProfileSignupRequestInterface.decode(readValue(buffer)!);
      case 141:
        return ProviderCreatorInterface.decode(readValue(buffer)!);
      case 142:
        return ReachFiveConfigInterface.decode(readValue(buffer)!);
      case 143:
        return ReachFiveKeyInterface.decode(readValue(buffer)!);
      case 144:
        return RefreshAccessTokenRequestInterface.decode(readValue(buffer)!);
      case 145:
        return RequestPasswordResetRequestInterface.decode(readValue(buffer)!);
      case 146:
        return SdkConfigInterface.decode(readValue(buffer)!);
      case 147:
        return SignupRequestInterface.decode(readValue(buffer)!);
      case 148:
        return UpdatePasswordWithAccessTokenRequestInterface.decode(
            readValue(buffer)!);
      case 149:
        return UpdatePasswordWithEmailRequestInterface.decode(
            readValue(buffer)!);
      case 150:
        return UpdatePasswordWithFreshAccessTokenRequestInterface.decode(
            readValue(buffer)!);
      case 151:
        return UpdatePasswordWithPhoneNumberRequestInterface.decode(
            readValue(buffer)!);
      case 152:
        return UpdateProfileRequestInterface.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ReachFiveHostApi {
  /// Constructor for [ReachFiveHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReachFiveHostApi({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      _ReachFiveHostApiCodec();

  Future<ReachFiveConfigInterface> initialize(
      ReachFiveKeyInterface reachFiveKey) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.initialize';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reachFiveKey]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ReachFiveConfigInterface?)!;
    }
  }

  Future<AuthTokenInterface> signup(SignupRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.signup';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AuthTokenInterface?)!;
    }
  }

  Future<AuthTokenInterface> loginWithPassword(
      LoginWithPasswordRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.loginWithPassword';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AuthTokenInterface?)!;
    }
  }

  Future<AuthTokenInterface> loginWithProvider(
      LoginWithProviderRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.loginWithProvider';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AuthTokenInterface?)!;
    }
  }

  Future<void> logout(ReachFiveKeyInterface reachFiveKey) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.logout';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[reachFiveKey]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<ProfileInterface> getProfile(
      GetProfileRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.getProfile';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ProfileInterface?)!;
    }
  }

  Future<ProfileInterface> updateProfile(
      UpdateProfileRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updateProfile';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as ProfileInterface?)!;
    }
  }

  Future<AuthTokenInterface> refreshAccessToken(
      RefreshAccessTokenRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.refreshAccessToken';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AuthTokenInterface?)!;
    }
  }

  Future<void> requestPasswordReset(
      RequestPasswordResetRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.requestPasswordReset';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePasswordWithAccessToken(
      UpdatePasswordWithAccessTokenRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithAccessToken';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePasswordWithFreshAccessToken(
      UpdatePasswordWithFreshAccessTokenRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithFreshAccessToken';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePasswordWithEmail(
      UpdatePasswordWithEmailRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithEmail';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> updatePasswordWithPhoneNumber(
      UpdatePasswordWithPhoneNumberRequestInterface request) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.flutter_reach_five_platform_interface.ReachFiveHostApi.updatePasswordWithPhoneNumber';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
